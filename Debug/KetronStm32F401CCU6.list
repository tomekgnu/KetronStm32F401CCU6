
KetronStm32F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f0  080066f0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f8  080066f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000088  08006788  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08006788  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ebd  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f8f  00000000  00000000  00035f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00038f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198c5  00000000  00000000  0003b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cd2  00000000  00000000  00054bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d01c  00000000  00000000  0006a8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001078c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  00107918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006658 	.word	0x08006658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08006658 	.word	0x08006658

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <Ringbuf_init+0x3c>)
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <Ringbuf_init+0x40>)
 8000580:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <Ringbuf_init+0x44>)
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <Ringbuf_init+0x48>)
 8000586:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <Ringbuf_init+0x4c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	695a      	ldr	r2, [r3, #20]
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <Ringbuf_init+0x4c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f042 0201 	orr.w	r2, r2, #1
 8000596:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <Ringbuf_init+0x4c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	68da      	ldr	r2, [r3, #12]
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <Ringbuf_init+0x4c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f042 0220 	orr.w	r2, r2, #32
 80005a6:	60da      	str	r2, [r3, #12]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000154 	.word	0x20000154
 80005b8:	200000a4 	.word	0x200000a4
 80005bc:	20000150 	.word	0x20000150
 80005c0:	200000ec 	.word	0x200000ec
 80005c4:	200002dc 	.word	0x200002dc

080005c8 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	3301      	adds	r3, #1
 80005da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005de:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d007      	beq.n	80005fa <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	79f9      	ldrb	r1, [r7, #7]
 80005f2:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <Uart_read+0x4c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <Uart_read+0x4c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061a:	429a      	cmp	r2, r3
 800061c:	d102      	bne.n	8000624 <Uart_read+0x1c>
  {
    return -1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	e010      	b.n	8000646 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <Uart_read+0x4c>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <Uart_read+0x4c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062e:	5cd3      	ldrb	r3, [r2, r3]
 8000630:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <Uart_read+0x4c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <Uart_read+0x4c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000642:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000644:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000154 	.word	0x20000154

08000658 <Uart_write>:

/* writes a single character to the uart and increments head
 */
void Uart_write(int c)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db21      	blt.n	80006aa <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <Uart_write+0x60>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	3301      	adds	r3, #1
 800066e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000672:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 8000674:	bf00      	nop
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <Uart_write+0x60>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	429a      	cmp	r2, r3
 8000680:	d0f9      	beq.n	8000676 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <Uart_write+0x60>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <Uart_write+0x60>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	b2c9      	uxtb	r1, r1
 8000690:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <Uart_write+0x60>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <Uart_write+0x64>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68da      	ldr	r2, [r3, #12]
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <Uart_write+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006a8:	60da      	str	r2, [r3, #12]
	}
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000150 	.word	0x20000150
 80006bc:	200002dc 	.word	0x200002dc

080006c0 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <IsDataAvailable+0x2c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <IsDataAvailable+0x2c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	3340      	adds	r3, #64	; 0x40
 80006da:	b29b      	uxth	r3, r3
 80006dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000154 	.word	0x20000154

080006f0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	2b00      	cmp	r3, #0
 8000710:	d013      	beq.n	800073a <Uart_isr+0x4a>
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	f003 0320 	and.w	r3, r3, #32
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00e      	beq.n	800073a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <Uart_isr+0xac>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff48 	bl	80005c8 <store_char>
        return;
 8000738:	e02c      	b.n	8000794 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000740:	2b00      	cmp	r3, #0
 8000742:	d027      	beq.n	8000794 <Uart_isr+0xa4>
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	2b00      	cmp	r3, #0
 800074c:	d022      	beq.n	8000794 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <Uart_isr+0xb0>)
 8000750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <Uart_isr+0xb0>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	429a      	cmp	r2, r3
 8000758:	d108      	bne.n	800076c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000768:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800076a:	e012      	b.n	8000792 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <Uart_isr+0xb0>)
 800076e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000770:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <Uart_isr+0xb0>)
 8000772:	5cd3      	ldrb	r3, [r2, r3]
 8000774:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <Uart_isr+0xb0>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	3301      	adds	r3, #1
 800077c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <Uart_isr+0xb0>)
 8000782:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	7bba      	ldrb	r2, [r7, #14]
 8000790:	605a      	str	r2, [r3, #4]
    	return;
 8000792:	bf00      	nop
    }
}
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000154 	.word	0x20000154
 80007a0:	200000ec 	.word	0x200000ec

080007a4 <ee24_isConnected>:

extern I2C_HandleTypeDef hi2c1;
uint8_t ee24_lock = 0;
//################################################################################################################
BOOL ee24_isConnected(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100)==HAL_OK)
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	2202      	movs	r2, #2
 80007ac:	21a0      	movs	r1, #160	; 0xa0
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <ee24_isConnected+0x20>)
 80007b0:	f002 ffe8 	bl	8003784 <HAL_I2C_IsDeviceReady>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <ee24_isConnected+0x1a>
    return TRUE;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e000      	b.n	80007c0 <ee24_isConnected+0x1c>
  else
    return FALSE;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000018c 	.word	0x2000018c

080007c8 <ee24_read>:
    }
  }
}
//################################################################################################################
BOOL ee24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4603      	mov	r3, r0
 80007d6:	81fb      	strh	r3, [r7, #14]
  if (ee24_lock == 1)
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <ee24_read+0x74>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d101      	bne.n	80007e4 <ee24_read+0x1c>
    return FALSE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e026      	b.n	8000832 <ee24_read+0x6a>
  ee24_lock = 1;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <ee24_read+0x74>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
  #elif (_EEPROM_SIZE_KBIT == 4)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0100) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
 80007ea:	89fb      	ldrh	r3, [r7, #14]
 80007ec:	11db      	asrs	r3, r3, #7
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	f003 030e 	and.w	r3, r3, #14
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	b299      	uxth	r1, r3
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	b29a      	uxth	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	b29b      	uxth	r3, r3
 8000808:	2064      	movs	r0, #100	; 0x64
 800080a:	9002      	str	r0, [sp, #8]
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <ee24_read+0x78>)
 8000816:	f002 fd8f 	bl	8003338 <HAL_I2C_Mem_Read>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d104      	bne.n	800082a <ee24_read+0x62>
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
  #endif
  {
    ee24_lock = 0;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <ee24_read+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8000826:	2301      	movs	r3, #1
 8000828:	e003      	b.n	8000832 <ee24_read+0x6a>
  }
  else
  {
    ee24_lock = 0;
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <ee24_read+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
    return FALSE;
 8000830:	2300      	movs	r3, #0
  }    
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000134 	.word	0x20000134
 8000840:	2000018c 	.word	0x2000018c

08000844 <initControls>:
struct Joystick joyold;
struct Encoder encold;

static void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel);

void initControls(struct Joystick *joycur,struct Encoder *enccur){
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]

	extern ADC_HandleTypeDef hadc1;

	joycur->x = joyold.x = 0;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <initControls+0x60>)
 8000850:	2200      	movs	r2, #0
 8000852:	801a      	strh	r2, [r3, #0]
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <initControls+0x60>)
 8000856:	881a      	ldrh	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	801a      	strh	r2, [r3, #0]
	joycur->y = joyold.y = 0;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <initControls+0x60>)
 800085e:	2200      	movs	r2, #0
 8000860:	805a      	strh	r2, [r3, #2]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <initControls+0x60>)
 8000864:	885a      	ldrh	r2, [r3, #2]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	805a      	strh	r2, [r3, #2]
	joycur->button = joyold.button = 0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <initControls+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	711a      	strb	r2, [r3, #4]
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <initControls+0x60>)
 8000872:	791a      	ldrb	r2, [r3, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	711a      	strb	r2, [r3, #4]
	enccur->position = encold.position = 0;
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <initControls+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <initControls+0x64>)
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	701a      	strb	r2, [r3, #0]
	enccur->button = encold.button = FALSE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <initControls+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	705a      	strb	r2, [r3, #1]
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <initControls+0x64>)
 800088e:	785a      	ldrb	r2, [r3, #1]
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	705a      	strb	r2, [r3, #1]
	ADC_SetActiveChannel(&hadc1, ADC_CHANNEL_0);
 8000894:	2100      	movs	r1, #0
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <initControls+0x68>)
 8000898:	f000 f8a6 	bl	80009e8 <ADC_SetActiveChannel>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000160 	.word	0x20000160
 80008a8:	2000015c 	.word	0x2000015c
 80008ac:	20000244 	.word	0x20000244

080008b0 <joystickPressed>:

BOOL joystickPressed(struct Joystick *joy){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

	extern ADC_HandleTypeDef hadc1;

	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80008b8:	210a      	movs	r1, #10
 80008ba:	4825      	ldr	r0, [pc, #148]	; (8000950 <joystickPressed+0xa0>)
 80008bc:	f001 fd1a 	bl	80022f4 <HAL_ADC_PollForConversion>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10e      	bne.n	80008e4 <joystickPressed+0x34>
		joy->x = HAL_ADC_GetValue(&hadc1) >> 1;
 80008c6:	4822      	ldr	r0, [pc, #136]	; (8000950 <joystickPressed+0xa0>)
 80008c8:	f001 fd9f 	bl	800240a <HAL_ADC_GetValue>
 80008cc:	4603      	mov	r3, r0
 80008ce:	085b      	lsrs	r3, r3, #1
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	801a      	strh	r2, [r3, #0]
		ADC_SetActiveChannel(&hadc1, ADC_CHANNEL_1);
 80008d6:	2101      	movs	r1, #1
 80008d8:	481d      	ldr	r0, [pc, #116]	; (8000950 <joystickPressed+0xa0>)
 80008da:	f000 f885 	bl	80009e8 <ADC_SetActiveChannel>
		HAL_ADC_Start(&hadc1);
 80008de:	481c      	ldr	r0, [pc, #112]	; (8000950 <joystickPressed+0xa0>)
 80008e0:	f001 fc54 	bl	800218c <HAL_ADC_Start>
	}
	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80008e4:	210a      	movs	r1, #10
 80008e6:	481a      	ldr	r0, [pc, #104]	; (8000950 <joystickPressed+0xa0>)
 80008e8:	f001 fd04 	bl	80022f4 <HAL_ADC_PollForConversion>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10e      	bne.n	8000910 <joystickPressed+0x60>
		joy->y = HAL_ADC_GetValue(&hadc1) >> 1;
 80008f2:	4817      	ldr	r0, [pc, #92]	; (8000950 <joystickPressed+0xa0>)
 80008f4:	f001 fd89 	bl	800240a <HAL_ADC_GetValue>
 80008f8:	4603      	mov	r3, r0
 80008fa:	085b      	lsrs	r3, r3, #1
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	805a      	strh	r2, [r3, #2]
		ADC_SetActiveChannel(&hadc1, ADC_CHANNEL_0);
 8000902:	2100      	movs	r1, #0
 8000904:	4812      	ldr	r0, [pc, #72]	; (8000950 <joystickPressed+0xa0>)
 8000906:	f000 f86f 	bl	80009e8 <ADC_SetActiveChannel>
		HAL_ADC_Start(&hadc1);
 800090a:	4811      	ldr	r0, [pc, #68]	; (8000950 <joystickPressed+0xa0>)
 800090c:	f001 fc3e 	bl	800218c <HAL_ADC_Start>
	}
	if(HAL_GPIO_ReadPin(JOY_SW_GPIO_Port, JOY_SW_Pin) == GPIO_PIN_RESET)
 8000910:	2104      	movs	r1, #4
 8000912:	4810      	ldr	r0, [pc, #64]	; (8000954 <joystickPressed+0xa4>)
 8000914:	f002 fb9a 	bl	800304c <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d103      	bne.n	8000926 <joystickPressed+0x76>
		joy->button = TRUE;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2201      	movs	r2, #1
 8000922:	711a      	strb	r2, [r3, #4]
 8000924:	e002      	b.n	800092c <joystickPressed+0x7c>
	else
		joy->button = FALSE;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	711a      	strb	r2, [r3, #4]

	if(joy->button != joyold.button){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	791a      	ldrb	r2, [r3, #4]
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <joystickPressed+0xa8>)
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	429a      	cmp	r2, r3
 8000936:	d006      	beq.n	8000946 <joystickPressed+0x96>
		joyold.button = joy->button;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	791a      	ldrb	r2, [r3, #4]
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <joystickPressed+0xa8>)
 800093e:	711a      	strb	r2, [r3, #4]
		return joy->button;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	e000      	b.n	8000948 <joystickPressed+0x98>
	}

	return FALSE;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000244 	.word	0x20000244
 8000954:	40020000 	.word	0x40020000
 8000958:	20000160 	.word	0x20000160

0800095c <encoderChanged>:

BOOL encoderChanged(struct Encoder *enc){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

	extern TIM_HandleTypeDef htim1;
	uint16_t pulse_count = htim1.Instance->CNT;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <encoderChanged+0x80>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096a:	81fb      	strh	r3, [r7, #14]
	enc->position = pulse_count / 4;
 800096c:	89fb      	ldrh	r3, [r7, #14]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	b29b      	uxth	r3, r3
 8000972:	b2da      	uxtb	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(ENC_SW_GPIO_Port, ENC_SW_Pin) == GPIO_PIN_RESET)
 8000978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097c:	4818      	ldr	r0, [pc, #96]	; (80009e0 <encoderChanged+0x84>)
 800097e:	f002 fb65 	bl	800304c <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d103      	bne.n	8000990 <encoderChanged+0x34>
		enc->button = TRUE;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2201      	movs	r2, #1
 800098c:	705a      	strb	r2, [r3, #1]
 800098e:	e002      	b.n	8000996 <encoderChanged+0x3a>
	else
		enc->button = FALSE;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	705a      	strb	r2, [r3, #1]

	if(enc->position != encold.position && enc->position != 128){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	781a      	ldrb	r2, [r3, #0]
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <encoderChanged+0x88>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d009      	beq.n	80009b6 <encoderChanged+0x5a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b80      	cmp	r3, #128	; 0x80
 80009a8:	d005      	beq.n	80009b6 <encoderChanged+0x5a>
		encold.position = enc->position;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <encoderChanged+0x88>)
 80009b0:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00d      	b.n	80009d2 <encoderChanged+0x76>
	}
	if(enc->button != encold.button){
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	785a      	ldrb	r2, [r3, #1]
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <encoderChanged+0x88>)
 80009bc:	785b      	ldrb	r3, [r3, #1]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d006      	beq.n	80009d0 <encoderChanged+0x74>
		encold.button = enc->button;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	785a      	ldrb	r2, [r3, #1]
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <encoderChanged+0x88>)
 80009c8:	705a      	strb	r2, [r3, #1]
		return encold.button;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <encoderChanged+0x88>)
 80009cc:	785b      	ldrb	r3, [r3, #1]
 80009ce:	e000      	b.n	80009d2 <encoderChanged+0x76>
	}

	return FALSE;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000294 	.word	0x20000294
 80009e0:	40020400 	.word	0x40020400
 80009e4:	2000015c 	.word	0x2000015c

080009e8 <ADC_SetActiveChannel>:

static void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
	sConfig.Channel = AdcChannel;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	4619      	mov	r1, r3
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f001 fd06 	bl	8002424 <HAL_ADC_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <ADC_SetActiveChannel+0x3a>
		Error_Handler();
 8000a1e:	f000 fbab 	bl	8001178 <Error_Handler>
	}
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t uartRead;
	uint8_t msgLength = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	717b      	strb	r3, [r7, #5]
	uint8_t msgType = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	713b      	strb	r3, [r7, #4]
	BOOL result;

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000a3a:	4b67      	ldr	r3, [pc, #412]	; (8000bd8 <main+0x1ac>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	4a66      	ldr	r2, [pc, #408]	; (8000bd8 <main+0x1ac>)
 8000a40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a44:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8000a46:	4b65      	ldr	r3, [pc, #404]	; (8000bdc <main+0x1b0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000a4c:	4b63      	ldr	r3, [pc, #396]	; (8000bdc <main+0x1b0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a62      	ldr	r2, [pc, #392]	; (8000bdc <main+0x1b0>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a58:	f001 fae2 	bl	8002020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5c:	f000 f8dc 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a60:	f000 fad8 	bl	8001014 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a64:	f000 fabc 	bl	8000fe0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a68:	f000 f994 	bl	8000d94 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000a6c:	f000 f93e 	bl	8000cec <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000a70:	f000 fa8c 	bl	8000f8c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a74:	f000 fa14 	bl	8000ea0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000a78:	f000 f9ba 	bl	8000df0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	initControls(&joystick,&encoder);
 8000a7c:	4958      	ldr	r1, [pc, #352]	; (8000be0 <main+0x1b4>)
 8000a7e:	4859      	ldr	r0, [pc, #356]	; (8000be4 <main+0x1b8>)
 8000a80:	f7ff fee0 	bl	8000844 <initControls>
	Ringbuf_init();
 8000a84:	f7ff fd78 	bl	8000578 <Ringbuf_init>
	TM_KEYPAD_Init();
 8000a88:	f001 f9a2 	bl	8001dd0 <TM_KEYPAD_Init>
	TM_HD44780_Init(16, 2);
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	2010      	movs	r0, #16
 8000a90:	f000 ffd4 	bl	8001a3c <TM_HD44780_Init>
	HAL_TIM_PWM_Init(&htim2);
 8000a94:	4854      	ldr	r0, [pc, #336]	; (8000be8 <main+0x1bc>)
 8000a96:	f003 ff21 	bl	80048dc <HAL_TIM_PWM_Init>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000a9a:	213c      	movs	r1, #60	; 0x3c
 8000a9c:	4853      	ldr	r0, [pc, #332]	; (8000bec <main+0x1c0>)
 8000a9e:	f004 f8cd 	bl	8004c3c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000aa2:	4851      	ldr	r0, [pc, #324]	; (8000be8 <main+0x1bc>)
 8000aa4:	f003 feb8 	bl	8004818 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	484f      	ldr	r0, [pc, #316]	; (8000be8 <main+0x1bc>)
 8000aac:	f003 ff70 	bl	8004990 <HAL_TIM_PWM_Start>
	TIM2->ARR = 127;
 8000ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab4:	227f      	movs	r2, #127	; 0x7f
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 40;
 8000ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abc:	2228      	movs	r2, #40	; 0x28
 8000abe:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_ADC_Start(&hadc1);
 8000ac0:	484b      	ldr	r0, [pc, #300]	; (8000bf0 <main+0x1c4>)
 8000ac2:	f001 fb63 	bl	800218c <HAL_ADC_Start>

	TM_HD44780_Clear();
 8000ac6:	f001 f81f 	bl	8001b08 <TM_HD44780_Clear>
	TM_HD44780_Puts(0, 0, "Ketron");
 8000aca:	4a4a      	ldr	r2, [pc, #296]	; (8000bf4 <main+0x1c8>)
 8000acc:	2100      	movs	r1, #0
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f001 f826 	bl	8001b20 <TM_HD44780_Puts>

	if((result = ee24_isConnected()) ==FALSE){
 8000ad4:	f7ff fe66 	bl	80007a4 <ee24_isConnected>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d105      	bne.n	8000aee <main+0xc2>
		TM_HD44780_Puts(0, 1, "EEPROM fail");
 8000ae2:	4a45      	ldr	r2, [pc, #276]	; (8000bf8 <main+0x1cc>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f001 f81a 	bl	8001b20 <TM_HD44780_Puts>
 8000aec:	e025      	b.n	8000b3a <main+0x10e>
	}
	else{
		settings.family_left = 1;
 8000aee:	4b43      	ldr	r3, [pc, #268]	; (8000bfc <main+0x1d0>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
		settings.instrument_left = 1;
 8000af4:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <main+0x1d0>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	705a      	strb	r2, [r3, #1]
		settings.family_right = 2;
 8000afa:	4b40      	ldr	r3, [pc, #256]	; (8000bfc <main+0x1d0>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	709a      	strb	r2, [r3, #2]
		settings.instrument_right = 2;
 8000b00:	4b3e      	ldr	r3, [pc, #248]	; (8000bfc <main+0x1d0>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	70da      	strb	r2, [r3, #3]
		settings.family_left = settings.family_right = settings.instrument_left = settings.instrument_right = 0;
 8000b06:	4b3d      	ldr	r3, [pc, #244]	; (8000bfc <main+0x1d0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	70da      	strb	r2, [r3, #3]
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <main+0x1d0>)
 8000b0e:	78da      	ldrb	r2, [r3, #3]
 8000b10:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <main+0x1d0>)
 8000b12:	705a      	strb	r2, [r3, #1]
 8000b14:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <main+0x1d0>)
 8000b16:	785a      	ldrb	r2, [r3, #1]
 8000b18:	4b38      	ldr	r3, [pc, #224]	; (8000bfc <main+0x1d0>)
 8000b1a:	709a      	strb	r2, [r3, #2]
 8000b1c:	4b37      	ldr	r3, [pc, #220]	; (8000bfc <main+0x1d0>)
 8000b1e:	789a      	ldrb	r2, [r3, #2]
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <main+0x1d0>)
 8000b22:	701a      	strb	r2, [r3, #0]
		if(result == TRUE)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d107      	bne.n	8000b3a <main+0x10e>
			result = ee24_read(_EEPROM_ADDRESS, (uint8_t *)(&settings), sizeof(struct Settings), 100);
 8000b2a:	2364      	movs	r3, #100	; 0x64
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	4933      	ldr	r1, [pc, #204]	; (8000bfc <main+0x1d0>)
 8000b30:	20a0      	movs	r0, #160	; 0xa0
 8000b32:	f7ff fe49 	bl	80007c8 <ee24_read>
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		userKey = TM_KEYPAD_Read();
 8000b3a:	f001 f951 	bl	8001de0 <TM_KEYPAD_Read>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <main+0x1d4>)
 8000b44:	701a      	strb	r2, [r3, #0]
		if(userKey != TM_KEYPAD_Button_NOPRESSED){
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <main+0x1d4>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	d00b      	beq.n	8000b66 <main+0x13a>
			sprintf(lcdText[0],"%d",userKey);
 8000b4e:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <main+0x1d4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	492b      	ldr	r1, [pc, #172]	; (8000c04 <main+0x1d8>)
 8000b56:	482c      	ldr	r0, [pc, #176]	; (8000c08 <main+0x1dc>)
 8000b58:	f005 f950 	bl	8005dfc <siprintf>
			TM_HD44780_Puts(0, 0, lcdText[0]);
 8000b5c:	4a2a      	ldr	r2, [pc, #168]	; (8000c08 <main+0x1dc>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 ffdd 	bl	8001b20 <TM_HD44780_Puts>
		}
		if(joystickPressed(&joystick) == TRUE){
 8000b66:	481f      	ldr	r0, [pc, #124]	; (8000be4 <main+0x1b8>)
 8000b68:	f7ff fea2 	bl	80008b0 <joystickPressed>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d104      	bne.n	8000b7c <main+0x150>
			TM_HD44780_Puts(0, 0, "Joystick");
 8000b72:	4a26      	ldr	r2, [pc, #152]	; (8000c0c <main+0x1e0>)
 8000b74:	2100      	movs	r1, #0
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 ffd2 	bl	8001b20 <TM_HD44780_Puts>
		}
		if(encoderChanged(&encoder) == TRUE){
 8000b7c:	4818      	ldr	r0, [pc, #96]	; (8000be0 <main+0x1b4>)
 8000b7e:	f7ff feed 	bl	800095c <encoderChanged>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d110      	bne.n	8000baa <main+0x17e>
			TM_HD44780_Puts(0, 0, "Encoder");
 8000b88:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <main+0x1e4>)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f000 ffc7 	bl	8001b20 <TM_HD44780_Puts>
			sprintf(lcdText[1],"%d",encoder.position);
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <main+0x1b4>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	491a      	ldr	r1, [pc, #104]	; (8000c04 <main+0x1d8>)
 8000b9a:	481e      	ldr	r0, [pc, #120]	; (8000c14 <main+0x1e8>)
 8000b9c:	f005 f92e 	bl	8005dfc <siprintf>
			TM_HD44780_Puts(0, 1,lcdText[1]);
 8000ba0:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <main+0x1e8>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 ffbb 	bl	8001b20 <TM_HD44780_Puts>
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (IsDataAvailable() > 0) {
 8000baa:	f7ff fd89 	bl	80006c0 <IsDataAvailable>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	ddc2      	ble.n	8000b3a <main+0x10e>
			uartRead = (unsigned char) Uart_read();
 8000bb4:	f7ff fd28 	bl	8000608 <Uart_read>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71bb      	strb	r3, [r7, #6]
			if (readMidiMessage(uartRead, &msgLength,&msgType) == TRUE){
 8000bbc:	1d3a      	adds	r2, r7, #4
 8000bbe:	1d79      	adds	r1, r7, #5
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fade 	bl	8001184 <readMidiMessage>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d1b5      	bne.n	8000b3a <main+0x10e>
				switch(msgType){


				}
				sendMidiMessage(msgLength);
 8000bce:	797b      	ldrb	r3, [r7, #5]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fb6f 	bl	80012b4 <sendMidiMessage>
		userKey = TM_KEYPAD_Read();
 8000bd6:	e7b0      	b.n	8000b3a <main+0x10e>
 8000bd8:	e000edf0 	.word	0xe000edf0
 8000bdc:	e0001000 	.word	0xe0001000
 8000be0:	200001e0 	.word	0x200001e0
 8000be4:	2000028c 	.word	0x2000028c
 8000be8:	20000320 	.word	0x20000320
 8000bec:	20000294 	.word	0x20000294
 8000bf0:	20000244 	.word	0x20000244
 8000bf4:	08006670 	.word	0x08006670
 8000bf8:	08006678 	.word	0x08006678
 8000bfc:	20000188 	.word	0x20000188
 8000c00:	20000368 	.word	0x20000368
 8000c04:	08006684 	.word	0x08006684
 8000c08:	20000168 	.word	0x20000168
 8000c0c:	08006688 	.word	0x08006688
 8000c10:	08006694 	.word	0x08006694
 8000c14:	20000178 	.word	0x20000178

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b094      	sub	sp, #80	; 0x50
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	2230      	movs	r2, #48	; 0x30
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f005 f8e0 	bl	8005dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <SystemClock_Config+0xcc>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	4a27      	ldr	r2, [pc, #156]	; (8000ce4 <SystemClock_Config+0xcc>)
 8000c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4c:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <SystemClock_Config+0xcc>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <SystemClock_Config+0xd0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <SystemClock_Config+0xd0>)
 8000c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <SystemClock_Config+0xd0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c8c:	2319      	movs	r3, #25
 8000c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c90:	23a8      	movs	r3, #168	; 0xa8
 8000c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 0320 	add.w	r3, r7, #32
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 f921 	bl	8003ee8 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cac:	f000 fa64 	bl	8001178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 fb83 	bl	80043d8 <HAL_RCC_ClockConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cd8:	f000 fa4e 	bl	8001178 <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3750      	adds	r7, #80	; 0x50
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40007000 	.word	0x40007000

08000cec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d00:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <MX_ADC1_Init+0xa0>)
 8000d02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <MX_ADC1_Init+0xa4>)
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d4e:	480e      	ldr	r0, [pc, #56]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d50:	f001 f9d8 	bl	8002104 <HAL_ADC_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000d5a:	f000 fa0d 	bl	8001178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_ADC1_Init+0x9c>)
 8000d70:	f001 fb58 	bl	8002424 <HAL_ADC_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d7a:	f000 f9fd 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000244 	.word	0x20000244
 8000d8c:	40012000 	.word	0x40012000
 8000d90:	0f000001 	.word	0x0f000001

08000d94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <MX_I2C1_Init+0x54>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000da0:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_I2C1_Init+0x58>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dd2:	f002 f96d 	bl	80030b0 <HAL_I2C_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ddc:	f000 f9cc 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000018c 	.word	0x2000018c
 8000de8:	40005400 	.word	0x40005400
 8000dec:	000186a0 	.word	0x000186a0

08000df0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	2224      	movs	r2, #36	; 0x24
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 fff4 	bl	8005dec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <MX_TIM1_Init+0xa8>)
 8000e0e:	4a23      	ldr	r2, [pc, #140]	; (8000e9c <MX_TIM1_Init+0xac>)
 8000e10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <MX_TIM1_Init+0xa8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <MX_TIM1_Init+0xa8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 512;
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <MX_TIM1_Init+0xa8>)
 8000e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_TIM1_Init+0xa8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_TIM1_Init+0xa8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_TIM1_Init+0xa8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e40:	2301      	movs	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e48:	230a      	movs	r3, #10
 8000e4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e50:	2301      	movs	r3, #1
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000e58:	230a      	movs	r3, #10
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_TIM1_Init+0xa8>)
 8000e64:	f003 fe44 	bl	8004af0 <HAL_TIM_Encoder_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000e6e:	f000 f983 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <MX_TIM1_Init+0xa8>)
 8000e80:	f004 fcf2 	bl	8005868 <HAL_TIMEx_MasterConfigSynchronization>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000e8a:	f000 f975 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3730      	adds	r7, #48	; 0x30
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000294 	.word	0x20000294
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	f107 0320 	add.w	r3, r7, #32
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]
 8000ece:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000eda:	2253      	movs	r2, #83	; 0x53
 8000edc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000ee6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef8:	4823      	ldr	r0, [pc, #140]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000efa:	f003 fc3d 	bl	8004778 <HAL_TIM_Base_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f04:	f000 f938 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f12:	4619      	mov	r1, r3
 8000f14:	481c      	ldr	r0, [pc, #112]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000f16:	f004 f8e5 	bl	80050e4 <HAL_TIM_ConfigClockSource>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f20:	f000 f92a 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f24:	4818      	ldr	r0, [pc, #96]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000f26:	f003 fcd9 	bl	80048dc <HAL_TIM_PWM_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f30:	f000 f922 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	4619      	mov	r1, r3
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000f44:	f004 fc90 	bl	8005868 <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f4e:	f000 f913 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f52:	2360      	movs	r3, #96	; 0x60
 8000f54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000f6a:	f003 fffd 	bl	8004f68 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f74:	f000 f900 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <MX_TIM2_Init+0xe8>)
 8000f7a:	f000 fbeb 	bl	8001754 <HAL_TIM_MspPostInit>

}
 8000f7e:	bf00      	nop
 8000f80:	3738      	adds	r7, #56	; 0x38
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000320 	.word	0x20000320

08000f8c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_USART6_UART_Init+0x4c>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MX_USART6_UART_Init+0x50>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 31250;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_USART6_UART_Init+0x4c>)
 8000f98:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000f9c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_USART6_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_USART6_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_USART6_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_USART6_UART_Init+0x4c>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_USART6_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_USART6_UART_Init+0x4c>)
 8000fbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fc2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_USART6_UART_Init+0x4c>)
 8000fc6:	f004 fcd1 	bl	800596c <HAL_UART_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8000fd0:	f000 f8d2 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200002dc 	.word	0x200002dc
 8000fdc:	40011400 	.word	0x40011400

08000fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_DMA_Init+0x30>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <MX_DMA_Init+0x30>)
 8000ff0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_DMA_Init+0x30>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <MX_GPIO_Init+0x154>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <MX_GPIO_Init+0x154>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <MX_GPIO_Init+0x154>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b47      	ldr	r3, [pc, #284]	; (8001168 <MX_GPIO_Init+0x154>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a46      	ldr	r2, [pc, #280]	; (8001168 <MX_GPIO_Init+0x154>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b44      	ldr	r3, [pc, #272]	; (8001168 <MX_GPIO_Init+0x154>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b40      	ldr	r3, [pc, #256]	; (8001168 <MX_GPIO_Init+0x154>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a3f      	ldr	r2, [pc, #252]	; (8001168 <MX_GPIO_Init+0x154>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <MX_GPIO_Init+0x154>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <MX_GPIO_Init+0x154>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a38      	ldr	r2, [pc, #224]	; (8001168 <MX_GPIO_Init+0x154>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b36      	ldr	r3, [pc, #216]	; (8001168 <MX_GPIO_Init+0x154>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a0:	4832      	ldr	r0, [pc, #200]	; (800116c <MX_GPIO_Init+0x158>)
 80010a2:	f001 ffeb 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HD44780_RS_Pin|HD44780_E_Pin|HD44780_D4_Pin|HD44780_D5_Pin
 80010a6:	2201      	movs	r2, #1
 80010a8:	21f8      	movs	r1, #248	; 0xf8
 80010aa:	4831      	ldr	r0, [pc, #196]	; (8001170 <MX_GPIO_Init+0x15c>)
 80010ac:	f001 ffe6 	bl	800307c <HAL_GPIO_WritePin>
                          |HD44780_D6_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HD44780_D7_Pin|KEYPAD_COLUMN_1_Pin|KEYPAD_COLUMN_2_Pin|KEYPAD_COLUMN_3_Pin
 80010b0:	2200      	movs	r2, #0
 80010b2:	21f1      	movs	r1, #241	; 0xf1
 80010b4:	482f      	ldr	r0, [pc, #188]	; (8001174 <MX_GPIO_Init+0x160>)
 80010b6:	f001 ffe1 	bl	800307c <HAL_GPIO_WritePin>
                          |KEYPAD_COLUMN_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4826      	ldr	r0, [pc, #152]	; (800116c <MX_GPIO_Init+0x158>)
 80010d4:	f001 fe36 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_SW_Pin KEYPAD_ROW_1_Pin */
  GPIO_InitStruct.Pin = JOY_SW_Pin|KEYPAD_ROW_1_Pin;
 80010d8:	f240 4304 	movw	r3, #1028	; 0x404
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4820      	ldr	r0, [pc, #128]	; (8001170 <MX_GPIO_Init+0x15c>)
 80010ee:	f001 fe29 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : HD44780_RS_Pin HD44780_E_Pin HD44780_D4_Pin HD44780_D5_Pin
                           HD44780_D6_Pin */
  GPIO_InitStruct.Pin = HD44780_RS_Pin|HD44780_E_Pin|HD44780_D4_Pin|HD44780_D5_Pin
 80010f2:	23f8      	movs	r3, #248	; 0xf8
 80010f4:	617b      	str	r3, [r7, #20]
                          |HD44780_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <MX_GPIO_Init+0x15c>)
 800110a:	f001 fe1b 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : HD44780_D7_Pin */
  GPIO_InitStruct.Pin = HD44780_D7_Pin;
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HD44780_D7_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <MX_GPIO_Init+0x160>)
 8001126:	f001 fe0d 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_ROW_4_Pin KEYPAD_ROW_3_Pin KEYPAD_ROW_2_Pin ENC_SW_Pin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_4_Pin|KEYPAD_ROW_3_Pin|KEYPAD_ROW_2_Pin|ENC_SW_Pin;
 800112a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001134:	2301      	movs	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <MX_GPIO_Init+0x160>)
 8001140:	f001 fe00 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_COLUMN_1_Pin KEYPAD_COLUMN_2_Pin KEYPAD_COLUMN_3_Pin KEYPAD_COLUMN_4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_COLUMN_1_Pin|KEYPAD_COLUMN_2_Pin|KEYPAD_COLUMN_3_Pin|KEYPAD_COLUMN_4_Pin;
 8001144:	23f0      	movs	r3, #240	; 0xf0
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001150:	2301      	movs	r3, #1
 8001152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_GPIO_Init+0x160>)
 800115c:	f001 fdf2 	bl	8002d44 <HAL_GPIO_Init>

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40020800 	.word	0x40020800
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <readMidiMessage>:
	work_event.event.size = midiReadIndex;
	work_event.delta = dt;
	return &work_event;
}

BOOL readMidiMessage(unsigned char byte,unsigned char *len,unsigned char *type){
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	73fb      	strb	r3, [r7, #15]
	
   unsigned char tmp;

   // state machine for parsing the byte
   switch(midiState)
 8001192:	4b44      	ldr	r3, [pc, #272]	; (80012a4 <readMidiMessage+0x120>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d072      	beq.n	8001280 <readMidiMessage+0xfc>
 800119a:	2b03      	cmp	r3, #3
 800119c:	dc7c      	bgt.n	8001298 <readMidiMessage+0x114>
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d002      	beq.n	80011a8 <readMidiMessage+0x24>
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d032      	beq.n	800120c <readMidiMessage+0x88>
 80011a6:	e077      	b.n	8001298 <readMidiMessage+0x114>
   {
         // we are currently stateless, waiting to start reading an event we care about.
         case MIDI_WAIT:
            if (byte == 0xF0)
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2bf0      	cmp	r3, #240	; 0xf0
 80011ac:	d06f      	beq.n	800128e <readMidiMessage+0x10a>
               // call sysex handler, which will return the state we should be in.
               //midiState = handleSysex();
               break;
            }
            // store length of midi command
            tmp = commandLen(byte);
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f89d 	bl	80012f0 <commandLen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	75fb      	strb	r3, [r7, #23]
            // is the message one byte long?
            if (tmp == 1)
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d10d      	bne.n	80011dc <readMidiMessage+0x58>
/*               if (byte == MIDI_CLOCK && midiClockFunc)
               {
                  // it's a clock event and we have a registered clock handler
                  midiClockFunc();
               } else {*/
            	 *len = 1;
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
            	 work_event.event.data[0] = byte;
 80011c6:	4a38      	ldr	r2, [pc, #224]	; (80012a8 <readMidiMessage+0x124>)
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	70d3      	strb	r3, [r2, #3]
            	 noteEvent = FALSE;
 80011cc:	4b37      	ldr	r3, [pc, #220]	; (80012ac <readMidiMessage+0x128>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
            	 *type = byte;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	701a      	strb	r2, [r3, #0]
                 return TRUE;
 80011d8:	2301      	movs	r3, #1
 80011da:	e05e      	b.n	800129a <readMidiMessage+0x116>
            } else if(tmp == 0){
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10a      	bne.n	80011f8 <readMidiMessage+0x74>
            	if(noteEvent == TRUE) {
 80011e2:	4b32      	ldr	r3, [pc, #200]	; (80012ac <readMidiMessage+0x128>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10c      	bne.n	8001204 <readMidiMessage+0x80>
            		work_event.event.data[1] = byte;
 80011ea:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <readMidiMessage+0x124>)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	7113      	strb	r3, [r2, #4]
            		midiReadIndex = 2;
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <readMidiMessage+0x12c>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e005      	b.n	8001204 <readMidiMessage+0x80>
            	}
            }
			else {
				   // save first byte of event, position pointer..
				   work_event.event.data[0] = byte;
 80011f8:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <readMidiMessage+0x124>)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	70d3      	strb	r3, [r2, #3]
				   midiReadIndex = 1;
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <readMidiMessage+0x12c>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
				}
            midiState = MIDI_READING;
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <readMidiMessage+0x120>)
 8001206:	2202      	movs	r2, #2
 8001208:	701a      	strb	r2, [r3, #0]
            break;
 800120a:	e045      	b.n	8001298 <readMidiMessage+0x114>
         case MIDI_READING:
        	if(commandLen(byte) > 0){
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f86e 	bl	80012f0 <commandLen>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <readMidiMessage+0xa6>
        		midiState = MIDI_WAIT;
 800121a:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <readMidiMessage+0x120>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
        		noteEvent = FALSE;
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <readMidiMessage+0x128>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 8001226:	2300      	movs	r3, #0
 8001228:	e037      	b.n	800129a <readMidiMessage+0x116>
        	}
        	work_event.event.data[midiReadIndex++] = byte;
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <readMidiMessage+0x12c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	b2d1      	uxtb	r1, r2
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <readMidiMessage+0x12c>)
 8001234:	7011      	strb	r1, [r2, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <readMidiMessage+0x124>)
 800123a:	4413      	add	r3, r2
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	70da      	strb	r2, [r3, #3]
            if (midiReadIndex == commandLen(work_event.event.data[0]&0xF0))
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <readMidiMessage+0x124>)
 8001242:	78db      	ldrb	r3, [r3, #3]
 8001244:	f023 030f 	bic.w	r3, r3, #15
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f850 	bl	80012f0 <commandLen>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <readMidiMessage+0x12c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d11a      	bne.n	8001292 <readMidiMessage+0x10e>
            {
               midiState = MIDI_WAIT;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <readMidiMessage+0x120>)
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
               *len = midiReadIndex;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <readMidiMessage+0x12c>)
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	701a      	strb	r2, [r3, #0]
               if(work_event.event.data[0] & (MIDI_NOTE_ON|MIDI_NOTE_OFF)){
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <readMidiMessage+0x124>)
 800126c:	78db      	ldrb	r3, [r3, #3]
 800126e:	f003 0390 	and.w	r3, r3, #144	; 0x90
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <readMidiMessage+0xf8>
            	   noteEvent = TRUE;
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <readMidiMessage+0x128>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
               }
               return TRUE;
 800127c:	2301      	movs	r3, #1
 800127e:	e00c      	b.n	800129a <readMidiMessage+0x116>
            }
            break;
         case MIDI_IGNORING:
            if (byte == 0xF7)
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2bf7      	cmp	r3, #247	; 0xf7
 8001284:	d107      	bne.n	8001296 <readMidiMessage+0x112>
            {
               midiState = MIDI_WAIT;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <readMidiMessage+0x120>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800128c:	e003      	b.n	8001296 <readMidiMessage+0x112>
               break;
 800128e:	bf00      	nop
 8001290:	e002      	b.n	8001298 <readMidiMessage+0x114>
            break;
 8001292:	bf00      	nop
 8001294:	e000      	b.n	8001298 <readMidiMessage+0x114>
            break;
 8001296:	bf00      	nop
      }

   return FALSE;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000370 	.word	0x20000370
 80012ac:	20000135 	.word	0x20000135
 80012b0:	2000036d 	.word	0x2000036d

080012b4 <sendMidiMessage>:

void sendMidiMessage(unsigned char num){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	unsigned char i;	
	//if((work_event.event.data[0] & 0xF0) == 0x90)
		//work_event.event.data[2] *= ( (float)playVolume / 255.00);
	for(i = 0; i < num; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e009      	b.n	80012d8 <sendMidiMessage+0x24>
		Uart_write(work_event.event.data[i]);
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <sendMidiMessage+0x38>)
 80012c8:	4413      	add	r3, r2
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f9c3 	bl	8000658 <Uart_write>
	for(i = 0; i < num; i++)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	3301      	adds	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d3f1      	bcc.n	80012c4 <sendMidiMessage+0x10>
	
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000370 	.word	0x20000370

080012f0 <commandLen>:
	work_event.event.data[1] = program;
	sendMidiMessage(2);
}

unsigned char commandLen(unsigned char cmd)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	
	if ((cmd & 0xF0) != 0xF0)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001300:	2bf0      	cmp	r3, #240	; 0xf0
 8001302:	d003      	beq.n	800130c <commandLen+0x1c>
	cmd = cmd & 0xF0;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f023 030f 	bic.w	r3, r3, #15
 800130a:	71fb      	strb	r3, [r7, #7]
	
	switch(cmd){
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b80      	cmp	r3, #128	; 0x80
 8001310:	f000 80f4 	beq.w	80014fc <commandLen+0x20c>
 8001314:	2b80      	cmp	r3, #128	; 0x80
 8001316:	f2c0 80f3 	blt.w	8001500 <commandLen+0x210>
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	f300 80f0 	bgt.w	8001500 <commandLen+0x210>
 8001320:	2b90      	cmp	r3, #144	; 0x90
 8001322:	f2c0 80ed 	blt.w	8001500 <commandLen+0x210>
 8001326:	3b90      	subs	r3, #144	; 0x90
 8001328:	2b6f      	cmp	r3, #111	; 0x6f
 800132a:	f200 80e9 	bhi.w	8001500 <commandLen+0x210>
 800132e:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <commandLen+0x44>)
 8001330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001334:	080014fd 	.word	0x080014fd
 8001338:	08001501 	.word	0x08001501
 800133c:	08001501 	.word	0x08001501
 8001340:	08001501 	.word	0x08001501
 8001344:	08001501 	.word	0x08001501
 8001348:	08001501 	.word	0x08001501
 800134c:	08001501 	.word	0x08001501
 8001350:	08001501 	.word	0x08001501
 8001354:	08001501 	.word	0x08001501
 8001358:	08001501 	.word	0x08001501
 800135c:	08001501 	.word	0x08001501
 8001360:	08001501 	.word	0x08001501
 8001364:	08001501 	.word	0x08001501
 8001368:	08001501 	.word	0x08001501
 800136c:	08001501 	.word	0x08001501
 8001370:	08001501 	.word	0x08001501
 8001374:	080014fd 	.word	0x080014fd
 8001378:	08001501 	.word	0x08001501
 800137c:	08001501 	.word	0x08001501
 8001380:	08001501 	.word	0x08001501
 8001384:	08001501 	.word	0x08001501
 8001388:	08001501 	.word	0x08001501
 800138c:	08001501 	.word	0x08001501
 8001390:	08001501 	.word	0x08001501
 8001394:	08001501 	.word	0x08001501
 8001398:	08001501 	.word	0x08001501
 800139c:	08001501 	.word	0x08001501
 80013a0:	08001501 	.word	0x08001501
 80013a4:	08001501 	.word	0x08001501
 80013a8:	08001501 	.word	0x08001501
 80013ac:	08001501 	.word	0x08001501
 80013b0:	08001501 	.word	0x08001501
 80013b4:	080014fd 	.word	0x080014fd
 80013b8:	08001501 	.word	0x08001501
 80013bc:	08001501 	.word	0x08001501
 80013c0:	08001501 	.word	0x08001501
 80013c4:	08001501 	.word	0x08001501
 80013c8:	08001501 	.word	0x08001501
 80013cc:	08001501 	.word	0x08001501
 80013d0:	08001501 	.word	0x08001501
 80013d4:	08001501 	.word	0x08001501
 80013d8:	08001501 	.word	0x08001501
 80013dc:	08001501 	.word	0x08001501
 80013e0:	08001501 	.word	0x08001501
 80013e4:	08001501 	.word	0x08001501
 80013e8:	08001501 	.word	0x08001501
 80013ec:	08001501 	.word	0x08001501
 80013f0:	08001501 	.word	0x08001501
 80013f4:	080014f9 	.word	0x080014f9
 80013f8:	08001501 	.word	0x08001501
 80013fc:	08001501 	.word	0x08001501
 8001400:	08001501 	.word	0x08001501
 8001404:	08001501 	.word	0x08001501
 8001408:	08001501 	.word	0x08001501
 800140c:	08001501 	.word	0x08001501
 8001410:	08001501 	.word	0x08001501
 8001414:	08001501 	.word	0x08001501
 8001418:	08001501 	.word	0x08001501
 800141c:	08001501 	.word	0x08001501
 8001420:	08001501 	.word	0x08001501
 8001424:	08001501 	.word	0x08001501
 8001428:	08001501 	.word	0x08001501
 800142c:	08001501 	.word	0x08001501
 8001430:	08001501 	.word	0x08001501
 8001434:	080014f9 	.word	0x080014f9
 8001438:	08001501 	.word	0x08001501
 800143c:	08001501 	.word	0x08001501
 8001440:	08001501 	.word	0x08001501
 8001444:	08001501 	.word	0x08001501
 8001448:	08001501 	.word	0x08001501
 800144c:	08001501 	.word	0x08001501
 8001450:	08001501 	.word	0x08001501
 8001454:	08001501 	.word	0x08001501
 8001458:	08001501 	.word	0x08001501
 800145c:	08001501 	.word	0x08001501
 8001460:	08001501 	.word	0x08001501
 8001464:	08001501 	.word	0x08001501
 8001468:	08001501 	.word	0x08001501
 800146c:	08001501 	.word	0x08001501
 8001470:	08001501 	.word	0x08001501
 8001474:	080014fd 	.word	0x080014fd
 8001478:	08001501 	.word	0x08001501
 800147c:	08001501 	.word	0x08001501
 8001480:	08001501 	.word	0x08001501
 8001484:	08001501 	.word	0x08001501
 8001488:	08001501 	.word	0x08001501
 800148c:	08001501 	.word	0x08001501
 8001490:	08001501 	.word	0x08001501
 8001494:	08001501 	.word	0x08001501
 8001498:	08001501 	.word	0x08001501
 800149c:	08001501 	.word	0x08001501
 80014a0:	08001501 	.word	0x08001501
 80014a4:	08001501 	.word	0x08001501
 80014a8:	08001501 	.word	0x08001501
 80014ac:	08001501 	.word	0x08001501
 80014b0:	08001501 	.word	0x08001501
 80014b4:	08001501 	.word	0x08001501
 80014b8:	080014f9 	.word	0x080014f9
 80014bc:	080014fd 	.word	0x080014fd
 80014c0:	080014f9 	.word	0x080014f9
 80014c4:	08001501 	.word	0x08001501
 80014c8:	08001501 	.word	0x08001501
 80014cc:	080014f5 	.word	0x080014f5
 80014d0:	08001501 	.word	0x08001501
 80014d4:	080014f5 	.word	0x080014f5
 80014d8:	080014f5 	.word	0x080014f5
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	080014f5 	.word	0x080014f5
 80014e4:	080014f5 	.word	0x080014f5
 80014e8:	08001501 	.word	0x08001501
 80014ec:	080014f5 	.word	0x080014f5
 80014f0:	080014f5 	.word	0x080014f5
		case	MIDI_START:
		case	MIDI_STOP:
		case	MIDI_CONT:
		case	MIDI_SENSE:
		case	MIDI_RESET:	
					return 1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e004      	b.n	8001502 <commandLen+0x212>
		case	MIDI_PROGRAM_CHANGE:
		case	MIDI_CHANNEL_TOUCH:
		case	MIDI_MTC:
		case	MIDI_SONG_SEL:	
					return 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	e002      	b.n	8001502 <commandLen+0x212>
		case	MIDI_NOTE_ON:
		case	MIDI_POLY_TOUCH:
		case	MIDI_CONTROL_CHANGE:
		case	MIDI_PITCH_BEND:
		case	MIDI_SPP:	
					return 3;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e000      	b.n	8001502 <commandLen+0x212>
		
	}
	
	return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop

08001510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <HAL_MspInit+0x4c>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_MspInit+0x4c>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800154e:	2005      	movs	r0, #5
 8001550:	f001 fa56 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_ADC_MspInit+0x7c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d127      	bne.n	80015d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <HAL_ADC_MspInit+0x80>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <HAL_ADC_MspInit+0x80>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_ADC_MspInit+0x80>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_ADC_MspInit+0x80>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_ADC_MspInit+0x80>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_ADC_MspInit+0x80>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 80015ba:	2303      	movs	r3, #3
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015be:	2303      	movs	r3, #3
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <HAL_ADC_MspInit+0x84>)
 80015ce:	f001 fbb9 	bl	8002d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40012000 	.word	0x40012000
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000

080015e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_I2C_MspInit+0x84>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d12c      	bne.n	8001664 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_I2C_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a17      	ldr	r2, [pc, #92]	; (8001670 <HAL_I2C_MspInit+0x88>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_I2C_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162c:	2312      	movs	r3, #18
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001630:	2301      	movs	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001638:	2304      	movs	r3, #4
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <HAL_I2C_MspInit+0x8c>)
 8001644:	f001 fb7e 	bl	8002d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_I2C_MspInit+0x88>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_I2C_MspInit+0x88>)
 8001652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_I2C_MspInit+0x88>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40005400 	.word	0x40005400
 8001670:	40023800 	.word	0x40023800
 8001674:	40020400 	.word	0x40020400

08001678 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_TIM_Encoder_MspInit+0x84>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d12c      	bne.n	80016f4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_TIM_Encoder_MspInit+0x88>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_TIM_Encoder_MspInit+0x88>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_TIM_Encoder_MspInit+0x88>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_TIM_Encoder_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_TIM_Encoder_MspInit+0x88>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_TIM_Encoder_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <HAL_TIM_Encoder_MspInit+0x8c>)
 80016f0:	f001 fb28 	bl	8002d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40010000 	.word	0x40010000
 8001700:	40023800 	.word	0x40023800
 8001704:	40020000 	.word	0x40020000

08001708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001718:	d115      	bne.n	8001746 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8001736:	2201      	movs	r2, #1
 8001738:	2101      	movs	r1, #1
 800173a:	201c      	movs	r0, #28
 800173c:	f001 f96b 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001740:	201c      	movs	r0, #28
 8001742:	f001 f984 	bl	8002a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001774:	d11e      	bne.n	80017b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_TIM_MspPostInit+0x68>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <HAL_TIM_MspPostInit+0x68>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_TIM_MspPostInit+0x68>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001796:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017a4:	2301      	movs	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4619      	mov	r1, r3
 80017ae:	4804      	ldr	r0, [pc, #16]	; (80017c0 <HAL_TIM_MspPostInit+0x6c>)
 80017b0:	f001 fac8 	bl	8002d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000

080017c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a35      	ldr	r2, [pc, #212]	; (80018b8 <HAL_UART_MspInit+0xf4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d163      	bne.n	80018ae <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_UART_MspInit+0xf8>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a33      	ldr	r2, [pc, #204]	; (80018bc <HAL_UART_MspInit+0xf8>)
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <HAL_UART_MspInit+0xf8>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_UART_MspInit+0xf8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a2c      	ldr	r2, [pc, #176]	; (80018bc <HAL_UART_MspInit+0xf8>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_UART_MspInit+0xf8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800181e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001830:	2308      	movs	r3, #8
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4821      	ldr	r0, [pc, #132]	; (80018c0 <HAL_UART_MspInit+0xfc>)
 800183c:	f001 fa82 	bl	8002d44 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001840:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_UART_MspInit+0x100>)
 8001842:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <HAL_UART_MspInit+0x104>)
 8001844:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_UART_MspInit+0x100>)
 8001848:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800184c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_UART_MspInit+0x100>)
 8001850:	2240      	movs	r2, #64	; 0x40
 8001852:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_UART_MspInit+0x100>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_UART_MspInit+0x100>)
 800185c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001860:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_UART_MspInit+0x100>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <HAL_UART_MspInit+0x100>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_UART_MspInit+0x100>)
 8001870:	2200      	movs	r2, #0
 8001872:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_UART_MspInit+0x100>)
 8001876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800187a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_UART_MspInit+0x100>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001882:	4810      	ldr	r0, [pc, #64]	; (80018c4 <HAL_UART_MspInit+0x100>)
 8001884:	f001 f8fe 	bl	8002a84 <HAL_DMA_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800188e:	f7ff fc73 	bl	8001178 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_UART_MspInit+0x100>)
 8001896:	635a      	str	r2, [r3, #52]	; 0x34
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_UART_MspInit+0x100>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 2);
 800189e:	2202      	movs	r2, #2
 80018a0:	2101      	movs	r1, #1
 80018a2:	2047      	movs	r0, #71	; 0x47
 80018a4:	f001 f8b7 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80018a8:	2047      	movs	r0, #71	; 0x47
 80018aa:	f001 f8d0 	bl	8002a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40011400 	.word	0x40011400
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	200001e4 	.word	0x200001e4
 80018c8:	400264a0 	.word	0x400264a0

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <NMI_Handler+0x4>

080018d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler+0x4>

080018de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler+0x4>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <UsageFault_Handler+0x4>

080018ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001918:	f000 fbd4 	bl	80020c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <TIM2_IRQHandler+0x14>)
 8001926:	f003 fa17 	bl	8004d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TM_KEYPAD_Update();
 800192a:	f000 fb2f 	bl	8001f8c <TM_KEYPAD_Update>
  /* USER CODE END TIM2_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000320 	.word	0x20000320

08001938 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
	Uart_isr(&huart6);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <USART6_IRQHandler+0x10>)
 800193e:	f7fe fed7 	bl	80006f0 <Uart_isr>
  /* USER CODE END USART6_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200002dc 	.word	0x200002dc

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d207      	bcs.n	800198c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800197c:	f004 fa0c 	bl	8005d98 <__errno>
 8001980:	4603      	mov	r3, r0
 8001982:	220c      	movs	r2, #12
 8001984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e009      	b.n	80019a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20010000 	.word	0x20010000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	20000138 	.word	0x20000138
 80019b4:	20000390 	.word	0x20000390

080019b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <SystemInit+0x20>)
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <SystemInit+0x20>)
 80019c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <ShortDelayUS>:
__STATIC_INLINE void DelayUS(__IO uint32_t micros);

volatile int totalDelay = 0;

void ShortDelayUS(uint32_t Delay)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	DelayUS(Delay);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f805 	bl	80019f4 <DelayUS>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <DelayUS>:

__STATIC_INLINE void DelayUS(__IO uint32_t micros) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

#if !defined(STM32F0xx)
    uint32_t start = DWT->CYCCNT;
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <DelayUS+0x40>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	60fb      	str	r3, [r7, #12]

    /* Go to number of cycles for system */
    micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001a02:	f002 fe85 	bl	8004710 <HAL_RCC_GetHCLKFreq>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <DelayUS+0x44>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0c9b      	lsrs	r3, r3, #18
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - start) < micros);
 8001a18:	bf00      	nop
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <DelayUS+0x40>)
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad2      	subs	r2, r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d3f8      	bcc.n	8001a1a <DelayUS+0x26>
    micros *= (SystemCoreClock / 1000000) / 5;

    /* Wait till done */
    while (micros--);
#endif
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	e0001000 	.word	0xe0001000
 8001a38:	431bde83 	.word	0x431bde83

08001a3c <TM_HD44780_Init>:

void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	460a      	mov	r2, r1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71bb      	strb	r3, [r7, #6]
	/* Initialize delay */
	//TM_DELAY_Init();
	
	/* Init pinout */
	TM_HD44780_InitPins();
 8001a4c:	f000 f99a 	bl	8001d84 <TM_HD44780_InitPins>
	
	/* At least 40ms */
	HD44780_Delay(45000);
 8001a50:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 8001a54:	f7ff ffc2 	bl	80019dc <ShortDelayUS>

	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 8001a58:	4a2a      	ldr	r2, [pc, #168]	; (8001b04 <TM_HD44780_Init+0xc8>)
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	70d3      	strb	r3, [r2, #3]
	HD44780_Opts.Cols = cols;
 8001a5e:	4a29      	ldr	r2, [pc, #164]	; (8001b04 <TM_HD44780_Init+0xc8>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	7113      	strb	r3, [r2, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <TM_HD44780_Init+0xc8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <TM_HD44780_Init+0xc8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	719a      	strb	r2, [r3, #6]
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <TM_HD44780_Init+0xc8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 8001a76:	79bb      	ldrb	r3, [r7, #6]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d906      	bls.n	8001a8a <TM_HD44780_Init+0x4e>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <TM_HD44780_Init+0xc8>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <TM_HD44780_Init+0xc8>)
 8001a88:	705a      	strb	r2, [r3, #1]
	}
	
	/* Try to set 4bit mode */
	TM_HD44780_Cmd4bit(0x03);
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	f000 f8f8 	bl	8001c80 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 8001a90:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a94:	f7ff ffa2 	bl	80019dc <ShortDelayUS>

	/* Second try */
	TM_HD44780_Cmd4bit(0x03);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 f8f1 	bl	8001c80 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 8001a9e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001aa2:	f7ff ff9b 	bl	80019dc <ShortDelayUS>
	
	/* Third goo! */
	TM_HD44780_Cmd4bit(0x03);
 8001aa6:	2003      	movs	r0, #3
 8001aa8:	f000 f8ea 	bl	8001c80 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 8001aac:	f241 1094 	movw	r0, #4500	; 0x1194
 8001ab0:	f7ff ff94 	bl	80019dc <ShortDelayUS>
	
	/* Set 4-bit interface */
	TM_HD44780_Cmd4bit(0x02);
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	f000 f8e3 	bl	8001c80 <TM_HD44780_Cmd4bit>
	HD44780_Delay(100);
 8001aba:	2064      	movs	r0, #100	; 0x64
 8001abc:	f7ff ff8e 	bl	80019dc <ShortDelayUS>
	
	/* Set # lines, font size, etc. */
	TM_HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <TM_HD44780_Init+0xc8>)
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	f043 0320 	orr.w	r3, r3, #32
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f89c 	bl	8001c08 <TM_HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <TM_HD44780_Init+0xc8>)
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	701a      	strb	r2, [r3, #0]
	TM_HD44780_DisplayOn();
 8001ad6:	f000 f881 	bl	8001bdc <TM_HD44780_DisplayOn>

	/* Clear lcd */
	TM_HD44780_Clear();
 8001ada:	f000 f815 	bl	8001b08 <TM_HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <TM_HD44780_Init+0xc8>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	709a      	strb	r2, [r3, #2]
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <TM_HD44780_Init+0xc8>)
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f88a 	bl	8001c08 <TM_HD44780_Cmd>

	/* Delay */
	HD44780_Delay(4500);
 8001af4:	f241 1094 	movw	r0, #4500	; 0x1194
 8001af8:	f7ff ff70 	bl	80019dc <ShortDelayUS>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	2000013c 	.word	0x2000013c

08001b08 <TM_HD44780_Clear>:

void TM_HD44780_Clear(void) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f000 f87b 	bl	8001c08 <TM_HD44780_Cmd>
	HD44780_Delay(3000);
 8001b12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b16:	f7ff ff61 	bl	80019dc <ShortDelayUS>
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <TM_HD44780_Puts>:

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	603a      	str	r2, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	71bb      	strb	r3, [r7, #6]
	TM_HD44780_CursorSet(x, y);
 8001b30:	79ba      	ldrb	r2, [r7, #6]
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f8f4 	bl	8001d24 <TM_HD44780_CursorSet>
	while (*str) {
 8001b3c:	e042      	b.n	8001bc4 <TM_HD44780_Puts+0xa4>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b40:	795a      	ldrb	r2, [r3, #5]
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b44:	791b      	ldrb	r3, [r3, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d310      	bcc.n	8001b6c <TM_HD44780_Puts+0x4c>
			HD44780_Opts.currentX = 0;
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	715a      	strb	r2, [r3, #5]
			HD44780_Opts.currentY++;
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b52:	799b      	ldrb	r3, [r3, #6]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b5a:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b5e:	795b      	ldrb	r3, [r3, #5]
 8001b60:	4a1d      	ldr	r2, [pc, #116]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b62:	7992      	ldrb	r2, [r2, #6]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f8dc 	bl	8001d24 <TM_HD44780_CursorSet>
		}
		if (*str == '\n') {
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b0a      	cmp	r3, #10
 8001b72:	d10e      	bne.n	8001b92 <TM_HD44780_Puts+0x72>
			HD44780_Opts.currentY++;
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b76:	799b      	ldrb	r3, [r3, #6]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b7e:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b82:	795b      	ldrb	r3, [r3, #5]
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b86:	7992      	ldrb	r2, [r2, #6]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f8ca 	bl	8001d24 <TM_HD44780_CursorSet>
 8001b90:	e015      	b.n	8001bbe <TM_HD44780_Puts+0x9e>
		} else if (*str == '\r') {
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b0d      	cmp	r3, #13
 8001b98:	d106      	bne.n	8001ba8 <TM_HD44780_Puts+0x88>
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001b9c:	799b      	ldrb	r3, [r3, #6]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f000 f8bf 	bl	8001d24 <TM_HD44780_CursorSet>
 8001ba6:	e00a      	b.n	8001bbe <TM_HD44780_Puts+0x9e>
		} else {
			TM_HD44780_Data(*str);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 f849 	bl	8001c44 <TM_HD44780_Data>
			HD44780_Opts.currentX++;
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001bb4:	795b      	ldrb	r3, [r3, #5]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <TM_HD44780_Puts+0xb8>)
 8001bbc:	715a      	strb	r2, [r3, #5]
		}
		str++;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1b8      	bne.n	8001b3e <TM_HD44780_Puts+0x1e>
	}
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000013c 	.word	0x2000013c

08001bdc <TM_HD44780_DisplayOn>:

void TM_HD44780_DisplayOn(void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <TM_HD44780_DisplayOn+0x28>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <TM_HD44780_DisplayOn+0x28>)
 8001bec:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <TM_HD44780_DisplayOn+0x28>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f043 0308 	orr.w	r3, r3, #8
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f805 	bl	8001c08 <TM_HD44780_Cmd>
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000013c 	.word	0x2000013c

08001c08 <TM_HD44780_Cmd>:
	TM_HD44780_CursorSet(x, y);
	TM_HD44780_Data(location);
}

/* Private functions */
static void TM_HD44780_Cmd(uint8_t cmd) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
	/* Command mode */
	HD44780_RS_LOW;
 8001c12:	2200      	movs	r2, #0
 8001c14:	2108      	movs	r1, #8
 8001c16:	480a      	ldr	r0, [pc, #40]	; (8001c40 <TM_HD44780_Cmd+0x38>)
 8001c18:	f001 fa30 	bl	800307c <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(cmd >> 4);
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f82c 	bl	8001c80 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f825 	bl	8001c80 <TM_HD44780_Cmd4bit>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020000 	.word	0x40020000

08001c44 <TM_HD44780_Data>:

static void TM_HD44780_Data(uint8_t data) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
	/* Data mode */
	HD44780_RS_HIGH;
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2108      	movs	r1, #8
 8001c52:	480a      	ldr	r0, [pc, #40]	; (8001c7c <TM_HD44780_Data+0x38>)
 8001c54:	f001 fa12 	bl	800307c <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(data >> 4);
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f80e 	bl	8001c80 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 f807 	bl	8001c80 <TM_HD44780_Cmd4bit>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40020000 	.word	0x40020000

08001c80 <TM_HD44780_Cmd4bit>:

static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
	/* Set output port */

	HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin, (cmd & 0x08) != 0);
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	481f      	ldr	r0, [pc, #124]	; (8001d1c <TM_HD44780_Cmd4bit+0x9c>)
 8001ca0:	f001 f9ec 	bl	800307c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_GPIO_Port, HD44780_D6_Pin, (cmd & 0x04) != 0);
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bf14      	ite	ne
 8001cae:	2301      	movne	r3, #1
 8001cb0:	2300      	moveq	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2180      	movs	r1, #128	; 0x80
 8001cb8:	4819      	ldr	r0, [pc, #100]	; (8001d20 <TM_HD44780_Cmd4bit+0xa0>)
 8001cba:	f001 f9df 	bl	800307c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_GPIO_Port, HD44780_D5_Pin, (cmd & 0x02) != 0);
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf14      	ite	ne
 8001cc8:	2301      	movne	r3, #1
 8001cca:	2300      	moveq	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2140      	movs	r1, #64	; 0x40
 8001cd2:	4813      	ldr	r0, [pc, #76]	; (8001d20 <TM_HD44780_Cmd4bit+0xa0>)
 8001cd4:	f001 f9d2 	bl	800307c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_GPIO_Port, HD44780_D4_Pin, (cmd & 0x01) != 0);
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2120      	movs	r1, #32
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <TM_HD44780_Cmd4bit+0xa0>)
 8001cee:	f001 f9c5 	bl	800307c <HAL_GPIO_WritePin>
	HD44780_E_BLINK;
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2110      	movs	r1, #16
 8001cf6:	480a      	ldr	r0, [pc, #40]	; (8001d20 <TM_HD44780_Cmd4bit+0xa0>)
 8001cf8:	f001 f9c0 	bl	800307c <HAL_GPIO_WritePin>
 8001cfc:	2014      	movs	r0, #20
 8001cfe:	f7ff fe6d 	bl	80019dc <ShortDelayUS>
 8001d02:	2200      	movs	r2, #0
 8001d04:	2110      	movs	r1, #16
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <TM_HD44780_Cmd4bit+0xa0>)
 8001d08:	f001 f9b8 	bl	800307c <HAL_GPIO_WritePin>
 8001d0c:	2014      	movs	r0, #20
 8001d0e:	f7ff fe65 	bl	80019dc <ShortDelayUS>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020000 	.word	0x40020000

08001d24 <TM_HD44780_CursorSet>:

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460a      	mov	r2, r1
 8001d2e:	71fb      	strb	r3, [r7, #7]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <TM_HD44780_CursorSet+0x58>)
 8001d36:	60fb      	str	r3, [r7, #12]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <TM_HD44780_CursorSet+0x5c>)
 8001d3a:	78db      	ldrb	r3, [r3, #3]
 8001d3c:	79ba      	ldrb	r2, [r7, #6]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d301      	bcc.n	8001d46 <TM_HD44780_CursorSet+0x22>
		row = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <TM_HD44780_CursorSet+0x5c>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	7153      	strb	r3, [r2, #5]
	HD44780_Opts.currentY = row;
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <TM_HD44780_CursorSet+0x5c>)
 8001d4e:	79bb      	ldrb	r3, [r7, #6]
 8001d50:	7193      	strb	r3, [r2, #6]
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	f107 0210 	add.w	r2, r7, #16
 8001d58:	4413      	add	r3, r2
 8001d5a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	4413      	add	r3, r2
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	b25b      	sxtb	r3, r3
 8001d66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff4a 	bl	8001c08 <TM_HD44780_Cmd>
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	54144000 	.word	0x54144000
 8001d80:	2000013c 	.word	0x2000013c

08001d84 <TM_HD44780_InitPins>:

static void TM_HD44780_InitPins(void) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	/* Init all pins */
	/* Set pins low */
	HAL_GPIO_WritePin(HD44780_RS_GPIO_Port, HD44780_RS_Pin,GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2108      	movs	r1, #8
 8001d8c:	480e      	ldr	r0, [pc, #56]	; (8001dc8 <TM_HD44780_InitPins+0x44>)
 8001d8e:	f001 f975 	bl	800307c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_E_GPIO_Port, HD44780_E_Pin,GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2110      	movs	r1, #16
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <TM_HD44780_InitPins+0x44>)
 8001d98:	f001 f970 	bl	800307c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_GPIO_Port, HD44780_D4_Pin,GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2120      	movs	r1, #32
 8001da0:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <TM_HD44780_InitPins+0x44>)
 8001da2:	f001 f96b 	bl	800307c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_GPIO_Port, HD44780_D5_Pin,GPIO_PIN_RESET);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2140      	movs	r1, #64	; 0x40
 8001daa:	4807      	ldr	r0, [pc, #28]	; (8001dc8 <TM_HD44780_InitPins+0x44>)
 8001dac:	f001 f966 	bl	800307c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_GPIO_Port, HD44780_D6_Pin,GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <TM_HD44780_InitPins+0x44>)
 8001db6:	f001 f961 	bl	800307c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin,GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4803      	ldr	r0, [pc, #12]	; (8001dcc <TM_HD44780_InitPins+0x48>)
 8001dc0:	f001 f95c 	bl	800307c <HAL_GPIO_WritePin>
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400

08001dd0 <TM_KEYPAD_Init>:
TM_KEYPAD_Type_t TM_KEYPAD_INT_KeypadType;
static TM_KEYPAD_Button_t KeypadStatus = TM_KEYPAD_Button_NOPRESSED;
static TM_KEYPAD_Button_t KeyCode = TM_KEYPAD_Button_NOPRESSED;


void TM_KEYPAD_Init() {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	
	TM_KEYPAD_INT_SetColumn(0);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f000 f815 	bl	8001e04 <TM_KEYPAD_INT_SetColumn>
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <TM_KEYPAD_Read>:

char TM_KEYPAD_GetChar(TM_KEYPAD_Button_t key){
	return KEYPAD_INT_Chars[key];
}

TM_KEYPAD_Button_t TM_KEYPAD_Read(void) {
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
	TM_KEYPAD_Button_t temp;

	/* Get keypad status */
	temp = KeypadStatus;
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <TM_KEYPAD_Read+0x20>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]

	/* Reset keypad status */
	KeypadStatus = TM_KEYPAD_Button_NOPRESSED;
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <TM_KEYPAD_Read+0x20>)
 8001dee:	22ff      	movs	r2, #255	; 0xff
 8001df0:	701a      	strb	r2, [r3, #0]

	return temp;
 8001df2:	79fb      	ldrb	r3, [r7, #7]

}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	20000018 	.word	0x20000018

08001e04 <TM_KEYPAD_INT_SetColumn>:

/* Private */
void TM_KEYPAD_INT_SetColumn(uint8_t column) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_COLUMN_1_HIGH;
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2110      	movs	r1, #16
 8001e12:	481b      	ldr	r0, [pc, #108]	; (8001e80 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e14:	f001 f932 	bl	800307c <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_2_HIGH;
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	4818      	ldr	r0, [pc, #96]	; (8001e80 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e1e:	f001 f92d 	bl	800307c <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_3_HIGH;
 8001e22:	2201      	movs	r2, #1
 8001e24:	2140      	movs	r1, #64	; 0x40
 8001e26:	4816      	ldr	r0, [pc, #88]	; (8001e80 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e28:	f001 f928 	bl	800307c <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_4_HIGH;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2180      	movs	r1, #128	; 0x80
 8001e30:	4813      	ldr	r0, [pc, #76]	; (8001e80 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e32:	f001 f923 	bl	800307c <HAL_GPIO_WritePin>

	/* Set column low */
	if (column == 1) {
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d104      	bne.n	8001e46 <TM_KEYPAD_INT_SetColumn+0x42>
		KEYPAD_COLUMN_1_LOW;
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2110      	movs	r1, #16
 8001e40:	480f      	ldr	r0, [pc, #60]	; (8001e80 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e42:	f001 f91b 	bl	800307c <HAL_GPIO_WritePin>
	}
	if (column == 2) {
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d104      	bne.n	8001e56 <TM_KEYPAD_INT_SetColumn+0x52>
		KEYPAD_COLUMN_2_LOW;
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2120      	movs	r1, #32
 8001e50:	480b      	ldr	r0, [pc, #44]	; (8001e80 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e52:	f001 f913 	bl	800307c <HAL_GPIO_WritePin>
	}
	if (column == 3) {
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d104      	bne.n	8001e66 <TM_KEYPAD_INT_SetColumn+0x62>
		KEYPAD_COLUMN_3_LOW;
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2140      	movs	r1, #64	; 0x40
 8001e60:	4807      	ldr	r0, [pc, #28]	; (8001e80 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e62:	f001 f90b 	bl	800307c <HAL_GPIO_WritePin>
	}
	if (column == 4) {
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d104      	bne.n	8001e76 <TM_KEYPAD_INT_SetColumn+0x72>
		KEYPAD_COLUMN_4_LOW;
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e72:	f001 f903 	bl	800307c <HAL_GPIO_WritePin>
	}
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40020400 	.word	0x40020400

08001e84 <TM_KEYPAD_INT_CheckRow>:



uint8_t TM_KEYPAD_INT_CheckRow(uint8_t column) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
	/* Read rows */
	
	/* Scan row 1 */
	if (KEYPAD_ROW_1_CHECK) {
 8001e8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e92:	481d      	ldr	r0, [pc, #116]	; (8001f08 <TM_KEYPAD_INT_CheckRow+0x84>)
 8001e94:	f001 f8da 	bl	800304c <HAL_GPIO_ReadPin>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d104      	bne.n	8001ea8 <TM_KEYPAD_INT_CheckRow+0x24>
		return KEYPAD_INT_Buttons[0][column - 1];	
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <TM_KEYPAD_INT_CheckRow+0x88>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	e02a      	b.n	8001efe <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 2 */
	if (KEYPAD_ROW_2_CHECK) {
 8001ea8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eac:	4818      	ldr	r0, [pc, #96]	; (8001f10 <TM_KEYPAD_INT_CheckRow+0x8c>)
 8001eae:	f001 f8cd 	bl	800304c <HAL_GPIO_ReadPin>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d105      	bne.n	8001ec4 <TM_KEYPAD_INT_CheckRow+0x40>
		return KEYPAD_INT_Buttons[1][column - 1];
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <TM_KEYPAD_INT_CheckRow+0x88>)
 8001ebe:	4413      	add	r3, r2
 8001ec0:	791b      	ldrb	r3, [r3, #4]
 8001ec2:	e01c      	b.n	8001efe <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 3 */
	if (KEYPAD_ROW_3_CHECK) {
 8001ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec8:	4811      	ldr	r0, [pc, #68]	; (8001f10 <TM_KEYPAD_INT_CheckRow+0x8c>)
 8001eca:	f001 f8bf 	bl	800304c <HAL_GPIO_ReadPin>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <TM_KEYPAD_INT_CheckRow+0x5c>
		return KEYPAD_INT_Buttons[2][column - 1];
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <TM_KEYPAD_INT_CheckRow+0x88>)
 8001eda:	4413      	add	r3, r2
 8001edc:	7a1b      	ldrb	r3, [r3, #8]
 8001ede:	e00e      	b.n	8001efe <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 4 */
	if (KEYPAD_ROW_4_CHECK) {
 8001ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee4:	480a      	ldr	r0, [pc, #40]	; (8001f10 <TM_KEYPAD_INT_CheckRow+0x8c>)
 8001ee6:	f001 f8b1 	bl	800304c <HAL_GPIO_ReadPin>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <TM_KEYPAD_INT_CheckRow+0x78>
		return KEYPAD_INT_Buttons[3][column - 1];
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <TM_KEYPAD_INT_CheckRow+0x88>)
 8001ef6:	4413      	add	r3, r2
 8001ef8:	7b1b      	ldrb	r3, [r3, #12]
 8001efa:	e000      	b.n	8001efe <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	
	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 8001efc:	23ff      	movs	r3, #255	; 0xff
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	40020400 	.word	0x40020400

08001f14 <TM_KEYPAD_INT_Read>:


uint8_t TM_KEYPAD_INT_Read(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	TM_KEYPAD_INT_SetColumn(1);
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f7ff ff72 	bl	8001e04 <TM_KEYPAD_INT_SetColumn>
	/* Check rows */
	check = TM_KEYPAD_INT_CheckRow(1);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f7ff ffaf 	bl	8001e84 <TM_KEYPAD_INT_CheckRow>
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2bff      	cmp	r3, #255	; 0xff
 8001f2e:	d001      	beq.n	8001f34 <TM_KEYPAD_INT_Read+0x20>
		return check;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	e027      	b.n	8001f84 <TM_KEYPAD_INT_Read+0x70>
	}
	
	/* Set row 2 to LOW */
	TM_KEYPAD_INT_SetColumn(2);
 8001f34:	2002      	movs	r0, #2
 8001f36:	f7ff ff65 	bl	8001e04 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(2);
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	f7ff ffa2 	bl	8001e84 <TM_KEYPAD_INT_CheckRow>
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d001      	beq.n	8001f4e <TM_KEYPAD_INT_Read+0x3a>
		return check;
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	e01a      	b.n	8001f84 <TM_KEYPAD_INT_Read+0x70>
	}
	
	/* Set row 3 to LOW */
	TM_KEYPAD_INT_SetColumn(3);
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f7ff ff58 	bl	8001e04 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(3);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f7ff ff95 	bl	8001e84 <TM_KEYPAD_INT_CheckRow>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2bff      	cmp	r3, #255	; 0xff
 8001f62:	d001      	beq.n	8001f68 <TM_KEYPAD_INT_Read+0x54>
		return check;
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	e00d      	b.n	8001f84 <TM_KEYPAD_INT_Read+0x70>
	}


	/* Set column 4 to LOW */
	TM_KEYPAD_INT_SetColumn(4);
 8001f68:	2004      	movs	r0, #4
 8001f6a:	f7ff ff4b 	bl	8001e04 <TM_KEYPAD_INT_SetColumn>
	/* Check rows */
	check = TM_KEYPAD_INT_CheckRow(4);
 8001f6e:	2004      	movs	r0, #4
 8001f70:	f7ff ff88 	bl	8001e84 <TM_KEYPAD_INT_CheckRow>
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	2bff      	cmp	r3, #255	; 0xff
 8001f7c:	d001      	beq.n	8001f82 <TM_KEYPAD_INT_Read+0x6e>
		return check;
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	e000      	b.n	8001f84 <TM_KEYPAD_INT_Read+0x70>
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 8001f82:	23ff      	movs	r3, #255	; 0xff
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <TM_KEYPAD_Update>:


void TM_KEYPAD_Update(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;

	/* Every X ms read */
	if (++millis >= KEYPAD_READ_INTERVAL && KeypadStatus == TM_KEYPAD_Button_NOPRESSED) {
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <TM_KEYPAD_Update+0x38>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <TM_KEYPAD_Update+0x38>)
 8001f9a:	801a      	strh	r2, [r3, #0]
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <TM_KEYPAD_Update+0x38>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	2bc7      	cmp	r3, #199	; 0xc7
 8001fa2:	d90c      	bls.n	8001fbe <TM_KEYPAD_Update+0x32>
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <TM_KEYPAD_Update+0x3c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2bff      	cmp	r3, #255	; 0xff
 8001faa:	d108      	bne.n	8001fbe <TM_KEYPAD_Update+0x32>
		/* Reset */
		millis = 0;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <TM_KEYPAD_Update+0x38>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	801a      	strh	r2, [r3, #0]

		/* Read keyboard */
		KeypadStatus = (TM_KEYPAD_Button_t) TM_KEYPAD_INT_Read();
 8001fb2:	f7ff ffaf 	bl	8001f14 <TM_KEYPAD_INT_Read>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <TM_KEYPAD_Update+0x3c>)
 8001fbc:	701a      	strb	r2, [r3, #0]
	}
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000144 	.word	0x20000144
 8001fc8:	20000018 	.word	0x20000018

08001fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fe8:	4c0b      	ldr	r4, [pc, #44]	; (8002018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ff6:	f7ff fcdf 	bl	80019b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f003 fed3 	bl	8005da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffe:	f7fe fd15 	bl	8000a2c <main>
  bx  lr    
 8002002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002004:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002010:	08006700 	.word	0x08006700
  ldr r2, =_sbss
 8002014:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002018:	20000390 	.word	0x20000390

0800201c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC_IRQHandler>
	...

08002020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_Init+0x40>)
 800202a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_Init+0x40>)
 8002036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_Init+0x40>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_Init+0x40>)
 8002042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002048:	2003      	movs	r0, #3
 800204a:	f000 fcd9 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204e:	2000      	movs	r0, #0
 8002050:	f000 f808 	bl	8002064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002054:	f7ff fa5c 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_InitTick+0x54>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x58>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fcf1 	bl	8002a6a <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d80a      	bhi.n	80020ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f000 fcb9 	bl	8002a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <HAL_InitTick+0x5c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000004 	.word	0x20000004
 80020bc:	20000020 	.word	0x20000020
 80020c0:	2000001c 	.word	0x2000001c

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000020 	.word	0x20000020
 80020e8:	2000037c 	.word	0x2000037c

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	2000037c 	.word	0x2000037c

08002104 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e033      	b.n	8002182 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fa1c 	bl	8001560 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800214a:	f023 0302 	bic.w	r3, r3, #2
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fa86 	bl	8002668 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
 8002172:	e001      	b.n	8002178 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_Start+0x1a>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e097      	b.n	80022d6 <HAL_ADC_Start+0x14a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d018      	beq.n	80021ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021cc:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <HAL_ADC_Start+0x158>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a45      	ldr	r2, [pc, #276]	; (80022e8 <HAL_ADC_Start+0x15c>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0c9a      	lsrs	r2, r3, #18
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f9      	bne.n	80021e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d15f      	bne.n	80022bc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002226:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223a:	d106      	bne.n	800224a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	f023 0206 	bic.w	r2, r3, #6
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
 8002248:	e002      	b.n	8002250 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_ADC_Start+0x160>)
 800225a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002264:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10f      	bne.n	8002292 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d129      	bne.n	80022d4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e020      	b.n	80022d4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <HAL_ADC_Start+0x164>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d11b      	bne.n	80022d4 <HAL_ADC_Start+0x148>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d114      	bne.n	80022d4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	e00b      	b.n	80022d4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f043 0210 	orr.w	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000004 	.word	0x20000004
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	40012300 	.word	0x40012300
 80022f0:	40012000 	.word	0x40012000

080022f4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002310:	d113      	bne.n	800233a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800231c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002320:	d10b      	bne.n	800233a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e063      	b.n	8002402 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800233a:	f7ff fed7 	bl	80020ec <HAL_GetTick>
 800233e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002340:	e021      	b.n	8002386 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d01d      	beq.n	8002386 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_ADC_PollForConversion+0x6c>
 8002350:	f7ff fecc 	bl	80020ec <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d212      	bcs.n	8002386 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d00b      	beq.n	8002386 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f043 0204 	orr.w	r2, r3, #4
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e03d      	b.n	8002402 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b02      	cmp	r3, #2
 8002392:	d1d6      	bne.n	8002342 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0212 	mvn.w	r2, #18
 800239c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d123      	bne.n	8002400 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11f      	bne.n	8002400 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x1c>
 800243c:	2302      	movs	r3, #2
 800243e:	e105      	b.n	800264c <HAL_ADC_ConfigChannel+0x228>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b09      	cmp	r3, #9
 800244e:	d925      	bls.n	800249c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68d9      	ldr	r1, [r3, #12]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	3b1e      	subs	r3, #30
 8002466:	2207      	movs	r2, #7
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43da      	mvns	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	400a      	ands	r2, r1
 8002474:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68d9      	ldr	r1, [r3, #12]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	4603      	mov	r3, r0
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4403      	add	r3, r0
 800248e:	3b1e      	subs	r3, #30
 8002490:	409a      	lsls	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	e022      	b.n	80024e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6919      	ldr	r1, [r3, #16]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	2207      	movs	r2, #7
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	400a      	ands	r2, r1
 80024be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6919      	ldr	r1, [r3, #16]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4403      	add	r3, r0
 80024d8:	409a      	lsls	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d824      	bhi.n	8002534 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b05      	subs	r3, #5
 80024fc:	221f      	movs	r2, #31
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	400a      	ands	r2, r1
 800250a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	3b05      	subs	r3, #5
 8002526:	fa00 f203 	lsl.w	r2, r0, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	635a      	str	r2, [r3, #52]	; 0x34
 8002532:	e04c      	b.n	80025ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b0c      	cmp	r3, #12
 800253a:	d824      	bhi.n	8002586 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	3b23      	subs	r3, #35	; 0x23
 800254e:	221f      	movs	r2, #31
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43da      	mvns	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	400a      	ands	r2, r1
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	4618      	mov	r0, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	3b23      	subs	r3, #35	; 0x23
 8002578:	fa00 f203 	lsl.w	r2, r0, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
 8002584:	e023      	b.n	80025ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	3b41      	subs	r3, #65	; 0x41
 8002598:	221f      	movs	r2, #31
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	400a      	ands	r2, r1
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	4618      	mov	r0, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	3b41      	subs	r3, #65	; 0x41
 80025c2:	fa00 f203 	lsl.w	r2, r0, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_ADC_ConfigChannel+0x234>)
 80025d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a21      	ldr	r2, [pc, #132]	; (800265c <HAL_ADC_ConfigChannel+0x238>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d109      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1cc>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b12      	cmp	r3, #18
 80025e2:	d105      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_ADC_ConfigChannel+0x238>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d123      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x21e>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d003      	beq.n	800260a <HAL_ADC_ConfigChannel+0x1e6>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b11      	cmp	r3, #17
 8002608:	d11b      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b10      	cmp	r3, #16
 800261c:	d111      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_ADC_ConfigChannel+0x23c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_ADC_ConfigChannel+0x240>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	0c9a      	lsrs	r2, r3, #18
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002634:	e002      	b.n	800263c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	3b01      	subs	r3, #1
 800263a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f9      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40012300 	.word	0x40012300
 800265c:	40012000 	.word	0x40012000
 8002660:	20000004 	.word	0x20000004
 8002664:	431bde83 	.word	0x431bde83

08002668 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002670:	4b79      	ldr	r3, [pc, #484]	; (8002858 <ADC_Init+0x1f0>)
 8002672:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	431a      	orrs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800269c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	021a      	lsls	r2, r3, #8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6899      	ldr	r1, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	4a58      	ldr	r2, [pc, #352]	; (800285c <ADC_Init+0x1f4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d022      	beq.n	8002746 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800270e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6899      	ldr	r1, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6899      	ldr	r1, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	e00f      	b.n	8002766 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002764:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0202 	bic.w	r2, r2, #2
 8002774:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6899      	ldr	r1, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7e1b      	ldrb	r3, [r3, #24]
 8002780:	005a      	lsls	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01b      	beq.n	80027cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	3b01      	subs	r3, #1
 80027c0:	035a      	lsls	r2, r3, #13
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	e007      	b.n	80027dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	051a      	lsls	r2, r3, #20
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6899      	ldr	r1, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800281e:	025a      	lsls	r2, r3, #9
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002836:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6899      	ldr	r1, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	029a      	lsls	r2, r3, #10
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	609a      	str	r2, [r3, #8]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40012300 	.word	0x40012300
 800285c:	0f000001 	.word	0x0f000001

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	; (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	; (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	; (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029cc:	d301      	bcc.n	80029d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00f      	b.n	80029f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <SysTick_Config+0x40>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029da:	210f      	movs	r1, #15
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f7ff ff8e 	bl	8002900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <SysTick_Config+0x40>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <SysTick_Config+0x40>)
 80029ec:	2207      	movs	r2, #7
 80029ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	e000e010 	.word	0xe000e010

08002a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff29 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a28:	f7ff ff3e 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff8e 	bl	8002954 <NVIC_EncodePriority>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff5d 	bl	8002900 <__NVIC_SetPriority>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff31 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa2 	bl	80029bc <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a90:	f7ff fb2c 	bl	80020ec <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e099      	b.n	8002bd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac0:	e00f      	b.n	8002ae2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ac2:	f7ff fb13 	bl	80020ec <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d908      	bls.n	8002ae2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2203      	movs	r2, #3
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e078      	b.n	8002bd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e8      	bne.n	8002ac2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4b38      	ldr	r3, [pc, #224]	; (8002bdc <HAL_DMA_Init+0x158>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d107      	bne.n	8002b4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	4313      	orrs	r3, r2
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f023 0307 	bic.w	r3, r3, #7
 8002b62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d117      	bne.n	8002ba6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00e      	beq.n	8002ba6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f85f 	bl	8002c4c <DMA_CheckFifoParam>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e016      	b.n	8002bd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f816 	bl	8002be0 <DMA_CalcBaseAndBitshift>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	223f      	movs	r2, #63	; 0x3f
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	f010803f 	.word	0xf010803f

08002be0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3b10      	subs	r3, #16
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <DMA_CalcBaseAndBitshift+0x64>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bfa:	4a13      	ldr	r2, [pc, #76]	; (8002c48 <DMA_CalcBaseAndBitshift+0x68>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d909      	bls.n	8002c22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	1d1a      	adds	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c20:	e007      	b.n	8002c32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c2a:	f023 0303 	bic.w	r3, r3, #3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	aaaaaaab 	.word	0xaaaaaaab
 8002c48:	080066b4 	.word	0x080066b4

08002c4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11f      	bne.n	8002ca6 <DMA_CheckFifoParam+0x5a>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d856      	bhi.n	8002d1a <DMA_CheckFifoParam+0xce>
 8002c6c:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <DMA_CheckFifoParam+0x28>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c97 	.word	0x08002c97
 8002c7c:	08002c85 	.word	0x08002c85
 8002c80:	08002d1b 	.word	0x08002d1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d046      	beq.n	8002d1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c94:	e043      	b.n	8002d1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c9e:	d140      	bne.n	8002d22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca4:	e03d      	b.n	8002d22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cae:	d121      	bne.n	8002cf4 <DMA_CheckFifoParam+0xa8>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d837      	bhi.n	8002d26 <DMA_CheckFifoParam+0xda>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <DMA_CheckFifoParam+0x70>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cd3 	.word	0x08002cd3
 8002cc4:	08002ccd 	.word	0x08002ccd
 8002cc8:	08002ce5 	.word	0x08002ce5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	e030      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d025      	beq.n	8002d2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce2:	e022      	b.n	8002d2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cec:	d11f      	bne.n	8002d2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cf2:	e01c      	b.n	8002d2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d903      	bls.n	8002d02 <DMA_CheckFifoParam+0xb6>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d003      	beq.n	8002d08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d00:	e018      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      break;
 8002d06:	e015      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      break;
 8002d18:	e00b      	b.n	8002d32 <DMA_CheckFifoParam+0xe6>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e00a      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e008      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e006      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
 8002d28:	e004      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e002      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d32:	bf00      	nop
    }
  } 
  
  return status; 
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	e159      	b.n	8003014 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d60:	2201      	movs	r2, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f040 8148 	bne.w	800300e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d005      	beq.n	8002d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d130      	bne.n	8002df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dcc:	2201      	movs	r2, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 0201 	and.w	r2, r3, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d017      	beq.n	8002e34 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d123      	bne.n	8002e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	08da      	lsrs	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3208      	adds	r2, #8
 8002e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	220f      	movs	r2, #15
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	08da      	lsrs	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3208      	adds	r2, #8
 8002e82:	69b9      	ldr	r1, [r7, #24]
 8002e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0203 	and.w	r2, r3, #3
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a2 	beq.w	800300e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b57      	ldr	r3, [pc, #348]	; (800302c <HAL_GPIO_Init+0x2e8>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4a56      	ldr	r2, [pc, #344]	; (800302c <HAL_GPIO_Init+0x2e8>)
 8002ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eda:	4b54      	ldr	r3, [pc, #336]	; (800302c <HAL_GPIO_Init+0x2e8>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ee6:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_GPIO_Init+0x2ec>)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	3302      	adds	r3, #2
 8002eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	220f      	movs	r2, #15
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a49      	ldr	r2, [pc, #292]	; (8003034 <HAL_GPIO_Init+0x2f0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d019      	beq.n	8002f46 <HAL_GPIO_Init+0x202>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a48      	ldr	r2, [pc, #288]	; (8003038 <HAL_GPIO_Init+0x2f4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0x1fe>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a47      	ldr	r2, [pc, #284]	; (800303c <HAL_GPIO_Init+0x2f8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00d      	beq.n	8002f3e <HAL_GPIO_Init+0x1fa>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a46      	ldr	r2, [pc, #280]	; (8003040 <HAL_GPIO_Init+0x2fc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <HAL_GPIO_Init+0x1f6>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a45      	ldr	r2, [pc, #276]	; (8003044 <HAL_GPIO_Init+0x300>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <HAL_GPIO_Init+0x1f2>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e008      	b.n	8002f48 <HAL_GPIO_Init+0x204>
 8002f36:	2307      	movs	r3, #7
 8002f38:	e006      	b.n	8002f48 <HAL_GPIO_Init+0x204>
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e004      	b.n	8002f48 <HAL_GPIO_Init+0x204>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_Init+0x204>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_GPIO_Init+0x204>
 8002f46:	2300      	movs	r3, #0
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	f002 0203 	and.w	r2, r2, #3
 8002f4e:	0092      	lsls	r2, r2, #2
 8002f50:	4093      	lsls	r3, r2
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f58:	4935      	ldr	r1, [pc, #212]	; (8003030 <HAL_GPIO_Init+0x2ec>)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	3302      	adds	r3, #2
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f66:	4b38      	ldr	r3, [pc, #224]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f8a:	4a2f      	ldr	r2, [pc, #188]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f90:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb4:	4a24      	ldr	r2, [pc, #144]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fba:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fde:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003008:	4a0f      	ldr	r2, [pc, #60]	; (8003048 <HAL_GPIO_Init+0x304>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3301      	adds	r3, #1
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b0f      	cmp	r3, #15
 8003018:	f67f aea2 	bls.w	8002d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	40013800 	.word	0x40013800
 8003034:	40020000 	.word	0x40020000
 8003038:	40020400 	.word	0x40020400
 800303c:	40020800 	.word	0x40020800
 8003040:	40020c00 	.word	0x40020c00
 8003044:	40021000 	.word	0x40021000
 8003048:	40013c00 	.word	0x40013c00

0800304c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e001      	b.n	800306e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003098:	e003      	b.n	80030a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	619a      	str	r2, [r3, #24]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e12b      	b.n	800331a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe fa86 	bl	80015e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2224      	movs	r2, #36	; 0x24
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003102:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003112:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003114:	f001 fb08 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8003118:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a81      	ldr	r2, [pc, #516]	; (8003324 <HAL_I2C_Init+0x274>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d807      	bhi.n	8003134 <HAL_I2C_Init+0x84>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a80      	ldr	r2, [pc, #512]	; (8003328 <HAL_I2C_Init+0x278>)
 8003128:	4293      	cmp	r3, r2
 800312a:	bf94      	ite	ls
 800312c:	2301      	movls	r3, #1
 800312e:	2300      	movhi	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e006      	b.n	8003142 <HAL_I2C_Init+0x92>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a7d      	ldr	r2, [pc, #500]	; (800332c <HAL_I2C_Init+0x27c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	bf94      	ite	ls
 800313c:	2301      	movls	r3, #1
 800313e:	2300      	movhi	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e0e7      	b.n	800331a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4a78      	ldr	r2, [pc, #480]	; (8003330 <HAL_I2C_Init+0x280>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	0c9b      	lsrs	r3, r3, #18
 8003154:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4a6a      	ldr	r2, [pc, #424]	; (8003324 <HAL_I2C_Init+0x274>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d802      	bhi.n	8003184 <HAL_I2C_Init+0xd4>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	3301      	adds	r3, #1
 8003182:	e009      	b.n	8003198 <HAL_I2C_Init+0xe8>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	4a69      	ldr	r2, [pc, #420]	; (8003334 <HAL_I2C_Init+0x284>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	3301      	adds	r3, #1
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	430b      	orrs	r3, r1
 800319e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	495c      	ldr	r1, [pc, #368]	; (8003324 <HAL_I2C_Init+0x274>)
 80031b4:	428b      	cmp	r3, r1
 80031b6:	d819      	bhi.n	80031ec <HAL_I2C_Init+0x13c>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e59      	subs	r1, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c6:	1c59      	adds	r1, r3, #1
 80031c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031cc:	400b      	ands	r3, r1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_I2C_Init+0x138>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1e59      	subs	r1, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e6:	e051      	b.n	800328c <HAL_I2C_Init+0x1dc>
 80031e8:	2304      	movs	r3, #4
 80031ea:	e04f      	b.n	800328c <HAL_I2C_Init+0x1dc>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d111      	bne.n	8003218 <HAL_I2C_Init+0x168>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1e58      	subs	r0, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	440b      	add	r3, r1
 8003202:	fbb0 f3f3 	udiv	r3, r0, r3
 8003206:	3301      	adds	r3, #1
 8003208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e012      	b.n	800323e <HAL_I2C_Init+0x18e>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e58      	subs	r0, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	0099      	lsls	r1, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	fbb0 f3f3 	udiv	r3, r0, r3
 800322e:	3301      	adds	r3, #1
 8003230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_I2C_Init+0x196>
 8003242:	2301      	movs	r3, #1
 8003244:	e022      	b.n	800328c <HAL_I2C_Init+0x1dc>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10e      	bne.n	800326c <HAL_I2C_Init+0x1bc>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1e58      	subs	r0, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	440b      	add	r3, r1
 800325c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003260:	3301      	adds	r3, #1
 8003262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326a:	e00f      	b.n	800328c <HAL_I2C_Init+0x1dc>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1e58      	subs	r0, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6859      	ldr	r1, [r3, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	0099      	lsls	r1, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003282:	3301      	adds	r3, #1
 8003284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	6809      	ldr	r1, [r1, #0]
 8003290:	4313      	orrs	r3, r2
 8003292:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6911      	ldr	r1, [r2, #16]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68d2      	ldr	r2, [r2, #12]
 80032c6:	4311      	orrs	r1, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	000186a0 	.word	0x000186a0
 8003328:	001e847f 	.word	0x001e847f
 800332c:	003d08ff 	.word	0x003d08ff
 8003330:	431bde83 	.word	0x431bde83
 8003334:	10624dd3 	.word	0x10624dd3

08003338 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08c      	sub	sp, #48	; 0x30
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	461a      	mov	r2, r3
 8003346:	4603      	mov	r3, r0
 8003348:	817b      	strh	r3, [r7, #10]
 800334a:	460b      	mov	r3, r1
 800334c:	813b      	strh	r3, [r7, #8]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003352:	f7fe fecb 	bl	80020ec <HAL_GetTick>
 8003356:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b20      	cmp	r3, #32
 8003362:	f040 8208 	bne.w	8003776 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2319      	movs	r3, #25
 800336c:	2201      	movs	r2, #1
 800336e:	497b      	ldr	r1, [pc, #492]	; (800355c <HAL_I2C_Mem_Read+0x224>)
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fc1d 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800337c:	2302      	movs	r3, #2
 800337e:	e1fb      	b.n	8003778 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_I2C_Mem_Read+0x56>
 800338a:	2302      	movs	r3, #2
 800338c:	e1f4      	b.n	8003778 <HAL_I2C_Mem_Read+0x440>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d007      	beq.n	80033b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2222      	movs	r2, #34	; 0x22
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2240      	movs	r2, #64	; 0x40
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80033e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4a5b      	ldr	r2, [pc, #364]	; (8003560 <HAL_I2C_Mem_Read+0x228>)
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033f6:	88f8      	ldrh	r0, [r7, #6]
 80033f8:	893a      	ldrh	r2, [r7, #8]
 80033fa:	8979      	ldrh	r1, [r7, #10]
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	4603      	mov	r3, r0
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 faea 	bl	80039e0 <I2C_RequestMemoryRead>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1b0      	b.n	8003778 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	d113      	bne.n	8003446 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	623b      	str	r3, [r7, #32]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e184      	b.n	8003750 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	2b01      	cmp	r3, #1
 800344c:	d11b      	bne.n	8003486 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e164      	b.n	8003750 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	2b02      	cmp	r3, #2
 800348c:	d11b      	bne.n	80034c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	e144      	b.n	8003750 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034dc:	e138      	b.n	8003750 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	f200 80f1 	bhi.w	80036ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d123      	bne.n	8003538 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fc72 	bl	8003dde <I2C_WaitOnRXNEFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e139      	b.n	8003778 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003536:	e10b      	b.n	8003750 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	2b02      	cmp	r3, #2
 800353e:	d14e      	bne.n	80035de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003546:	2200      	movs	r2, #0
 8003548:	4906      	ldr	r1, [pc, #24]	; (8003564 <HAL_I2C_Mem_Read+0x22c>)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fb30 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e10e      	b.n	8003778 <HAL_I2C_Mem_Read+0x440>
 800355a:	bf00      	nop
 800355c:	00100002 	.word	0x00100002
 8003560:	ffff0000 	.word	0xffff0000
 8003564:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035dc:	e0b8      	b.n	8003750 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	2200      	movs	r2, #0
 80035e6:	4966      	ldr	r1, [pc, #408]	; (8003780 <HAL_I2C_Mem_Read+0x448>)
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fae1 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0bf      	b.n	8003778 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	2200      	movs	r2, #0
 8003642:	494f      	ldr	r1, [pc, #316]	; (8003780 <HAL_I2C_Mem_Read+0x448>)
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fab3 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e091      	b.n	8003778 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003662:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036c8:	e042      	b.n	8003750 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fb85 	bl	8003dde <I2C_WaitOnRXNEFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e04c      	b.n	8003778 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d118      	bne.n	8003750 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	2b00      	cmp	r3, #0
 8003756:	f47f aec2 	bne.w	80034de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e000      	b.n	8003778 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
  }
}
 8003778:	4618      	mov	r0, r3
 800377a:	3728      	adds	r7, #40	; 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	00010004 	.word	0x00010004

08003784 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	460b      	mov	r3, r1
 8003792:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003794:	f7fe fcaa 	bl	80020ec <HAL_GetTick>
 8003798:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800379a:	2301      	movs	r3, #1
 800379c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	f040 8111 	bne.w	80039ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2319      	movs	r3, #25
 80037b2:	2201      	movs	r2, #1
 80037b4:	4988      	ldr	r1, [pc, #544]	; (80039d8 <HAL_I2C_IsDeviceReady+0x254>)
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f9fa 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
 80037c4:	e104      	b.n	80039d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_I2C_IsDeviceReady+0x50>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e0fd      	b.n	80039d0 <HAL_I2C_IsDeviceReady+0x24c>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d007      	beq.n	80037fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003808:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2224      	movs	r2, #36	; 0x24
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a70      	ldr	r2, [pc, #448]	; (80039dc <HAL_I2C_IsDeviceReady+0x258>)
 800381c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800382c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2200      	movs	r2, #0
 8003836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f9b8 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003854:	d103      	bne.n	800385e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0b6      	b.n	80039d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003870:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003872:	f7fe fc3b 	bl	80020ec <HAL_GetTick>
 8003876:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b02      	cmp	r3, #2
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038a6:	e025      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038a8:	f7fe fc20 	bl	80020ec <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <HAL_I2C_IsDeviceReady+0x13a>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	22a0      	movs	r2, #160	; 0xa0
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2ba0      	cmp	r3, #160	; 0xa0
 80038fe:	d005      	beq.n	800390c <HAL_I2C_IsDeviceReady+0x188>
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <HAL_I2C_IsDeviceReady+0x188>
 8003906:	7dbb      	ldrb	r3, [r7, #22]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0cd      	beq.n	80038a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d129      	bne.n	8003976 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003930:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2319      	movs	r3, #25
 800394e:	2201      	movs	r2, #1
 8003950:	4921      	ldr	r1, [pc, #132]	; (80039d8 <HAL_I2C_IsDeviceReady+0x254>)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f92c 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e036      	b.n	80039d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e02c      	b.n	80039d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003984:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800398e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	2319      	movs	r3, #25
 8003996:	2201      	movs	r2, #1
 8003998:	490f      	ldr	r1, [pc, #60]	; (80039d8 <HAL_I2C_IsDeviceReady+0x254>)
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f908 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e012      	b.n	80039d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	3301      	adds	r3, #1
 80039ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	f4ff af32 	bcc.w	800381e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80039ce:	2302      	movs	r3, #2
  }
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	00100002 	.word	0x00100002
 80039dc:	ffff0000 	.word	0xffff0000

080039e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	4608      	mov	r0, r1
 80039ea:	4611      	mov	r1, r2
 80039ec:	461a      	mov	r2, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	817b      	strh	r3, [r7, #10]
 80039f2:	460b      	mov	r3, r1
 80039f4:	813b      	strh	r3, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f8c2 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00d      	beq.n	8003a4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a40:	d103      	bne.n	8003a4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0aa      	b.n	8003ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a4e:	897b      	ldrh	r3, [r7, #10]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	4952      	ldr	r1, [pc, #328]	; (8003bac <I2C_RequestMemoryRead+0x1cc>)
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f8fa 	bl	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e097      	b.n	8003ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8c:	6a39      	ldr	r1, [r7, #32]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f964 	bl	8003d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d107      	bne.n	8003ab2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e076      	b.n	8003ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d105      	bne.n	8003ac8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003abc:	893b      	ldrh	r3, [r7, #8]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	611a      	str	r2, [r3, #16]
 8003ac6:	e021      	b.n	8003b0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ac8:	893b      	ldrh	r3, [r7, #8]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	6a39      	ldr	r1, [r7, #32]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f93e 	bl	8003d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d107      	bne.n	8003afe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e050      	b.n	8003ba4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b02:	893b      	ldrh	r3, [r7, #8]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0e:	6a39      	ldr	r1, [r7, #32]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f923 	bl	8003d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d107      	bne.n	8003b34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e035      	b.n	8003ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f82b 	bl	8003bb0 <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00d      	beq.n	8003b7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6e:	d103      	bne.n	8003b78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e013      	b.n	8003ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b7c:	897b      	ldrh	r3, [r7, #10]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	6a3a      	ldr	r2, [r7, #32]
 8003b90:	4906      	ldr	r1, [pc, #24]	; (8003bac <I2C_RequestMemoryRead+0x1cc>)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f863 	bl	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	00010002 	.word	0x00010002

08003bb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc0:	e025      	b.n	8003c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d021      	beq.n	8003c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fe fa8f 	bl	80020ec <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d116      	bne.n	8003c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e023      	b.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d10d      	bne.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	e00c      	b.n	8003c4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	43da      	mvns	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d0b6      	beq.n	8003bc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c6c:	e051      	b.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7c:	d123      	bne.n	8003cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f043 0204 	orr.w	r2, r3, #4
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e046      	b.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d021      	beq.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fe fa0d 	bl	80020ec <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d116      	bne.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f043 0220 	orr.w	r2, r3, #32
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e020      	b.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	0c1b      	lsrs	r3, r3, #16
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d10c      	bne.n	8003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	43da      	mvns	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4013      	ands	r3, r2
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bf14      	ite	ne
 8003d2e:	2301      	movne	r3, #1
 8003d30:	2300      	moveq	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	e00b      	b.n	8003d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	43da      	mvns	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4013      	ands	r3, r2
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d18d      	bne.n	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d68:	e02d      	b.n	8003dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f88d 	bl	8003e8a <I2C_IsAcknowledgeFailed>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e02d      	b.n	8003dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d021      	beq.n	8003dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d82:	f7fe f9b3 	bl	80020ec <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d302      	bcc.n	8003d98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d116      	bne.n	8003dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f043 0220 	orr.w	r2, r3, #32
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e007      	b.n	8003dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	2b80      	cmp	r3, #128	; 0x80
 8003dd2:	d1ca      	bne.n	8003d6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dea:	e042      	b.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d119      	bne.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f06f 0210 	mvn.w	r2, #16
 8003e02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e029      	b.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2e:	f7fe f95d 	bl	80020ec <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d302      	bcc.n	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d116      	bne.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e007      	b.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d1b5      	bne.n	8003dec <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea0:	d11b      	bne.n	8003eda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eaa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f043 0204 	orr.w	r2, r3, #4
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e264      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d075      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f06:	4ba3      	ldr	r3, [pc, #652]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d00c      	beq.n	8003f2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f12:	4ba0      	ldr	r3, [pc, #640]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d112      	bne.n	8003f44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f1e:	4b9d      	ldr	r3, [pc, #628]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2a:	d10b      	bne.n	8003f44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2c:	4b99      	ldr	r3, [pc, #612]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d05b      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x108>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d157      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e23f      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d106      	bne.n	8003f5c <HAL_RCC_OscConfig+0x74>
 8003f4e:	4b91      	ldr	r3, [pc, #580]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a90      	ldr	r2, [pc, #576]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e01d      	b.n	8003f98 <HAL_RCC_OscConfig+0xb0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x98>
 8003f66:	4b8b      	ldr	r3, [pc, #556]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a8a      	ldr	r2, [pc, #552]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b88      	ldr	r3, [pc, #544]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a87      	ldr	r2, [pc, #540]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCC_OscConfig+0xb0>
 8003f80:	4b84      	ldr	r3, [pc, #528]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a83      	ldr	r2, [pc, #524]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b81      	ldr	r3, [pc, #516]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a80      	ldr	r2, [pc, #512]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d013      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7fe f8a4 	bl	80020ec <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7fe f8a0 	bl	80020ec <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e204      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xc0>
 8003fc6:	e014      	b.n	8003ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fe f890 	bl	80020ec <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7fe f88c 	bl	80020ec <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e1f0      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	4b6c      	ldr	r3, [pc, #432]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0xe8>
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d063      	beq.n	80040c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ffe:	4b65      	ldr	r3, [pc, #404]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400a:	4b62      	ldr	r3, [pc, #392]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004012:	2b08      	cmp	r3, #8
 8004014:	d11c      	bne.n	8004050 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004016:	4b5f      	ldr	r3, [pc, #380]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d116      	bne.n	8004050 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004022:	4b5c      	ldr	r3, [pc, #368]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <HAL_RCC_OscConfig+0x152>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d001      	beq.n	800403a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e1c4      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403a:	4b56      	ldr	r3, [pc, #344]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4952      	ldr	r1, [pc, #328]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800404a:	4313      	orrs	r3, r2
 800404c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404e:	e03a      	b.n	80040c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d020      	beq.n	800409a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004058:	4b4f      	ldr	r3, [pc, #316]	; (8004198 <HAL_RCC_OscConfig+0x2b0>)
 800405a:	2201      	movs	r2, #1
 800405c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405e:	f7fe f845 	bl	80020ec <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004066:	f7fe f841 	bl	80020ec <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e1a5      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004084:	4b43      	ldr	r3, [pc, #268]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4940      	ldr	r1, [pc, #256]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	4313      	orrs	r3, r2
 8004096:	600b      	str	r3, [r1, #0]
 8004098:	e015      	b.n	80040c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409a:	4b3f      	ldr	r3, [pc, #252]	; (8004198 <HAL_RCC_OscConfig+0x2b0>)
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fe f824 	bl	80020ec <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a8:	f7fe f820 	bl	80020ec <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e184      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d030      	beq.n	8004134 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040da:	4b30      	ldr	r3, [pc, #192]	; (800419c <HAL_RCC_OscConfig+0x2b4>)
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fe f804 	bl	80020ec <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e8:	f7fe f800 	bl	80020ec <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e164      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	4b26      	ldr	r3, [pc, #152]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0x200>
 8004106:	e015      	b.n	8004134 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004108:	4b24      	ldr	r3, [pc, #144]	; (800419c <HAL_RCC_OscConfig+0x2b4>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410e:	f7fd ffed 	bl	80020ec <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004116:	f7fd ffe9 	bl	80020ec <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e14d      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800412a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80a0 	beq.w	8004282 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004146:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	4a0e      	ldr	r2, [pc, #56]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004160:	6413      	str	r3, [r2, #64]	; 0x40
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416e:	2301      	movs	r3, #1
 8004170:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCC_OscConfig+0x2b8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d121      	bne.n	80041c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417e:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <HAL_RCC_OscConfig+0x2b8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a07      	ldr	r2, [pc, #28]	; (80041a0 <HAL_RCC_OscConfig+0x2b8>)
 8004184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418a:	f7fd ffaf 	bl	80020ec <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004190:	e011      	b.n	80041b6 <HAL_RCC_OscConfig+0x2ce>
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800
 8004198:	42470000 	.word	0x42470000
 800419c:	42470e80 	.word	0x42470e80
 80041a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a4:	f7fd ffa2 	bl	80020ec <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e106      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b6:	4b85      	ldr	r3, [pc, #532]	; (80043cc <HAL_RCC_OscConfig+0x4e4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d106      	bne.n	80041d8 <HAL_RCC_OscConfig+0x2f0>
 80041ca:	4b81      	ldr	r3, [pc, #516]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a80      	ldr	r2, [pc, #512]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70
 80041d6:	e01c      	b.n	8004212 <HAL_RCC_OscConfig+0x32a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b05      	cmp	r3, #5
 80041de:	d10c      	bne.n	80041fa <HAL_RCC_OscConfig+0x312>
 80041e0:	4b7b      	ldr	r3, [pc, #492]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a7a      	ldr	r2, [pc, #488]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 80041e6:	f043 0304 	orr.w	r3, r3, #4
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
 80041ec:	4b78      	ldr	r3, [pc, #480]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	4a77      	ldr	r2, [pc, #476]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	6713      	str	r3, [r2, #112]	; 0x70
 80041f8:	e00b      	b.n	8004212 <HAL_RCC_OscConfig+0x32a>
 80041fa:	4b75      	ldr	r3, [pc, #468]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	4a74      	ldr	r2, [pc, #464]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	6713      	str	r3, [r2, #112]	; 0x70
 8004206:	4b72      	ldr	r3, [pc, #456]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	4a71      	ldr	r2, [pc, #452]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 800420c:	f023 0304 	bic.w	r3, r3, #4
 8004210:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d015      	beq.n	8004246 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421a:	f7fd ff67 	bl	80020ec <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004220:	e00a      	b.n	8004238 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004222:	f7fd ff63 	bl	80020ec <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0c5      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004238:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ee      	beq.n	8004222 <HAL_RCC_OscConfig+0x33a>
 8004244:	e014      	b.n	8004270 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004246:	f7fd ff51 	bl	80020ec <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fd ff4d 	bl	80020ec <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0af      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004264:	4b5a      	ldr	r3, [pc, #360]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ee      	bne.n	800424e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d105      	bne.n	8004282 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004276:	4b56      	ldr	r3, [pc, #344]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	4a55      	ldr	r2, [pc, #340]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 800427c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004280:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 809b 	beq.w	80043c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800428c:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b08      	cmp	r3, #8
 8004296:	d05c      	beq.n	8004352 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d141      	bne.n	8004324 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a0:	4b4c      	ldr	r3, [pc, #304]	; (80043d4 <HAL_RCC_OscConfig+0x4ec>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a6:	f7fd ff21 	bl	80020ec <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ae:	f7fd ff1d 	bl	80020ec <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e081      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c0:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	019b      	lsls	r3, r3, #6
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	3b01      	subs	r3, #1
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	061b      	lsls	r3, r3, #24
 80042f0:	4937      	ldr	r1, [pc, #220]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042f6:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <HAL_RCC_OscConfig+0x4ec>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fd fef6 	bl	80020ec <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004304:	f7fd fef2 	bl	80020ec <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e056      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004316:	4b2e      	ldr	r3, [pc, #184]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0x41c>
 8004322:	e04e      	b.n	80043c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004324:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <HAL_RCC_OscConfig+0x4ec>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fd fedf 	bl	80020ec <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004332:	f7fd fedb 	bl	80020ec <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e03f      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004344:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x44a>
 8004350:	e037      	b.n	80043c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e032      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800435e:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <HAL_RCC_OscConfig+0x4e8>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d028      	beq.n	80043be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004376:	429a      	cmp	r2, r3
 8004378:	d121      	bne.n	80043be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d11a      	bne.n	80043be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800438e:	4013      	ands	r3, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004394:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004396:	4293      	cmp	r3, r2
 8004398:	d111      	bne.n	80043be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	085b      	lsrs	r3, r3, #1
 80043a6:	3b01      	subs	r3, #1
 80043a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d107      	bne.n	80043be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d001      	beq.n	80043c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40007000 	.word	0x40007000
 80043d0:	40023800 	.word	0x40023800
 80043d4:	42470060 	.word	0x42470060

080043d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0cc      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043ec:	4b68      	ldr	r3, [pc, #416]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d90c      	bls.n	8004414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fa:	4b65      	ldr	r3, [pc, #404]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b63      	ldr	r3, [pc, #396]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0b8      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d020      	beq.n	8004462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800442c:	4b59      	ldr	r3, [pc, #356]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4a58      	ldr	r2, [pc, #352]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004444:	4b53      	ldr	r3, [pc, #332]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4a52      	ldr	r2, [pc, #328]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800444e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004450:	4b50      	ldr	r3, [pc, #320]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	494d      	ldr	r1, [pc, #308]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d044      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d119      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e07f      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d003      	beq.n	8004496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004492:	2b03      	cmp	r3, #3
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004496:	4b3f      	ldr	r3, [pc, #252]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e06f      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a6:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e067      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044b6:	4b37      	ldr	r3, [pc, #220]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f023 0203 	bic.w	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4934      	ldr	r1, [pc, #208]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c8:	f7fd fe10 	bl	80020ec <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d0:	f7fd fe0c 	bl	80020ec <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e04f      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e6:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 020c 	and.w	r2, r3, #12
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d1eb      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044f8:	4b25      	ldr	r3, [pc, #148]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d20c      	bcs.n	8004520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b22      	ldr	r3, [pc, #136]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b20      	ldr	r3, [pc, #128]	; (8004590 <HAL_RCC_ClockConfig+0x1b8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e032      	b.n	8004586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800452c:	4b19      	ldr	r3, [pc, #100]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4916      	ldr	r1, [pc, #88]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	490e      	ldr	r1, [pc, #56]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800455e:	f000 f821 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8004562:	4602      	mov	r2, r0
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	490a      	ldr	r1, [pc, #40]	; (8004598 <HAL_RCC_ClockConfig+0x1c0>)
 8004570:	5ccb      	ldrb	r3, [r1, r3]
 8004572:	fa22 f303 	lsr.w	r3, r2, r3
 8004576:	4a09      	ldr	r2, [pc, #36]	; (800459c <HAL_RCC_ClockConfig+0x1c4>)
 8004578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800457a:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fd70 	bl	8002064 <HAL_InitTick>

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40023c00 	.word	0x40023c00
 8004594:	40023800 	.word	0x40023800
 8004598:	0800669c 	.word	0x0800669c
 800459c:	20000004 	.word	0x20000004
 80045a0:	2000001c 	.word	0x2000001c

080045a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a4:	b5b0      	push	{r4, r5, r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045aa:	2100      	movs	r1, #0
 80045ac:	6079      	str	r1, [r7, #4]
 80045ae:	2100      	movs	r1, #0
 80045b0:	60f9      	str	r1, [r7, #12]
 80045b2:	2100      	movs	r1, #0
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045b6:	2100      	movs	r1, #0
 80045b8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ba:	4952      	ldr	r1, [pc, #328]	; (8004704 <HAL_RCC_GetSysClockFreq+0x160>)
 80045bc:	6889      	ldr	r1, [r1, #8]
 80045be:	f001 010c 	and.w	r1, r1, #12
 80045c2:	2908      	cmp	r1, #8
 80045c4:	d00d      	beq.n	80045e2 <HAL_RCC_GetSysClockFreq+0x3e>
 80045c6:	2908      	cmp	r1, #8
 80045c8:	f200 8094 	bhi.w	80046f4 <HAL_RCC_GetSysClockFreq+0x150>
 80045cc:	2900      	cmp	r1, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x32>
 80045d0:	2904      	cmp	r1, #4
 80045d2:	d003      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x38>
 80045d4:	e08e      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d6:	4b4c      	ldr	r3, [pc, #304]	; (8004708 <HAL_RCC_GetSysClockFreq+0x164>)
 80045d8:	60bb      	str	r3, [r7, #8]
       break;
 80045da:	e08e      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045dc:	4b4b      	ldr	r3, [pc, #300]	; (800470c <HAL_RCC_GetSysClockFreq+0x168>)
 80045de:	60bb      	str	r3, [r7, #8]
      break;
 80045e0:	e08b      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045e2:	4948      	ldr	r1, [pc, #288]	; (8004704 <HAL_RCC_GetSysClockFreq+0x160>)
 80045e4:	6849      	ldr	r1, [r1, #4]
 80045e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80045ea:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ec:	4945      	ldr	r1, [pc, #276]	; (8004704 <HAL_RCC_GetSysClockFreq+0x160>)
 80045ee:	6849      	ldr	r1, [r1, #4]
 80045f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80045f4:	2900      	cmp	r1, #0
 80045f6:	d024      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f8:	4942      	ldr	r1, [pc, #264]	; (8004704 <HAL_RCC_GetSysClockFreq+0x160>)
 80045fa:	6849      	ldr	r1, [r1, #4]
 80045fc:	0989      	lsrs	r1, r1, #6
 80045fe:	4608      	mov	r0, r1
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004608:	f04f 0500 	mov.w	r5, #0
 800460c:	ea00 0204 	and.w	r2, r0, r4
 8004610:	ea01 0305 	and.w	r3, r1, r5
 8004614:	493d      	ldr	r1, [pc, #244]	; (800470c <HAL_RCC_GetSysClockFreq+0x168>)
 8004616:	fb01 f003 	mul.w	r0, r1, r3
 800461a:	2100      	movs	r1, #0
 800461c:	fb01 f102 	mul.w	r1, r1, r2
 8004620:	1844      	adds	r4, r0, r1
 8004622:	493a      	ldr	r1, [pc, #232]	; (800470c <HAL_RCC_GetSysClockFreq+0x168>)
 8004624:	fba2 0101 	umull	r0, r1, r2, r1
 8004628:	1863      	adds	r3, r4, r1
 800462a:	4619      	mov	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	461a      	mov	r2, r3
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	f7fb fe24 	bl	8000280 <__aeabi_uldivmod>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4613      	mov	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e04a      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004642:	4b30      	ldr	r3, [pc, #192]	; (8004704 <HAL_RCC_GetSysClockFreq+0x160>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	461a      	mov	r2, r3
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004652:	f04f 0100 	mov.w	r1, #0
 8004656:	ea02 0400 	and.w	r4, r2, r0
 800465a:	ea03 0501 	and.w	r5, r3, r1
 800465e:	4620      	mov	r0, r4
 8004660:	4629      	mov	r1, r5
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	014b      	lsls	r3, r1, #5
 800466c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004670:	0142      	lsls	r2, r0, #5
 8004672:	4610      	mov	r0, r2
 8004674:	4619      	mov	r1, r3
 8004676:	1b00      	subs	r0, r0, r4
 8004678:	eb61 0105 	sbc.w	r1, r1, r5
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	018b      	lsls	r3, r1, #6
 8004686:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800468a:	0182      	lsls	r2, r0, #6
 800468c:	1a12      	subs	r2, r2, r0
 800468e:	eb63 0301 	sbc.w	r3, r3, r1
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f04f 0100 	mov.w	r1, #0
 800469a:	00d9      	lsls	r1, r3, #3
 800469c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046a0:	00d0      	lsls	r0, r2, #3
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	1912      	adds	r2, r2, r4
 80046a8:	eb45 0303 	adc.w	r3, r5, r3
 80046ac:	f04f 0000 	mov.w	r0, #0
 80046b0:	f04f 0100 	mov.w	r1, #0
 80046b4:	0299      	lsls	r1, r3, #10
 80046b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046ba:	0290      	lsls	r0, r2, #10
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	461a      	mov	r2, r3
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	f7fb fdd8 	bl	8000280 <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4613      	mov	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <HAL_RCC_GetSysClockFreq+0x160>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	3301      	adds	r3, #1
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f0:	60bb      	str	r3, [r7, #8]
      break;
 80046f2:	e002      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <HAL_RCC_GetSysClockFreq+0x164>)
 80046f6:	60bb      	str	r3, [r7, #8]
      break;
 80046f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fa:	68bb      	ldr	r3, [r7, #8]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bdb0      	pop	{r4, r5, r7, pc}
 8004704:	40023800 	.word	0x40023800
 8004708:	00f42400 	.word	0x00f42400
 800470c:	017d7840 	.word	0x017d7840

08004710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <HAL_RCC_GetHCLKFreq+0x14>)
 8004716:	681b      	ldr	r3, [r3, #0]
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000004 	.word	0x20000004

08004728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800472c:	f7ff fff0 	bl	8004710 <HAL_RCC_GetHCLKFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	0a9b      	lsrs	r3, r3, #10
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	4903      	ldr	r1, [pc, #12]	; (800474c <HAL_RCC_GetPCLK1Freq+0x24>)
 800473e:	5ccb      	ldrb	r3, [r1, r3]
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004744:	4618      	mov	r0, r3
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40023800 	.word	0x40023800
 800474c:	080066ac 	.word	0x080066ac

08004750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004754:	f7ff ffdc 	bl	8004710 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0b5b      	lsrs	r3, r3, #13
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4903      	ldr	r1, [pc, #12]	; (8004774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40023800 	.word	0x40023800
 8004774:	080066ac 	.word	0x080066ac

08004778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e041      	b.n	800480e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fc ffb2 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 fd8a 	bl	80052d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d001      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e044      	b.n	80048ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d018      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d013      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1a      	ldr	r2, [pc, #104]	; (80048cc <HAL_TIM_Base_Start_IT+0xb4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d111      	bne.n	80048a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b06      	cmp	r3, #6
 8004894:	d010      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a6:	e007      	b.n	80048b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800
 80048d4:	40000c00 	.word	0x40000c00
 80048d8:	40014000 	.word	0x40014000

080048dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e041      	b.n	8004972 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f839 	bl	800497a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 fcd8 	bl	80052d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <HAL_TIM_PWM_Start+0x24>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e022      	b.n	80049fa <HAL_TIM_PWM_Start+0x6a>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d109      	bne.n	80049ce <HAL_TIM_PWM_Start+0x3e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	bf14      	ite	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	2300      	moveq	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	e015      	b.n	80049fa <HAL_TIM_PWM_Start+0x6a>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d109      	bne.n	80049e8 <HAL_TIM_PWM_Start+0x58>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e008      	b.n	80049fa <HAL_TIM_PWM_Start+0x6a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e068      	b.n	8004ad4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x82>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a10:	e013      	b.n	8004a3a <HAL_TIM_PWM_Start+0xaa>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x92>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a20:	e00b      	b.n	8004a3a <HAL_TIM_PWM_Start+0xaa>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start+0xa2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a30:	e003      	b.n	8004a3a <HAL_TIM_PWM_Start+0xaa>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	6839      	ldr	r1, [r7, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 feea 	bl	800581c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a23      	ldr	r2, [pc, #140]	; (8004adc <HAL_TIM_PWM_Start+0x14c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d107      	bne.n	8004a62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1d      	ldr	r2, [pc, #116]	; (8004adc <HAL_TIM_PWM_Start+0x14c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d018      	beq.n	8004a9e <HAL_TIM_PWM_Start+0x10e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a74:	d013      	beq.n	8004a9e <HAL_TIM_PWM_Start+0x10e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <HAL_TIM_PWM_Start+0x150>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00e      	beq.n	8004a9e <HAL_TIM_PWM_Start+0x10e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a17      	ldr	r2, [pc, #92]	; (8004ae4 <HAL_TIM_PWM_Start+0x154>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <HAL_TIM_PWM_Start+0x10e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <HAL_TIM_PWM_Start+0x158>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_TIM_PWM_Start+0x10e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a14      	ldr	r2, [pc, #80]	; (8004aec <HAL_TIM_PWM_Start+0x15c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d111      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	d010      	beq.n	8004ad2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac0:	e007      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40010000 	.word	0x40010000
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40000800 	.word	0x40000800
 8004ae8:	40000c00 	.word	0x40000c00
 8004aec:	40014000 	.word	0x40014000

08004af0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e097      	b.n	8004c34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7fc fdad 	bl	8001678 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b34:	f023 0307 	bic.w	r3, r3, #7
 8004b38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f000 fbc3 	bl	80052d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b72:	f023 0303 	bic.w	r3, r3, #3
 8004b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	4313      	orrs	r3, r2
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b90:	f023 030c 	bic.w	r3, r3, #12
 8004b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	4313      	orrs	r3, r2
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	011a      	lsls	r2, r3, #4
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	031b      	lsls	r3, r3, #12
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	4313      	orrs	r3, r2
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d110      	bne.n	8004c8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d102      	bne.n	8004c78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c72:	7b7b      	ldrb	r3, [r7, #13]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d001      	beq.n	8004c7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e069      	b.n	8004d50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c8c:	e031      	b.n	8004cf2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d110      	bne.n	8004cb6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c94:	7bbb      	ldrb	r3, [r7, #14]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d102      	bne.n	8004ca0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c9a:	7b3b      	ldrb	r3, [r7, #12]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d001      	beq.n	8004ca4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e055      	b.n	8004d50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb4:	e01d      	b.n	8004cf2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d108      	bne.n	8004cce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cbc:	7bbb      	ldrb	r3, [r7, #14]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d105      	bne.n	8004cce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cc2:	7b7b      	ldrb	r3, [r7, #13]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d102      	bne.n	8004cce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cc8:	7b3b      	ldrb	r3, [r7, #12]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d001      	beq.n	8004cd2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e03e      	b.n	8004d50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2202      	movs	r2, #2
 8004cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <HAL_TIM_Encoder_Start+0xc4>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d008      	beq.n	8004d10 <HAL_TIM_Encoder_Start+0xd4>
 8004cfe:	e00f      	b.n	8004d20 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2201      	movs	r2, #1
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fd87 	bl	800581c <TIM_CCxChannelCmd>
      break;
 8004d0e:	e016      	b.n	8004d3e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2201      	movs	r2, #1
 8004d16:	2104      	movs	r1, #4
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fd7f 	bl	800581c <TIM_CCxChannelCmd>
      break;
 8004d1e:	e00e      	b.n	8004d3e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2201      	movs	r2, #1
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fd77 	bl	800581c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2201      	movs	r2, #1
 8004d34:	2104      	movs	r1, #4
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fd70 	bl	800581c <TIM_CCxChannelCmd>
      break;
 8004d3c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d122      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d11b      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0202 	mvn.w	r2, #2
 8004d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa7a 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fa6c 	bl	8005280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fa7d 	bl	80052a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d122      	bne.n	8004e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d11b      	bne.n	8004e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0204 	mvn.w	r2, #4
 8004dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fa50 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8004df4:	e005      	b.n	8004e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fa42 	bl	8005280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fa53 	bl	80052a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d122      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d11b      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0208 	mvn.w	r2, #8
 8004e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2204      	movs	r2, #4
 8004e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fa26 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8004e48:	e005      	b.n	8004e56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fa18 	bl	8005280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fa29 	bl	80052a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f003 0310 	and.w	r3, r3, #16
 8004e66:	2b10      	cmp	r3, #16
 8004e68:	d122      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	d11b      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0210 	mvn.w	r2, #16
 8004e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2208      	movs	r2, #8
 8004e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9fc 	bl	8005294 <HAL_TIM_IC_CaptureCallback>
 8004e9c:	e005      	b.n	8004eaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f9ee 	bl	8005280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f9ff 	bl	80052a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d10e      	bne.n	8004edc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d107      	bne.n	8004edc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0201 	mvn.w	r2, #1
 8004ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f9c8 	bl	800526c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee6:	2b80      	cmp	r3, #128	; 0x80
 8004ee8:	d10e      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	d107      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fd28 	bl	8005958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d10e      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f20:	2b40      	cmp	r3, #64	; 0x40
 8004f22:	d107      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9c4 	bl	80052bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d10e      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d107      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0220 	mvn.w	r2, #32
 8004f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fcf2 	bl	8005944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e0ac      	b.n	80050dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b0c      	cmp	r3, #12
 8004f8e:	f200 809f 	bhi.w	80050d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fcd 	.word	0x08004fcd
 8004f9c:	080050d1 	.word	0x080050d1
 8004fa0:	080050d1 	.word	0x080050d1
 8004fa4:	080050d1 	.word	0x080050d1
 8004fa8:	0800500d 	.word	0x0800500d
 8004fac:	080050d1 	.word	0x080050d1
 8004fb0:	080050d1 	.word	0x080050d1
 8004fb4:	080050d1 	.word	0x080050d1
 8004fb8:	0800504f 	.word	0x0800504f
 8004fbc:	080050d1 	.word	0x080050d1
 8004fc0:	080050d1 	.word	0x080050d1
 8004fc4:	080050d1 	.word	0x080050d1
 8004fc8:	0800508f 	.word	0x0800508f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 f9fc 	bl	80053d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0208 	orr.w	r2, r2, #8
 8004fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0204 	bic.w	r2, r2, #4
 8004ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6999      	ldr	r1, [r3, #24]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	619a      	str	r2, [r3, #24]
      break;
 800500a:	e062      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fa42 	bl	800549c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699a      	ldr	r2, [r3, #24]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6999      	ldr	r1, [r3, #24]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	021a      	lsls	r2, r3, #8
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	619a      	str	r2, [r3, #24]
      break;
 800504c:	e041      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fa8d 	bl	8005574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0208 	orr.w	r2, r2, #8
 8005068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0204 	bic.w	r2, r2, #4
 8005078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69d9      	ldr	r1, [r3, #28]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	61da      	str	r2, [r3, #28]
      break;
 800508c:	e021      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fad7 	bl	8005648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69d9      	ldr	r1, [r3, #28]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	021a      	lsls	r2, r3, #8
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	61da      	str	r2, [r3, #28]
      break;
 80050ce:	e000      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80050d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_TIM_ConfigClockSource+0x18>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e0b3      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x180>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800511a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005122:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005134:	d03e      	beq.n	80051b4 <HAL_TIM_ConfigClockSource+0xd0>
 8005136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513a:	f200 8087 	bhi.w	800524c <HAL_TIM_ConfigClockSource+0x168>
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005142:	f000 8085 	beq.w	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514a:	d87f      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x168>
 800514c:	2b70      	cmp	r3, #112	; 0x70
 800514e:	d01a      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0xa2>
 8005150:	2b70      	cmp	r3, #112	; 0x70
 8005152:	d87b      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x168>
 8005154:	2b60      	cmp	r3, #96	; 0x60
 8005156:	d050      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x116>
 8005158:	2b60      	cmp	r3, #96	; 0x60
 800515a:	d877      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x168>
 800515c:	2b50      	cmp	r3, #80	; 0x50
 800515e:	d03c      	beq.n	80051da <HAL_TIM_ConfigClockSource+0xf6>
 8005160:	2b50      	cmp	r3, #80	; 0x50
 8005162:	d873      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x168>
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d058      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x136>
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d86f      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x168>
 800516c:	2b30      	cmp	r3, #48	; 0x30
 800516e:	d064      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x156>
 8005170:	2b30      	cmp	r3, #48	; 0x30
 8005172:	d86b      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x168>
 8005174:	2b20      	cmp	r3, #32
 8005176:	d060      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x156>
 8005178:	2b20      	cmp	r3, #32
 800517a:	d867      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x168>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d05c      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x156>
 8005180:	2b10      	cmp	r3, #16
 8005182:	d05a      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005184:	e062      	b.n	800524c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6899      	ldr	r1, [r3, #8]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f000 fb21 	bl	80057dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	609a      	str	r2, [r3, #8]
      break;
 80051b2:	e04e      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	6899      	ldr	r1, [r3, #8]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f000 fb0a 	bl	80057dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051d6:	609a      	str	r2, [r3, #8]
      break;
 80051d8:	e03b      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 fa7e 	bl	80056e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2150      	movs	r1, #80	; 0x50
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fad7 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 80051f8:	e02b      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	461a      	mov	r2, r3
 8005208:	f000 fa9d 	bl	8005746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2160      	movs	r1, #96	; 0x60
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fac7 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8005218:	e01b      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	461a      	mov	r2, r3
 8005228:	f000 fa5e 	bl	80056e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2140      	movs	r1, #64	; 0x40
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fab7 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8005238:	e00b      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4619      	mov	r1, r3
 8005244:	4610      	mov	r0, r2
 8005246:	f000 faae 	bl	80057a6 <TIM_ITRx_SetConfig>
        break;
 800524a:	e002      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800524c:	bf00      	nop
 800524e:	e000      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005250:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a34      	ldr	r2, [pc, #208]	; (80053b4 <TIM_Base_SetConfig+0xe4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00f      	beq.n	8005308 <TIM_Base_SetConfig+0x38>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ee:	d00b      	beq.n	8005308 <TIM_Base_SetConfig+0x38>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a31      	ldr	r2, [pc, #196]	; (80053b8 <TIM_Base_SetConfig+0xe8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d007      	beq.n	8005308 <TIM_Base_SetConfig+0x38>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a30      	ldr	r2, [pc, #192]	; (80053bc <TIM_Base_SetConfig+0xec>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_Base_SetConfig+0x38>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a2f      	ldr	r2, [pc, #188]	; (80053c0 <TIM_Base_SetConfig+0xf0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d108      	bne.n	800531a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a25      	ldr	r2, [pc, #148]	; (80053b4 <TIM_Base_SetConfig+0xe4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d01b      	beq.n	800535a <TIM_Base_SetConfig+0x8a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005328:	d017      	beq.n	800535a <TIM_Base_SetConfig+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a22      	ldr	r2, [pc, #136]	; (80053b8 <TIM_Base_SetConfig+0xe8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <TIM_Base_SetConfig+0x8a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a21      	ldr	r2, [pc, #132]	; (80053bc <TIM_Base_SetConfig+0xec>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00f      	beq.n	800535a <TIM_Base_SetConfig+0x8a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a20      	ldr	r2, [pc, #128]	; (80053c0 <TIM_Base_SetConfig+0xf0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00b      	beq.n	800535a <TIM_Base_SetConfig+0x8a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a1f      	ldr	r2, [pc, #124]	; (80053c4 <TIM_Base_SetConfig+0xf4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d007      	beq.n	800535a <TIM_Base_SetConfig+0x8a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a1e      	ldr	r2, [pc, #120]	; (80053c8 <TIM_Base_SetConfig+0xf8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_Base_SetConfig+0x8a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <TIM_Base_SetConfig+0xfc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d108      	bne.n	800536c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <TIM_Base_SetConfig+0xe4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d103      	bne.n	80053a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	615a      	str	r2, [r3, #20]
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40010000 	.word	0x40010000
 80053b8:	40000400 	.word	0x40000400
 80053bc:	40000800 	.word	0x40000800
 80053c0:	40000c00 	.word	0x40000c00
 80053c4:	40014000 	.word	0x40014000
 80053c8:	40014400 	.word	0x40014400
 80053cc:	40014800 	.word	0x40014800

080053d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f023 0201 	bic.w	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 0302 	bic.w	r3, r3, #2
 8005418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a1c      	ldr	r2, [pc, #112]	; (8005498 <TIM_OC1_SetConfig+0xc8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d10c      	bne.n	8005446 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f023 0308 	bic.w	r3, r3, #8
 8005432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f023 0304 	bic.w	r3, r3, #4
 8005444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a13      	ldr	r2, [pc, #76]	; (8005498 <TIM_OC1_SetConfig+0xc8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d111      	bne.n	8005472 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800545c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	621a      	str	r2, [r3, #32]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40010000 	.word	0x40010000

0800549c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f023 0210 	bic.w	r2, r3, #16
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 0320 	bic.w	r3, r3, #32
 80054e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <TIM_OC2_SetConfig+0xd4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d10d      	bne.n	8005518 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005516:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <TIM_OC2_SetConfig+0xd4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d113      	bne.n	8005548 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005526:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800552e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40010000 	.word	0x40010000

08005574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0303 	bic.w	r3, r3, #3
 80055aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <TIM_OC3_SetConfig+0xd0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10d      	bne.n	80055ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a14      	ldr	r2, [pc, #80]	; (8005644 <TIM_OC3_SetConfig+0xd0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d113      	bne.n	800561e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	621a      	str	r2, [r3, #32]
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	40010000 	.word	0x40010000

08005648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	031b      	lsls	r3, r3, #12
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a10      	ldr	r2, [pc, #64]	; (80056e4 <TIM_OC4_SetConfig+0x9c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d109      	bne.n	80056bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	019b      	lsls	r3, r3, #6
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	621a      	str	r2, [r3, #32]
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40010000 	.word	0x40010000

080056e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 030a 	bic.w	r3, r3, #10
 8005724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005746:	b480      	push	{r7}
 8005748:	b087      	sub	sp, #28
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f023 0210 	bic.w	r2, r3, #16
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	031b      	lsls	r3, r3, #12
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005782:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f043 0307 	orr.w	r3, r3, #7
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	609a      	str	r2, [r3, #8]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	021a      	lsls	r2, r3, #8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	431a      	orrs	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4313      	orrs	r3, r2
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	609a      	str	r2, [r3, #8]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	2201      	movs	r2, #1
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a1a      	ldr	r2, [r3, #32]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	43db      	mvns	r3, r3
 800583e:	401a      	ands	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a1a      	ldr	r2, [r3, #32]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	fa01 f303 	lsl.w	r3, r1, r3
 8005854:	431a      	orrs	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800587c:	2302      	movs	r3, #2
 800587e:	e050      	b.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058cc:	d013      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a18      	ldr	r2, [pc, #96]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a16      	ldr	r2, [pc, #88]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a15      	ldr	r2, [pc, #84]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a13      	ldr	r2, [pc, #76]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d10c      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	4313      	orrs	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40010000 	.word	0x40010000
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40014000 	.word	0x40014000

08005944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e03f      	b.n	80059fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fb ff16 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2224      	movs	r2, #36	; 0x24
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f829 	bl	8005a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695a      	ldr	r2, [r3, #20]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0c:	b09f      	sub	sp, #124	; 0x7c
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	68d9      	ldr	r1, [r3, #12]
 8005a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	ea40 0301 	orr.w	r3, r0, r1
 8005a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a4c:	f021 010c 	bic.w	r1, r1, #12
 8005a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a56:	430b      	orrs	r3, r1
 8005a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a66:	6999      	ldr	r1, [r3, #24]
 8005a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	ea40 0301 	orr.w	r3, r0, r1
 8005a70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4bc5      	ldr	r3, [pc, #788]	; (8005d8c <UART_SetConfig+0x384>)
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d004      	beq.n	8005a86 <UART_SetConfig+0x7e>
 8005a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4bc3      	ldr	r3, [pc, #780]	; (8005d90 <UART_SetConfig+0x388>)
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d103      	bne.n	8005a8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a86:	f7fe fe63 	bl	8004750 <HAL_RCC_GetPCLK2Freq>
 8005a8a:	6778      	str	r0, [r7, #116]	; 0x74
 8005a8c:	e002      	b.n	8005a94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a8e:	f7fe fe4b 	bl	8004728 <HAL_RCC_GetPCLK1Freq>
 8005a92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9c:	f040 80b6 	bne.w	8005c0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa2:	461c      	mov	r4, r3
 8005aa4:	f04f 0500 	mov.w	r5, #0
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	462b      	mov	r3, r5
 8005aac:	1891      	adds	r1, r2, r2
 8005aae:	6439      	str	r1, [r7, #64]	; 0x40
 8005ab0:	415b      	adcs	r3, r3
 8005ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ab8:	1912      	adds	r2, r2, r4
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	f04f 0000 	mov.w	r0, #0
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	00d9      	lsls	r1, r3, #3
 8005ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005acc:	00d0      	lsls	r0, r2, #3
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	1911      	adds	r1, r2, r4
 8005ad4:	6639      	str	r1, [r7, #96]	; 0x60
 8005ad6:	416b      	adcs	r3, r5
 8005ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8005ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	1891      	adds	r1, r2, r2
 8005ae6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ae8:	415b      	adcs	r3, r3
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005af0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005af4:	f7fa fbc4 	bl	8000280 <__aeabi_uldivmod>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4ba5      	ldr	r3, [pc, #660]	; (8005d94 <UART_SetConfig+0x38c>)
 8005afe:	fba3 2302 	umull	r2, r3, r3, r2
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	011e      	lsls	r6, r3, #4
 8005b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b08:	461c      	mov	r4, r3
 8005b0a:	f04f 0500 	mov.w	r5, #0
 8005b0e:	4622      	mov	r2, r4
 8005b10:	462b      	mov	r3, r5
 8005b12:	1891      	adds	r1, r2, r2
 8005b14:	6339      	str	r1, [r7, #48]	; 0x30
 8005b16:	415b      	adcs	r3, r3
 8005b18:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b1e:	1912      	adds	r2, r2, r4
 8005b20:	eb45 0303 	adc.w	r3, r5, r3
 8005b24:	f04f 0000 	mov.w	r0, #0
 8005b28:	f04f 0100 	mov.w	r1, #0
 8005b2c:	00d9      	lsls	r1, r3, #3
 8005b2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b32:	00d0      	lsls	r0, r2, #3
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	1911      	adds	r1, r2, r4
 8005b3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b3c:	416b      	adcs	r3, r5
 8005b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	461a      	mov	r2, r3
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	1891      	adds	r1, r2, r2
 8005b4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b4e:	415b      	adcs	r3, r3
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b5a:	f7fa fb91 	bl	8000280 <__aeabi_uldivmod>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4b8c      	ldr	r3, [pc, #560]	; (8005d94 <UART_SetConfig+0x38c>)
 8005b64:	fba3 1302 	umull	r1, r3, r3, r2
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	2164      	movs	r1, #100	; 0x64
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	3332      	adds	r3, #50	; 0x32
 8005b76:	4a87      	ldr	r2, [pc, #540]	; (8005d94 <UART_SetConfig+0x38c>)
 8005b78:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7c:	095b      	lsrs	r3, r3, #5
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b84:	441e      	add	r6, r3
 8005b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f04f 0100 	mov.w	r1, #0
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	1894      	adds	r4, r2, r2
 8005b94:	623c      	str	r4, [r7, #32]
 8005b96:	415b      	adcs	r3, r3
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b9e:	1812      	adds	r2, r2, r0
 8005ba0:	eb41 0303 	adc.w	r3, r1, r3
 8005ba4:	f04f 0400 	mov.w	r4, #0
 8005ba8:	f04f 0500 	mov.w	r5, #0
 8005bac:	00dd      	lsls	r5, r3, #3
 8005bae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bb2:	00d4      	lsls	r4, r2, #3
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	1814      	adds	r4, r2, r0
 8005bba:	653c      	str	r4, [r7, #80]	; 0x50
 8005bbc:	414b      	adcs	r3, r1
 8005bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	61b9      	str	r1, [r7, #24]
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005bda:	f7fa fb51 	bl	8000280 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4b6c      	ldr	r3, [pc, #432]	; (8005d94 <UART_SetConfig+0x38c>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	; 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3332      	adds	r3, #50	; 0x32
 8005bf6:	4a67      	ldr	r2, [pc, #412]	; (8005d94 <UART_SetConfig+0x38c>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	f003 0207 	and.w	r2, r3, #7
 8005c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4432      	add	r2, r6
 8005c08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c0a:	e0b9      	b.n	8005d80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c0e:	461c      	mov	r4, r3
 8005c10:	f04f 0500 	mov.w	r5, #0
 8005c14:	4622      	mov	r2, r4
 8005c16:	462b      	mov	r3, r5
 8005c18:	1891      	adds	r1, r2, r2
 8005c1a:	6139      	str	r1, [r7, #16]
 8005c1c:	415b      	adcs	r3, r3
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c24:	1912      	adds	r2, r2, r4
 8005c26:	eb45 0303 	adc.w	r3, r5, r3
 8005c2a:	f04f 0000 	mov.w	r0, #0
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	00d9      	lsls	r1, r3, #3
 8005c34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c38:	00d0      	lsls	r0, r2, #3
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	eb12 0804 	adds.w	r8, r2, r4
 8005c42:	eb43 0905 	adc.w	r9, r3, r5
 8005c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f04f 0100 	mov.w	r1, #0
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	008b      	lsls	r3, r1, #2
 8005c5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c5e:	0082      	lsls	r2, r0, #2
 8005c60:	4640      	mov	r0, r8
 8005c62:	4649      	mov	r1, r9
 8005c64:	f7fa fb0c 	bl	8000280 <__aeabi_uldivmod>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4b49      	ldr	r3, [pc, #292]	; (8005d94 <UART_SetConfig+0x38c>)
 8005c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	011e      	lsls	r6, r3, #4
 8005c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f04f 0100 	mov.w	r1, #0
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	1894      	adds	r4, r2, r2
 8005c84:	60bc      	str	r4, [r7, #8]
 8005c86:	415b      	adcs	r3, r3
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c8e:	1812      	adds	r2, r2, r0
 8005c90:	eb41 0303 	adc.w	r3, r1, r3
 8005c94:	f04f 0400 	mov.w	r4, #0
 8005c98:	f04f 0500 	mov.w	r5, #0
 8005c9c:	00dd      	lsls	r5, r3, #3
 8005c9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ca2:	00d4      	lsls	r4, r2, #3
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	462b      	mov	r3, r5
 8005ca8:	1814      	adds	r4, r2, r0
 8005caa:	64bc      	str	r4, [r7, #72]	; 0x48
 8005cac:	414b      	adcs	r3, r1
 8005cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f04f 0100 	mov.w	r1, #0
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	008b      	lsls	r3, r1, #2
 8005cc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cc8:	0082      	lsls	r2, r0, #2
 8005cca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005cce:	f7fa fad7 	bl	8000280 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <UART_SetConfig+0x38c>)
 8005cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	2164      	movs	r1, #100	; 0x64
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	3332      	adds	r3, #50	; 0x32
 8005cea:	4a2a      	ldr	r2, [pc, #168]	; (8005d94 <UART_SetConfig+0x38c>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cf6:	441e      	add	r6, r3
 8005cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f04f 0100 	mov.w	r1, #0
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	1894      	adds	r4, r2, r2
 8005d06:	603c      	str	r4, [r7, #0]
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	607b      	str	r3, [r7, #4]
 8005d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d10:	1812      	adds	r2, r2, r0
 8005d12:	eb41 0303 	adc.w	r3, r1, r3
 8005d16:	f04f 0400 	mov.w	r4, #0
 8005d1a:	f04f 0500 	mov.w	r5, #0
 8005d1e:	00dd      	lsls	r5, r3, #3
 8005d20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d24:	00d4      	lsls	r4, r2, #3
 8005d26:	4622      	mov	r2, r4
 8005d28:	462b      	mov	r3, r5
 8005d2a:	eb12 0a00 	adds.w	sl, r2, r0
 8005d2e:	eb43 0b01 	adc.w	fp, r3, r1
 8005d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f04f 0100 	mov.w	r1, #0
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	008b      	lsls	r3, r1, #2
 8005d46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d4a:	0082      	lsls	r2, r0, #2
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	4659      	mov	r1, fp
 8005d50:	f7fa fa96 	bl	8000280 <__aeabi_uldivmod>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <UART_SetConfig+0x38c>)
 8005d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	2164      	movs	r1, #100	; 0x64
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	3332      	adds	r3, #50	; 0x32
 8005d6c:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <UART_SetConfig+0x38c>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4432      	add	r2, r6
 8005d7e:	609a      	str	r2, [r3, #8]
}
 8005d80:	bf00      	nop
 8005d82:	377c      	adds	r7, #124	; 0x7c
 8005d84:	46bd      	mov	sp, r7
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	40011400 	.word	0x40011400
 8005d94:	51eb851f 	.word	0x51eb851f

08005d98 <__errno>:
 8005d98:	4b01      	ldr	r3, [pc, #4]	; (8005da0 <__errno+0x8>)
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20000024 	.word	0x20000024

08005da4 <__libc_init_array>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	4d0d      	ldr	r5, [pc, #52]	; (8005ddc <__libc_init_array+0x38>)
 8005da8:	4c0d      	ldr	r4, [pc, #52]	; (8005de0 <__libc_init_array+0x3c>)
 8005daa:	1b64      	subs	r4, r4, r5
 8005dac:	10a4      	asrs	r4, r4, #2
 8005dae:	2600      	movs	r6, #0
 8005db0:	42a6      	cmp	r6, r4
 8005db2:	d109      	bne.n	8005dc8 <__libc_init_array+0x24>
 8005db4:	4d0b      	ldr	r5, [pc, #44]	; (8005de4 <__libc_init_array+0x40>)
 8005db6:	4c0c      	ldr	r4, [pc, #48]	; (8005de8 <__libc_init_array+0x44>)
 8005db8:	f000 fc4e 	bl	8006658 <_init>
 8005dbc:	1b64      	subs	r4, r4, r5
 8005dbe:	10a4      	asrs	r4, r4, #2
 8005dc0:	2600      	movs	r6, #0
 8005dc2:	42a6      	cmp	r6, r4
 8005dc4:	d105      	bne.n	8005dd2 <__libc_init_array+0x2e>
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dcc:	4798      	blx	r3
 8005dce:	3601      	adds	r6, #1
 8005dd0:	e7ee      	b.n	8005db0 <__libc_init_array+0xc>
 8005dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd6:	4798      	blx	r3
 8005dd8:	3601      	adds	r6, #1
 8005dda:	e7f2      	b.n	8005dc2 <__libc_init_array+0x1e>
 8005ddc:	080066f8 	.word	0x080066f8
 8005de0:	080066f8 	.word	0x080066f8
 8005de4:	080066f8 	.word	0x080066f8
 8005de8:	080066fc 	.word	0x080066fc

08005dec <memset>:
 8005dec:	4402      	add	r2, r0
 8005dee:	4603      	mov	r3, r0
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d100      	bne.n	8005df6 <memset+0xa>
 8005df4:	4770      	bx	lr
 8005df6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfa:	e7f9      	b.n	8005df0 <memset+0x4>

08005dfc <siprintf>:
 8005dfc:	b40e      	push	{r1, r2, r3}
 8005dfe:	b500      	push	{lr}
 8005e00:	b09c      	sub	sp, #112	; 0x70
 8005e02:	ab1d      	add	r3, sp, #116	; 0x74
 8005e04:	9002      	str	r0, [sp, #8]
 8005e06:	9006      	str	r0, [sp, #24]
 8005e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e0c:	4809      	ldr	r0, [pc, #36]	; (8005e34 <siprintf+0x38>)
 8005e0e:	9107      	str	r1, [sp, #28]
 8005e10:	9104      	str	r1, [sp, #16]
 8005e12:	4909      	ldr	r1, [pc, #36]	; (8005e38 <siprintf+0x3c>)
 8005e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e18:	9105      	str	r1, [sp, #20]
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	a902      	add	r1, sp, #8
 8005e20:	f000 f868 	bl	8005ef4 <_svfiprintf_r>
 8005e24:	9b02      	ldr	r3, [sp, #8]
 8005e26:	2200      	movs	r2, #0
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	b01c      	add	sp, #112	; 0x70
 8005e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e30:	b003      	add	sp, #12
 8005e32:	4770      	bx	lr
 8005e34:	20000024 	.word	0x20000024
 8005e38:	ffff0208 	.word	0xffff0208

08005e3c <__ssputs_r>:
 8005e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	688e      	ldr	r6, [r1, #8]
 8005e42:	429e      	cmp	r6, r3
 8005e44:	4682      	mov	sl, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	4690      	mov	r8, r2
 8005e4a:	461f      	mov	r7, r3
 8005e4c:	d838      	bhi.n	8005ec0 <__ssputs_r+0x84>
 8005e4e:	898a      	ldrh	r2, [r1, #12]
 8005e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e54:	d032      	beq.n	8005ebc <__ssputs_r+0x80>
 8005e56:	6825      	ldr	r5, [r4, #0]
 8005e58:	6909      	ldr	r1, [r1, #16]
 8005e5a:	eba5 0901 	sub.w	r9, r5, r1
 8005e5e:	6965      	ldr	r5, [r4, #20]
 8005e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e68:	3301      	adds	r3, #1
 8005e6a:	444b      	add	r3, r9
 8005e6c:	106d      	asrs	r5, r5, #1
 8005e6e:	429d      	cmp	r5, r3
 8005e70:	bf38      	it	cc
 8005e72:	461d      	movcc	r5, r3
 8005e74:	0553      	lsls	r3, r2, #21
 8005e76:	d531      	bpl.n	8005edc <__ssputs_r+0xa0>
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f000 fb47 	bl	800650c <_malloc_r>
 8005e7e:	4606      	mov	r6, r0
 8005e80:	b950      	cbnz	r0, 8005e98 <__ssputs_r+0x5c>
 8005e82:	230c      	movs	r3, #12
 8005e84:	f8ca 3000 	str.w	r3, [sl]
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295
 8005e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e98:	6921      	ldr	r1, [r4, #16]
 8005e9a:	464a      	mov	r2, r9
 8005e9c:	f000 fabe 	bl	800641c <memcpy>
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eaa:	81a3      	strh	r3, [r4, #12]
 8005eac:	6126      	str	r6, [r4, #16]
 8005eae:	6165      	str	r5, [r4, #20]
 8005eb0:	444e      	add	r6, r9
 8005eb2:	eba5 0509 	sub.w	r5, r5, r9
 8005eb6:	6026      	str	r6, [r4, #0]
 8005eb8:	60a5      	str	r5, [r4, #8]
 8005eba:	463e      	mov	r6, r7
 8005ebc:	42be      	cmp	r6, r7
 8005ebe:	d900      	bls.n	8005ec2 <__ssputs_r+0x86>
 8005ec0:	463e      	mov	r6, r7
 8005ec2:	4632      	mov	r2, r6
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	f000 fab6 	bl	8006438 <memmove>
 8005ecc:	68a3      	ldr	r3, [r4, #8]
 8005ece:	6822      	ldr	r2, [r4, #0]
 8005ed0:	1b9b      	subs	r3, r3, r6
 8005ed2:	4432      	add	r2, r6
 8005ed4:	60a3      	str	r3, [r4, #8]
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e7db      	b.n	8005e94 <__ssputs_r+0x58>
 8005edc:	462a      	mov	r2, r5
 8005ede:	f000 fb6f 	bl	80065c0 <_realloc_r>
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d1e1      	bne.n	8005eac <__ssputs_r+0x70>
 8005ee8:	6921      	ldr	r1, [r4, #16]
 8005eea:	4650      	mov	r0, sl
 8005eec:	f000 fabe 	bl	800646c <_free_r>
 8005ef0:	e7c7      	b.n	8005e82 <__ssputs_r+0x46>
	...

08005ef4 <_svfiprintf_r>:
 8005ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	4698      	mov	r8, r3
 8005efa:	898b      	ldrh	r3, [r1, #12]
 8005efc:	061b      	lsls	r3, r3, #24
 8005efe:	b09d      	sub	sp, #116	; 0x74
 8005f00:	4607      	mov	r7, r0
 8005f02:	460d      	mov	r5, r1
 8005f04:	4614      	mov	r4, r2
 8005f06:	d50e      	bpl.n	8005f26 <_svfiprintf_r+0x32>
 8005f08:	690b      	ldr	r3, [r1, #16]
 8005f0a:	b963      	cbnz	r3, 8005f26 <_svfiprintf_r+0x32>
 8005f0c:	2140      	movs	r1, #64	; 0x40
 8005f0e:	f000 fafd 	bl	800650c <_malloc_r>
 8005f12:	6028      	str	r0, [r5, #0]
 8005f14:	6128      	str	r0, [r5, #16]
 8005f16:	b920      	cbnz	r0, 8005f22 <_svfiprintf_r+0x2e>
 8005f18:	230c      	movs	r3, #12
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e0d1      	b.n	80060c6 <_svfiprintf_r+0x1d2>
 8005f22:	2340      	movs	r3, #64	; 0x40
 8005f24:	616b      	str	r3, [r5, #20]
 8005f26:	2300      	movs	r3, #0
 8005f28:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2a:	2320      	movs	r3, #32
 8005f2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f34:	2330      	movs	r3, #48	; 0x30
 8005f36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80060e0 <_svfiprintf_r+0x1ec>
 8005f3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f3e:	f04f 0901 	mov.w	r9, #1
 8005f42:	4623      	mov	r3, r4
 8005f44:	469a      	mov	sl, r3
 8005f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f4a:	b10a      	cbz	r2, 8005f50 <_svfiprintf_r+0x5c>
 8005f4c:	2a25      	cmp	r2, #37	; 0x25
 8005f4e:	d1f9      	bne.n	8005f44 <_svfiprintf_r+0x50>
 8005f50:	ebba 0b04 	subs.w	fp, sl, r4
 8005f54:	d00b      	beq.n	8005f6e <_svfiprintf_r+0x7a>
 8005f56:	465b      	mov	r3, fp
 8005f58:	4622      	mov	r2, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f7ff ff6d 	bl	8005e3c <__ssputs_r>
 8005f62:	3001      	adds	r0, #1
 8005f64:	f000 80aa 	beq.w	80060bc <_svfiprintf_r+0x1c8>
 8005f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f6a:	445a      	add	r2, fp
 8005f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80a2 	beq.w	80060bc <_svfiprintf_r+0x1c8>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f82:	f10a 0a01 	add.w	sl, sl, #1
 8005f86:	9304      	str	r3, [sp, #16]
 8005f88:	9307      	str	r3, [sp, #28]
 8005f8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f8e:	931a      	str	r3, [sp, #104]	; 0x68
 8005f90:	4654      	mov	r4, sl
 8005f92:	2205      	movs	r2, #5
 8005f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f98:	4851      	ldr	r0, [pc, #324]	; (80060e0 <_svfiprintf_r+0x1ec>)
 8005f9a:	f7fa f921 	bl	80001e0 <memchr>
 8005f9e:	9a04      	ldr	r2, [sp, #16]
 8005fa0:	b9d8      	cbnz	r0, 8005fda <_svfiprintf_r+0xe6>
 8005fa2:	06d0      	lsls	r0, r2, #27
 8005fa4:	bf44      	itt	mi
 8005fa6:	2320      	movmi	r3, #32
 8005fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fac:	0711      	lsls	r1, r2, #28
 8005fae:	bf44      	itt	mi
 8005fb0:	232b      	movmi	r3, #43	; 0x2b
 8005fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8005fba:	2b2a      	cmp	r3, #42	; 0x2a
 8005fbc:	d015      	beq.n	8005fea <_svfiprintf_r+0xf6>
 8005fbe:	9a07      	ldr	r2, [sp, #28]
 8005fc0:	4654      	mov	r4, sl
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	f04f 0c0a 	mov.w	ip, #10
 8005fc8:	4621      	mov	r1, r4
 8005fca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fce:	3b30      	subs	r3, #48	; 0x30
 8005fd0:	2b09      	cmp	r3, #9
 8005fd2:	d94e      	bls.n	8006072 <_svfiprintf_r+0x17e>
 8005fd4:	b1b0      	cbz	r0, 8006004 <_svfiprintf_r+0x110>
 8005fd6:	9207      	str	r2, [sp, #28]
 8005fd8:	e014      	b.n	8006004 <_svfiprintf_r+0x110>
 8005fda:	eba0 0308 	sub.w	r3, r0, r8
 8005fde:	fa09 f303 	lsl.w	r3, r9, r3
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	46a2      	mov	sl, r4
 8005fe8:	e7d2      	b.n	8005f90 <_svfiprintf_r+0x9c>
 8005fea:	9b03      	ldr	r3, [sp, #12]
 8005fec:	1d19      	adds	r1, r3, #4
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	9103      	str	r1, [sp, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bfbb      	ittet	lt
 8005ff6:	425b      	neglt	r3, r3
 8005ff8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ffc:	9307      	strge	r3, [sp, #28]
 8005ffe:	9307      	strlt	r3, [sp, #28]
 8006000:	bfb8      	it	lt
 8006002:	9204      	strlt	r2, [sp, #16]
 8006004:	7823      	ldrb	r3, [r4, #0]
 8006006:	2b2e      	cmp	r3, #46	; 0x2e
 8006008:	d10c      	bne.n	8006024 <_svfiprintf_r+0x130>
 800600a:	7863      	ldrb	r3, [r4, #1]
 800600c:	2b2a      	cmp	r3, #42	; 0x2a
 800600e:	d135      	bne.n	800607c <_svfiprintf_r+0x188>
 8006010:	9b03      	ldr	r3, [sp, #12]
 8006012:	1d1a      	adds	r2, r3, #4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	9203      	str	r2, [sp, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	bfb8      	it	lt
 800601c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006020:	3402      	adds	r4, #2
 8006022:	9305      	str	r3, [sp, #20]
 8006024:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060f0 <_svfiprintf_r+0x1fc>
 8006028:	7821      	ldrb	r1, [r4, #0]
 800602a:	2203      	movs	r2, #3
 800602c:	4650      	mov	r0, sl
 800602e:	f7fa f8d7 	bl	80001e0 <memchr>
 8006032:	b140      	cbz	r0, 8006046 <_svfiprintf_r+0x152>
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	eba0 000a 	sub.w	r0, r0, sl
 800603a:	fa03 f000 	lsl.w	r0, r3, r0
 800603e:	9b04      	ldr	r3, [sp, #16]
 8006040:	4303      	orrs	r3, r0
 8006042:	3401      	adds	r4, #1
 8006044:	9304      	str	r3, [sp, #16]
 8006046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604a:	4826      	ldr	r0, [pc, #152]	; (80060e4 <_svfiprintf_r+0x1f0>)
 800604c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006050:	2206      	movs	r2, #6
 8006052:	f7fa f8c5 	bl	80001e0 <memchr>
 8006056:	2800      	cmp	r0, #0
 8006058:	d038      	beq.n	80060cc <_svfiprintf_r+0x1d8>
 800605a:	4b23      	ldr	r3, [pc, #140]	; (80060e8 <_svfiprintf_r+0x1f4>)
 800605c:	bb1b      	cbnz	r3, 80060a6 <_svfiprintf_r+0x1b2>
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	3307      	adds	r3, #7
 8006062:	f023 0307 	bic.w	r3, r3, #7
 8006066:	3308      	adds	r3, #8
 8006068:	9303      	str	r3, [sp, #12]
 800606a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800606c:	4433      	add	r3, r6
 800606e:	9309      	str	r3, [sp, #36]	; 0x24
 8006070:	e767      	b.n	8005f42 <_svfiprintf_r+0x4e>
 8006072:	fb0c 3202 	mla	r2, ip, r2, r3
 8006076:	460c      	mov	r4, r1
 8006078:	2001      	movs	r0, #1
 800607a:	e7a5      	b.n	8005fc8 <_svfiprintf_r+0xd4>
 800607c:	2300      	movs	r3, #0
 800607e:	3401      	adds	r4, #1
 8006080:	9305      	str	r3, [sp, #20]
 8006082:	4619      	mov	r1, r3
 8006084:	f04f 0c0a 	mov.w	ip, #10
 8006088:	4620      	mov	r0, r4
 800608a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800608e:	3a30      	subs	r2, #48	; 0x30
 8006090:	2a09      	cmp	r2, #9
 8006092:	d903      	bls.n	800609c <_svfiprintf_r+0x1a8>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0c5      	beq.n	8006024 <_svfiprintf_r+0x130>
 8006098:	9105      	str	r1, [sp, #20]
 800609a:	e7c3      	b.n	8006024 <_svfiprintf_r+0x130>
 800609c:	fb0c 2101 	mla	r1, ip, r1, r2
 80060a0:	4604      	mov	r4, r0
 80060a2:	2301      	movs	r3, #1
 80060a4:	e7f0      	b.n	8006088 <_svfiprintf_r+0x194>
 80060a6:	ab03      	add	r3, sp, #12
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	462a      	mov	r2, r5
 80060ac:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <_svfiprintf_r+0x1f8>)
 80060ae:	a904      	add	r1, sp, #16
 80060b0:	4638      	mov	r0, r7
 80060b2:	f3af 8000 	nop.w
 80060b6:	1c42      	adds	r2, r0, #1
 80060b8:	4606      	mov	r6, r0
 80060ba:	d1d6      	bne.n	800606a <_svfiprintf_r+0x176>
 80060bc:	89ab      	ldrh	r3, [r5, #12]
 80060be:	065b      	lsls	r3, r3, #25
 80060c0:	f53f af2c 	bmi.w	8005f1c <_svfiprintf_r+0x28>
 80060c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060c6:	b01d      	add	sp, #116	; 0x74
 80060c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060cc:	ab03      	add	r3, sp, #12
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	462a      	mov	r2, r5
 80060d2:	4b06      	ldr	r3, [pc, #24]	; (80060ec <_svfiprintf_r+0x1f8>)
 80060d4:	a904      	add	r1, sp, #16
 80060d6:	4638      	mov	r0, r7
 80060d8:	f000 f87a 	bl	80061d0 <_printf_i>
 80060dc:	e7eb      	b.n	80060b6 <_svfiprintf_r+0x1c2>
 80060de:	bf00      	nop
 80060e0:	080066bc 	.word	0x080066bc
 80060e4:	080066c6 	.word	0x080066c6
 80060e8:	00000000 	.word	0x00000000
 80060ec:	08005e3d 	.word	0x08005e3d
 80060f0:	080066c2 	.word	0x080066c2

080060f4 <_printf_common>:
 80060f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f8:	4616      	mov	r6, r2
 80060fa:	4699      	mov	r9, r3
 80060fc:	688a      	ldr	r2, [r1, #8]
 80060fe:	690b      	ldr	r3, [r1, #16]
 8006100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006104:	4293      	cmp	r3, r2
 8006106:	bfb8      	it	lt
 8006108:	4613      	movlt	r3, r2
 800610a:	6033      	str	r3, [r6, #0]
 800610c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006110:	4607      	mov	r7, r0
 8006112:	460c      	mov	r4, r1
 8006114:	b10a      	cbz	r2, 800611a <_printf_common+0x26>
 8006116:	3301      	adds	r3, #1
 8006118:	6033      	str	r3, [r6, #0]
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	0699      	lsls	r1, r3, #26
 800611e:	bf42      	ittt	mi
 8006120:	6833      	ldrmi	r3, [r6, #0]
 8006122:	3302      	addmi	r3, #2
 8006124:	6033      	strmi	r3, [r6, #0]
 8006126:	6825      	ldr	r5, [r4, #0]
 8006128:	f015 0506 	ands.w	r5, r5, #6
 800612c:	d106      	bne.n	800613c <_printf_common+0x48>
 800612e:	f104 0a19 	add.w	sl, r4, #25
 8006132:	68e3      	ldr	r3, [r4, #12]
 8006134:	6832      	ldr	r2, [r6, #0]
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	42ab      	cmp	r3, r5
 800613a:	dc26      	bgt.n	800618a <_printf_common+0x96>
 800613c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006140:	1e13      	subs	r3, r2, #0
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	bf18      	it	ne
 8006146:	2301      	movne	r3, #1
 8006148:	0692      	lsls	r2, r2, #26
 800614a:	d42b      	bmi.n	80061a4 <_printf_common+0xb0>
 800614c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006150:	4649      	mov	r1, r9
 8006152:	4638      	mov	r0, r7
 8006154:	47c0      	blx	r8
 8006156:	3001      	adds	r0, #1
 8006158:	d01e      	beq.n	8006198 <_printf_common+0xa4>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	68e5      	ldr	r5, [r4, #12]
 800615e:	6832      	ldr	r2, [r6, #0]
 8006160:	f003 0306 	and.w	r3, r3, #6
 8006164:	2b04      	cmp	r3, #4
 8006166:	bf08      	it	eq
 8006168:	1aad      	subeq	r5, r5, r2
 800616a:	68a3      	ldr	r3, [r4, #8]
 800616c:	6922      	ldr	r2, [r4, #16]
 800616e:	bf0c      	ite	eq
 8006170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006174:	2500      	movne	r5, #0
 8006176:	4293      	cmp	r3, r2
 8006178:	bfc4      	itt	gt
 800617a:	1a9b      	subgt	r3, r3, r2
 800617c:	18ed      	addgt	r5, r5, r3
 800617e:	2600      	movs	r6, #0
 8006180:	341a      	adds	r4, #26
 8006182:	42b5      	cmp	r5, r6
 8006184:	d11a      	bne.n	80061bc <_printf_common+0xc8>
 8006186:	2000      	movs	r0, #0
 8006188:	e008      	b.n	800619c <_printf_common+0xa8>
 800618a:	2301      	movs	r3, #1
 800618c:	4652      	mov	r2, sl
 800618e:	4649      	mov	r1, r9
 8006190:	4638      	mov	r0, r7
 8006192:	47c0      	blx	r8
 8006194:	3001      	adds	r0, #1
 8006196:	d103      	bne.n	80061a0 <_printf_common+0xac>
 8006198:	f04f 30ff 	mov.w	r0, #4294967295
 800619c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a0:	3501      	adds	r5, #1
 80061a2:	e7c6      	b.n	8006132 <_printf_common+0x3e>
 80061a4:	18e1      	adds	r1, r4, r3
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	2030      	movs	r0, #48	; 0x30
 80061aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061ae:	4422      	add	r2, r4
 80061b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061b8:	3302      	adds	r3, #2
 80061ba:	e7c7      	b.n	800614c <_printf_common+0x58>
 80061bc:	2301      	movs	r3, #1
 80061be:	4622      	mov	r2, r4
 80061c0:	4649      	mov	r1, r9
 80061c2:	4638      	mov	r0, r7
 80061c4:	47c0      	blx	r8
 80061c6:	3001      	adds	r0, #1
 80061c8:	d0e6      	beq.n	8006198 <_printf_common+0xa4>
 80061ca:	3601      	adds	r6, #1
 80061cc:	e7d9      	b.n	8006182 <_printf_common+0x8e>
	...

080061d0 <_printf_i>:
 80061d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	460c      	mov	r4, r1
 80061d6:	4691      	mov	r9, r2
 80061d8:	7e27      	ldrb	r7, [r4, #24]
 80061da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061dc:	2f78      	cmp	r7, #120	; 0x78
 80061de:	4680      	mov	r8, r0
 80061e0:	469a      	mov	sl, r3
 80061e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061e6:	d807      	bhi.n	80061f8 <_printf_i+0x28>
 80061e8:	2f62      	cmp	r7, #98	; 0x62
 80061ea:	d80a      	bhi.n	8006202 <_printf_i+0x32>
 80061ec:	2f00      	cmp	r7, #0
 80061ee:	f000 80d8 	beq.w	80063a2 <_printf_i+0x1d2>
 80061f2:	2f58      	cmp	r7, #88	; 0x58
 80061f4:	f000 80a3 	beq.w	800633e <_printf_i+0x16e>
 80061f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006200:	e03a      	b.n	8006278 <_printf_i+0xa8>
 8006202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006206:	2b15      	cmp	r3, #21
 8006208:	d8f6      	bhi.n	80061f8 <_printf_i+0x28>
 800620a:	a001      	add	r0, pc, #4	; (adr r0, 8006210 <_printf_i+0x40>)
 800620c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006210:	08006269 	.word	0x08006269
 8006214:	0800627d 	.word	0x0800627d
 8006218:	080061f9 	.word	0x080061f9
 800621c:	080061f9 	.word	0x080061f9
 8006220:	080061f9 	.word	0x080061f9
 8006224:	080061f9 	.word	0x080061f9
 8006228:	0800627d 	.word	0x0800627d
 800622c:	080061f9 	.word	0x080061f9
 8006230:	080061f9 	.word	0x080061f9
 8006234:	080061f9 	.word	0x080061f9
 8006238:	080061f9 	.word	0x080061f9
 800623c:	08006389 	.word	0x08006389
 8006240:	080062ad 	.word	0x080062ad
 8006244:	0800636b 	.word	0x0800636b
 8006248:	080061f9 	.word	0x080061f9
 800624c:	080061f9 	.word	0x080061f9
 8006250:	080063ab 	.word	0x080063ab
 8006254:	080061f9 	.word	0x080061f9
 8006258:	080062ad 	.word	0x080062ad
 800625c:	080061f9 	.word	0x080061f9
 8006260:	080061f9 	.word	0x080061f9
 8006264:	08006373 	.word	0x08006373
 8006268:	680b      	ldr	r3, [r1, #0]
 800626a:	1d1a      	adds	r2, r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	600a      	str	r2, [r1, #0]
 8006270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006278:	2301      	movs	r3, #1
 800627a:	e0a3      	b.n	80063c4 <_printf_i+0x1f4>
 800627c:	6825      	ldr	r5, [r4, #0]
 800627e:	6808      	ldr	r0, [r1, #0]
 8006280:	062e      	lsls	r6, r5, #24
 8006282:	f100 0304 	add.w	r3, r0, #4
 8006286:	d50a      	bpl.n	800629e <_printf_i+0xce>
 8006288:	6805      	ldr	r5, [r0, #0]
 800628a:	600b      	str	r3, [r1, #0]
 800628c:	2d00      	cmp	r5, #0
 800628e:	da03      	bge.n	8006298 <_printf_i+0xc8>
 8006290:	232d      	movs	r3, #45	; 0x2d
 8006292:	426d      	negs	r5, r5
 8006294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006298:	485e      	ldr	r0, [pc, #376]	; (8006414 <_printf_i+0x244>)
 800629a:	230a      	movs	r3, #10
 800629c:	e019      	b.n	80062d2 <_printf_i+0x102>
 800629e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062a2:	6805      	ldr	r5, [r0, #0]
 80062a4:	600b      	str	r3, [r1, #0]
 80062a6:	bf18      	it	ne
 80062a8:	b22d      	sxthne	r5, r5
 80062aa:	e7ef      	b.n	800628c <_printf_i+0xbc>
 80062ac:	680b      	ldr	r3, [r1, #0]
 80062ae:	6825      	ldr	r5, [r4, #0]
 80062b0:	1d18      	adds	r0, r3, #4
 80062b2:	6008      	str	r0, [r1, #0]
 80062b4:	0628      	lsls	r0, r5, #24
 80062b6:	d501      	bpl.n	80062bc <_printf_i+0xec>
 80062b8:	681d      	ldr	r5, [r3, #0]
 80062ba:	e002      	b.n	80062c2 <_printf_i+0xf2>
 80062bc:	0669      	lsls	r1, r5, #25
 80062be:	d5fb      	bpl.n	80062b8 <_printf_i+0xe8>
 80062c0:	881d      	ldrh	r5, [r3, #0]
 80062c2:	4854      	ldr	r0, [pc, #336]	; (8006414 <_printf_i+0x244>)
 80062c4:	2f6f      	cmp	r7, #111	; 0x6f
 80062c6:	bf0c      	ite	eq
 80062c8:	2308      	moveq	r3, #8
 80062ca:	230a      	movne	r3, #10
 80062cc:	2100      	movs	r1, #0
 80062ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062d2:	6866      	ldr	r6, [r4, #4]
 80062d4:	60a6      	str	r6, [r4, #8]
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	bfa2      	ittt	ge
 80062da:	6821      	ldrge	r1, [r4, #0]
 80062dc:	f021 0104 	bicge.w	r1, r1, #4
 80062e0:	6021      	strge	r1, [r4, #0]
 80062e2:	b90d      	cbnz	r5, 80062e8 <_printf_i+0x118>
 80062e4:	2e00      	cmp	r6, #0
 80062e6:	d04d      	beq.n	8006384 <_printf_i+0x1b4>
 80062e8:	4616      	mov	r6, r2
 80062ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80062ee:	fb03 5711 	mls	r7, r3, r1, r5
 80062f2:	5dc7      	ldrb	r7, [r0, r7]
 80062f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062f8:	462f      	mov	r7, r5
 80062fa:	42bb      	cmp	r3, r7
 80062fc:	460d      	mov	r5, r1
 80062fe:	d9f4      	bls.n	80062ea <_printf_i+0x11a>
 8006300:	2b08      	cmp	r3, #8
 8006302:	d10b      	bne.n	800631c <_printf_i+0x14c>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	07df      	lsls	r7, r3, #31
 8006308:	d508      	bpl.n	800631c <_printf_i+0x14c>
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	6861      	ldr	r1, [r4, #4]
 800630e:	4299      	cmp	r1, r3
 8006310:	bfde      	ittt	le
 8006312:	2330      	movle	r3, #48	; 0x30
 8006314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800631c:	1b92      	subs	r2, r2, r6
 800631e:	6122      	str	r2, [r4, #16]
 8006320:	f8cd a000 	str.w	sl, [sp]
 8006324:	464b      	mov	r3, r9
 8006326:	aa03      	add	r2, sp, #12
 8006328:	4621      	mov	r1, r4
 800632a:	4640      	mov	r0, r8
 800632c:	f7ff fee2 	bl	80060f4 <_printf_common>
 8006330:	3001      	adds	r0, #1
 8006332:	d14c      	bne.n	80063ce <_printf_i+0x1fe>
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	b004      	add	sp, #16
 800633a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633e:	4835      	ldr	r0, [pc, #212]	; (8006414 <_printf_i+0x244>)
 8006340:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	680e      	ldr	r6, [r1, #0]
 8006348:	061f      	lsls	r7, r3, #24
 800634a:	f856 5b04 	ldr.w	r5, [r6], #4
 800634e:	600e      	str	r6, [r1, #0]
 8006350:	d514      	bpl.n	800637c <_printf_i+0x1ac>
 8006352:	07d9      	lsls	r1, r3, #31
 8006354:	bf44      	itt	mi
 8006356:	f043 0320 	orrmi.w	r3, r3, #32
 800635a:	6023      	strmi	r3, [r4, #0]
 800635c:	b91d      	cbnz	r5, 8006366 <_printf_i+0x196>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	f023 0320 	bic.w	r3, r3, #32
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	2310      	movs	r3, #16
 8006368:	e7b0      	b.n	80062cc <_printf_i+0xfc>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	f043 0320 	orr.w	r3, r3, #32
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	2378      	movs	r3, #120	; 0x78
 8006374:	4828      	ldr	r0, [pc, #160]	; (8006418 <_printf_i+0x248>)
 8006376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800637a:	e7e3      	b.n	8006344 <_printf_i+0x174>
 800637c:	065e      	lsls	r6, r3, #25
 800637e:	bf48      	it	mi
 8006380:	b2ad      	uxthmi	r5, r5
 8006382:	e7e6      	b.n	8006352 <_printf_i+0x182>
 8006384:	4616      	mov	r6, r2
 8006386:	e7bb      	b.n	8006300 <_printf_i+0x130>
 8006388:	680b      	ldr	r3, [r1, #0]
 800638a:	6826      	ldr	r6, [r4, #0]
 800638c:	6960      	ldr	r0, [r4, #20]
 800638e:	1d1d      	adds	r5, r3, #4
 8006390:	600d      	str	r5, [r1, #0]
 8006392:	0635      	lsls	r5, r6, #24
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	d501      	bpl.n	800639c <_printf_i+0x1cc>
 8006398:	6018      	str	r0, [r3, #0]
 800639a:	e002      	b.n	80063a2 <_printf_i+0x1d2>
 800639c:	0671      	lsls	r1, r6, #25
 800639e:	d5fb      	bpl.n	8006398 <_printf_i+0x1c8>
 80063a0:	8018      	strh	r0, [r3, #0]
 80063a2:	2300      	movs	r3, #0
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	4616      	mov	r6, r2
 80063a8:	e7ba      	b.n	8006320 <_printf_i+0x150>
 80063aa:	680b      	ldr	r3, [r1, #0]
 80063ac:	1d1a      	adds	r2, r3, #4
 80063ae:	600a      	str	r2, [r1, #0]
 80063b0:	681e      	ldr	r6, [r3, #0]
 80063b2:	6862      	ldr	r2, [r4, #4]
 80063b4:	2100      	movs	r1, #0
 80063b6:	4630      	mov	r0, r6
 80063b8:	f7f9 ff12 	bl	80001e0 <memchr>
 80063bc:	b108      	cbz	r0, 80063c2 <_printf_i+0x1f2>
 80063be:	1b80      	subs	r0, r0, r6
 80063c0:	6060      	str	r0, [r4, #4]
 80063c2:	6863      	ldr	r3, [r4, #4]
 80063c4:	6123      	str	r3, [r4, #16]
 80063c6:	2300      	movs	r3, #0
 80063c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063cc:	e7a8      	b.n	8006320 <_printf_i+0x150>
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	4632      	mov	r2, r6
 80063d2:	4649      	mov	r1, r9
 80063d4:	4640      	mov	r0, r8
 80063d6:	47d0      	blx	sl
 80063d8:	3001      	adds	r0, #1
 80063da:	d0ab      	beq.n	8006334 <_printf_i+0x164>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	079b      	lsls	r3, r3, #30
 80063e0:	d413      	bmi.n	800640a <_printf_i+0x23a>
 80063e2:	68e0      	ldr	r0, [r4, #12]
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	4298      	cmp	r0, r3
 80063e8:	bfb8      	it	lt
 80063ea:	4618      	movlt	r0, r3
 80063ec:	e7a4      	b.n	8006338 <_printf_i+0x168>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4632      	mov	r2, r6
 80063f2:	4649      	mov	r1, r9
 80063f4:	4640      	mov	r0, r8
 80063f6:	47d0      	blx	sl
 80063f8:	3001      	adds	r0, #1
 80063fa:	d09b      	beq.n	8006334 <_printf_i+0x164>
 80063fc:	3501      	adds	r5, #1
 80063fe:	68e3      	ldr	r3, [r4, #12]
 8006400:	9903      	ldr	r1, [sp, #12]
 8006402:	1a5b      	subs	r3, r3, r1
 8006404:	42ab      	cmp	r3, r5
 8006406:	dcf2      	bgt.n	80063ee <_printf_i+0x21e>
 8006408:	e7eb      	b.n	80063e2 <_printf_i+0x212>
 800640a:	2500      	movs	r5, #0
 800640c:	f104 0619 	add.w	r6, r4, #25
 8006410:	e7f5      	b.n	80063fe <_printf_i+0x22e>
 8006412:	bf00      	nop
 8006414:	080066cd 	.word	0x080066cd
 8006418:	080066de 	.word	0x080066de

0800641c <memcpy>:
 800641c:	440a      	add	r2, r1
 800641e:	4291      	cmp	r1, r2
 8006420:	f100 33ff 	add.w	r3, r0, #4294967295
 8006424:	d100      	bne.n	8006428 <memcpy+0xc>
 8006426:	4770      	bx	lr
 8006428:	b510      	push	{r4, lr}
 800642a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800642e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006432:	4291      	cmp	r1, r2
 8006434:	d1f9      	bne.n	800642a <memcpy+0xe>
 8006436:	bd10      	pop	{r4, pc}

08006438 <memmove>:
 8006438:	4288      	cmp	r0, r1
 800643a:	b510      	push	{r4, lr}
 800643c:	eb01 0402 	add.w	r4, r1, r2
 8006440:	d902      	bls.n	8006448 <memmove+0x10>
 8006442:	4284      	cmp	r4, r0
 8006444:	4623      	mov	r3, r4
 8006446:	d807      	bhi.n	8006458 <memmove+0x20>
 8006448:	1e43      	subs	r3, r0, #1
 800644a:	42a1      	cmp	r1, r4
 800644c:	d008      	beq.n	8006460 <memmove+0x28>
 800644e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006456:	e7f8      	b.n	800644a <memmove+0x12>
 8006458:	4402      	add	r2, r0
 800645a:	4601      	mov	r1, r0
 800645c:	428a      	cmp	r2, r1
 800645e:	d100      	bne.n	8006462 <memmove+0x2a>
 8006460:	bd10      	pop	{r4, pc}
 8006462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800646a:	e7f7      	b.n	800645c <memmove+0x24>

0800646c <_free_r>:
 800646c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800646e:	2900      	cmp	r1, #0
 8006470:	d048      	beq.n	8006504 <_free_r+0x98>
 8006472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006476:	9001      	str	r0, [sp, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f1a1 0404 	sub.w	r4, r1, #4
 800647e:	bfb8      	it	lt
 8006480:	18e4      	addlt	r4, r4, r3
 8006482:	f000 f8d3 	bl	800662c <__malloc_lock>
 8006486:	4a20      	ldr	r2, [pc, #128]	; (8006508 <_free_r+0x9c>)
 8006488:	9801      	ldr	r0, [sp, #4]
 800648a:	6813      	ldr	r3, [r2, #0]
 800648c:	4615      	mov	r5, r2
 800648e:	b933      	cbnz	r3, 800649e <_free_r+0x32>
 8006490:	6063      	str	r3, [r4, #4]
 8006492:	6014      	str	r4, [r2, #0]
 8006494:	b003      	add	sp, #12
 8006496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800649a:	f000 b8cd 	b.w	8006638 <__malloc_unlock>
 800649e:	42a3      	cmp	r3, r4
 80064a0:	d90b      	bls.n	80064ba <_free_r+0x4e>
 80064a2:	6821      	ldr	r1, [r4, #0]
 80064a4:	1862      	adds	r2, r4, r1
 80064a6:	4293      	cmp	r3, r2
 80064a8:	bf04      	itt	eq
 80064aa:	681a      	ldreq	r2, [r3, #0]
 80064ac:	685b      	ldreq	r3, [r3, #4]
 80064ae:	6063      	str	r3, [r4, #4]
 80064b0:	bf04      	itt	eq
 80064b2:	1852      	addeq	r2, r2, r1
 80064b4:	6022      	streq	r2, [r4, #0]
 80064b6:	602c      	str	r4, [r5, #0]
 80064b8:	e7ec      	b.n	8006494 <_free_r+0x28>
 80064ba:	461a      	mov	r2, r3
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	b10b      	cbz	r3, 80064c4 <_free_r+0x58>
 80064c0:	42a3      	cmp	r3, r4
 80064c2:	d9fa      	bls.n	80064ba <_free_r+0x4e>
 80064c4:	6811      	ldr	r1, [r2, #0]
 80064c6:	1855      	adds	r5, r2, r1
 80064c8:	42a5      	cmp	r5, r4
 80064ca:	d10b      	bne.n	80064e4 <_free_r+0x78>
 80064cc:	6824      	ldr	r4, [r4, #0]
 80064ce:	4421      	add	r1, r4
 80064d0:	1854      	adds	r4, r2, r1
 80064d2:	42a3      	cmp	r3, r4
 80064d4:	6011      	str	r1, [r2, #0]
 80064d6:	d1dd      	bne.n	8006494 <_free_r+0x28>
 80064d8:	681c      	ldr	r4, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	6053      	str	r3, [r2, #4]
 80064de:	4421      	add	r1, r4
 80064e0:	6011      	str	r1, [r2, #0]
 80064e2:	e7d7      	b.n	8006494 <_free_r+0x28>
 80064e4:	d902      	bls.n	80064ec <_free_r+0x80>
 80064e6:	230c      	movs	r3, #12
 80064e8:	6003      	str	r3, [r0, #0]
 80064ea:	e7d3      	b.n	8006494 <_free_r+0x28>
 80064ec:	6825      	ldr	r5, [r4, #0]
 80064ee:	1961      	adds	r1, r4, r5
 80064f0:	428b      	cmp	r3, r1
 80064f2:	bf04      	itt	eq
 80064f4:	6819      	ldreq	r1, [r3, #0]
 80064f6:	685b      	ldreq	r3, [r3, #4]
 80064f8:	6063      	str	r3, [r4, #4]
 80064fa:	bf04      	itt	eq
 80064fc:	1949      	addeq	r1, r1, r5
 80064fe:	6021      	streq	r1, [r4, #0]
 8006500:	6054      	str	r4, [r2, #4]
 8006502:	e7c7      	b.n	8006494 <_free_r+0x28>
 8006504:	b003      	add	sp, #12
 8006506:	bd30      	pop	{r4, r5, pc}
 8006508:	20000148 	.word	0x20000148

0800650c <_malloc_r>:
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650e:	1ccd      	adds	r5, r1, #3
 8006510:	f025 0503 	bic.w	r5, r5, #3
 8006514:	3508      	adds	r5, #8
 8006516:	2d0c      	cmp	r5, #12
 8006518:	bf38      	it	cc
 800651a:	250c      	movcc	r5, #12
 800651c:	2d00      	cmp	r5, #0
 800651e:	4606      	mov	r6, r0
 8006520:	db01      	blt.n	8006526 <_malloc_r+0x1a>
 8006522:	42a9      	cmp	r1, r5
 8006524:	d903      	bls.n	800652e <_malloc_r+0x22>
 8006526:	230c      	movs	r3, #12
 8006528:	6033      	str	r3, [r6, #0]
 800652a:	2000      	movs	r0, #0
 800652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800652e:	f000 f87d 	bl	800662c <__malloc_lock>
 8006532:	4921      	ldr	r1, [pc, #132]	; (80065b8 <_malloc_r+0xac>)
 8006534:	680a      	ldr	r2, [r1, #0]
 8006536:	4614      	mov	r4, r2
 8006538:	b99c      	cbnz	r4, 8006562 <_malloc_r+0x56>
 800653a:	4f20      	ldr	r7, [pc, #128]	; (80065bc <_malloc_r+0xb0>)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	b923      	cbnz	r3, 800654a <_malloc_r+0x3e>
 8006540:	4621      	mov	r1, r4
 8006542:	4630      	mov	r0, r6
 8006544:	f000 f862 	bl	800660c <_sbrk_r>
 8006548:	6038      	str	r0, [r7, #0]
 800654a:	4629      	mov	r1, r5
 800654c:	4630      	mov	r0, r6
 800654e:	f000 f85d 	bl	800660c <_sbrk_r>
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	d123      	bne.n	800659e <_malloc_r+0x92>
 8006556:	230c      	movs	r3, #12
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	4630      	mov	r0, r6
 800655c:	f000 f86c 	bl	8006638 <__malloc_unlock>
 8006560:	e7e3      	b.n	800652a <_malloc_r+0x1e>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	1b5b      	subs	r3, r3, r5
 8006566:	d417      	bmi.n	8006598 <_malloc_r+0x8c>
 8006568:	2b0b      	cmp	r3, #11
 800656a:	d903      	bls.n	8006574 <_malloc_r+0x68>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	441c      	add	r4, r3
 8006570:	6025      	str	r5, [r4, #0]
 8006572:	e004      	b.n	800657e <_malloc_r+0x72>
 8006574:	6863      	ldr	r3, [r4, #4]
 8006576:	42a2      	cmp	r2, r4
 8006578:	bf0c      	ite	eq
 800657a:	600b      	streq	r3, [r1, #0]
 800657c:	6053      	strne	r3, [r2, #4]
 800657e:	4630      	mov	r0, r6
 8006580:	f000 f85a 	bl	8006638 <__malloc_unlock>
 8006584:	f104 000b 	add.w	r0, r4, #11
 8006588:	1d23      	adds	r3, r4, #4
 800658a:	f020 0007 	bic.w	r0, r0, #7
 800658e:	1ac2      	subs	r2, r0, r3
 8006590:	d0cc      	beq.n	800652c <_malloc_r+0x20>
 8006592:	1a1b      	subs	r3, r3, r0
 8006594:	50a3      	str	r3, [r4, r2]
 8006596:	e7c9      	b.n	800652c <_malloc_r+0x20>
 8006598:	4622      	mov	r2, r4
 800659a:	6864      	ldr	r4, [r4, #4]
 800659c:	e7cc      	b.n	8006538 <_malloc_r+0x2c>
 800659e:	1cc4      	adds	r4, r0, #3
 80065a0:	f024 0403 	bic.w	r4, r4, #3
 80065a4:	42a0      	cmp	r0, r4
 80065a6:	d0e3      	beq.n	8006570 <_malloc_r+0x64>
 80065a8:	1a21      	subs	r1, r4, r0
 80065aa:	4630      	mov	r0, r6
 80065ac:	f000 f82e 	bl	800660c <_sbrk_r>
 80065b0:	3001      	adds	r0, #1
 80065b2:	d1dd      	bne.n	8006570 <_malloc_r+0x64>
 80065b4:	e7cf      	b.n	8006556 <_malloc_r+0x4a>
 80065b6:	bf00      	nop
 80065b8:	20000148 	.word	0x20000148
 80065bc:	2000014c 	.word	0x2000014c

080065c0 <_realloc_r>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	4607      	mov	r7, r0
 80065c4:	4614      	mov	r4, r2
 80065c6:	460e      	mov	r6, r1
 80065c8:	b921      	cbnz	r1, 80065d4 <_realloc_r+0x14>
 80065ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065ce:	4611      	mov	r1, r2
 80065d0:	f7ff bf9c 	b.w	800650c <_malloc_r>
 80065d4:	b922      	cbnz	r2, 80065e0 <_realloc_r+0x20>
 80065d6:	f7ff ff49 	bl	800646c <_free_r>
 80065da:	4625      	mov	r5, r4
 80065dc:	4628      	mov	r0, r5
 80065de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065e0:	f000 f830 	bl	8006644 <_malloc_usable_size_r>
 80065e4:	42a0      	cmp	r0, r4
 80065e6:	d20f      	bcs.n	8006608 <_realloc_r+0x48>
 80065e8:	4621      	mov	r1, r4
 80065ea:	4638      	mov	r0, r7
 80065ec:	f7ff ff8e 	bl	800650c <_malloc_r>
 80065f0:	4605      	mov	r5, r0
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d0f2      	beq.n	80065dc <_realloc_r+0x1c>
 80065f6:	4631      	mov	r1, r6
 80065f8:	4622      	mov	r2, r4
 80065fa:	f7ff ff0f 	bl	800641c <memcpy>
 80065fe:	4631      	mov	r1, r6
 8006600:	4638      	mov	r0, r7
 8006602:	f7ff ff33 	bl	800646c <_free_r>
 8006606:	e7e9      	b.n	80065dc <_realloc_r+0x1c>
 8006608:	4635      	mov	r5, r6
 800660a:	e7e7      	b.n	80065dc <_realloc_r+0x1c>

0800660c <_sbrk_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d06      	ldr	r5, [pc, #24]	; (8006628 <_sbrk_r+0x1c>)
 8006610:	2300      	movs	r3, #0
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	602b      	str	r3, [r5, #0]
 8006618:	f7fb f998 	bl	800194c <_sbrk>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d102      	bne.n	8006626 <_sbrk_r+0x1a>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	b103      	cbz	r3, 8006626 <_sbrk_r+0x1a>
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	20000380 	.word	0x20000380

0800662c <__malloc_lock>:
 800662c:	4801      	ldr	r0, [pc, #4]	; (8006634 <__malloc_lock+0x8>)
 800662e:	f000 b811 	b.w	8006654 <__retarget_lock_acquire_recursive>
 8006632:	bf00      	nop
 8006634:	20000388 	.word	0x20000388

08006638 <__malloc_unlock>:
 8006638:	4801      	ldr	r0, [pc, #4]	; (8006640 <__malloc_unlock+0x8>)
 800663a:	f000 b80c 	b.w	8006656 <__retarget_lock_release_recursive>
 800663e:	bf00      	nop
 8006640:	20000388 	.word	0x20000388

08006644 <_malloc_usable_size_r>:
 8006644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006648:	1f18      	subs	r0, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	bfbc      	itt	lt
 800664e:	580b      	ldrlt	r3, [r1, r0]
 8006650:	18c0      	addlt	r0, r0, r3
 8006652:	4770      	bx	lr

08006654 <__retarget_lock_acquire_recursive>:
 8006654:	4770      	bx	lr

08006656 <__retarget_lock_release_recursive>:
 8006656:	4770      	bx	lr

08006658 <_init>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr

08006664 <_fini>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	bf00      	nop
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr
