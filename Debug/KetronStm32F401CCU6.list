
KetronStm32F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004634  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f8  080047f8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004800  08004800  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000024  0800482c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800482c  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cb9  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000299c  00000000  00000000  00032d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  000356b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00036898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b14  00000000  00000000  000379c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143a2  00000000  00000000  000504dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9fb  00000000  00000000  0006487e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100279  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be8  00000000  00000000  001002cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080047b0 	.word	0x080047b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080047b0 	.word	0x080047b0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <Ringbuf_init+0x3c>)
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <Ringbuf_init+0x40>)
 80004d4:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <Ringbuf_init+0x44>)
 80004d8:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <Ringbuf_init+0x48>)
 80004da:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <Ringbuf_init+0x4c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <Ringbuf_init+0x4c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f042 0201 	orr.w	r2, r2, #1
 80004ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <Ringbuf_init+0x4c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	68da      	ldr	r2, [r3, #12]
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <Ringbuf_init+0x4c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f042 0220 	orr.w	r2, r2, #32
 80004fa:	60da      	str	r2, [r3, #12]
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	200000e4 	.word	0x200000e4
 800050c:	20000040 	.word	0x20000040
 8000510:	200000e0 	.word	0x200000e0
 8000514:	20000088 	.word	0x20000088
 8000518:	20000234 	.word	0x20000234

0800051c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	6039      	str	r1, [r7, #0]
 8000526:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	3301      	adds	r3, #1
 800052e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000532:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	429a      	cmp	r2, r3
 800053c:	d007      	beq.n	800054e <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	79f9      	ldrb	r1, [r7, #7]
 8000546:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <Uart_read+0x4c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <Uart_read+0x4c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800056e:	429a      	cmp	r2, r3
 8000570:	d102      	bne.n	8000578 <Uart_read+0x1c>
  {
    return -1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	e010      	b.n	800059a <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <Uart_read+0x4c>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <Uart_read+0x4c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000582:	5cd3      	ldrb	r3, [r2, r3]
 8000584:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <Uart_read+0x4c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800058c:	1c5a      	adds	r2, r3, #1
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <Uart_read+0x4c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000596:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000598:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000e4 	.word	0x200000e4

080005ac <Uart_write>:

/* writes a single character to the uart and increments head
 */
void Uart_write(int c)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db21      	blt.n	80005fe <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <Uart_write+0x60>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	3301      	adds	r3, #1
 80005c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005c6:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 80005c8:	bf00      	nop
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <Uart_write+0x60>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d0f9      	beq.n	80005ca <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <Uart_write+0x60>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <Uart_write+0x60>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	b2c9      	uxtb	r1, r1
 80005e4:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <Uart_write+0x60>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <Uart_write+0x64>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68da      	ldr	r2, [r3, #12]
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <Uart_write+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005fc:	60da      	str	r2, [r3, #12]
	}
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200000e0 	.word	0x200000e0
 8000610:	20000234 	.word	0x20000234

08000614 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <IsDataAvailable+0x2c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <IsDataAvailable+0x2c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	b29b      	uxth	r3, r3
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	b29b      	uxth	r3, r3
 800062c:	3340      	adds	r3, #64	; 0x40
 800062e:	b29b      	uxth	r3, r3
 8000630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200000e4 	.word	0x200000e4

08000644 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	f003 0320 	and.w	r3, r3, #32
 8000662:	2b00      	cmp	r3, #0
 8000664:	d013      	beq.n	800068e <Uart_isr+0x4a>
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	f003 0320 	and.w	r3, r3, #32
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00e      	beq.n	800068e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <Uart_isr+0xac>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff48 	bl	800051c <store_char>
        return;
 800068c:	e02c      	b.n	80006e8 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000694:	2b00      	cmp	r3, #0
 8000696:	d027      	beq.n	80006e8 <Uart_isr+0xa4>
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d022      	beq.n	80006e8 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <Uart_isr+0xb0>)
 80006a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <Uart_isr+0xb0>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d108      	bne.n	80006c0 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	68da      	ldr	r2, [r3, #12]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006bc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80006be:	e012      	b.n	80006e6 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <Uart_isr+0xb0>)
 80006c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c4:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <Uart_isr+0xb0>)
 80006c6:	5cd3      	ldrb	r3, [r2, r3]
 80006c8:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <Uart_isr+0xb0>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	3301      	adds	r3, #1
 80006d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <Uart_isr+0xb0>)
 80006d6:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	7bba      	ldrb	r2, [r7, #14]
 80006e4:	605a      	str	r2, [r3, #4]
    	return;
 80006e6:	bf00      	nop
    }
}
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000e4 	.word	0x200000e4
 80006f4:	20000088 	.word	0x20000088

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80006fe:	4b50      	ldr	r3, [pc, #320]	; (8000840 <main+0x148>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	4a4f      	ldr	r2, [pc, #316]	; (8000840 <main+0x148>)
 8000704:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000708:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 800070a:	4b4e      	ldr	r3, [pc, #312]	; (8000844 <main+0x14c>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000710:	4b4c      	ldr	r3, [pc, #304]	; (8000844 <main+0x14c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a4b      	ldr	r2, [pc, #300]	; (8000844 <main+0x14c>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f001 fa32 	bl	8001b84 <HAL_Init>

  /* USER CODE BEGIN Init */
	uint32_t adc0 = 0, adc1 = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
	int c;
	unsigned char ch;
	unsigned char len = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	71bb      	strb	r3, [r7, #6]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f89a 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f000 fa74 	bl	8000c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000734:	f000 fa58 	bl	8000be8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000738:	f000 f952 	bl	80009e0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800073c:	f000 f97e 	bl	8000a3c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000740:	f000 f8fa 	bl	8000938 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000744:	f000 fa26 	bl	8000b94 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000748:	f000 f9d8 	bl	8000afc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	Ringbuf_init();
 800074c:	f7ff febe 	bl	80004cc <Ringbuf_init>
	TM_KEYPAD_Init();
 8000750:	f001 f8f0 	bl	8001934 <TM_KEYPAD_Init>
	TM_HD44780_Init(16, 2);
 8000754:	2102      	movs	r1, #2
 8000756:	2010      	movs	r0, #16
 8000758:	f000 ff22 	bl	80015a0 <TM_HD44780_Init>
	htim1.Instance->CNT = 32384;
 800075c:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <main+0x150>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f44f 42fd 	mov.w	r2, #32384	; 0x7e80
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000766:	213c      	movs	r1, #60	; 0x3c
 8000768:	4837      	ldr	r0, [pc, #220]	; (8000848 <main+0x150>)
 800076a:	f003 f991 	bl	8003a90 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 800076e:	4837      	ldr	r0, [pc, #220]	; (800084c <main+0x154>)
 8000770:	f003 f82c 	bl	80037cc <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start(&hadc1);
 8000774:	4836      	ldr	r0, [pc, #216]	; (8000850 <main+0x158>)
 8000776:	f001 fabb 	bl	8001cf0 <HAL_ADC_Start>

	TM_HD44780_Clear();
 800077a:	f000 ff77 	bl	800166c <TM_HD44780_Clear>
	TM_HD44780_Puts(0, 0, "Ketron");
 800077e:	4a35      	ldr	r2, [pc, #212]	; (8000854 <main+0x15c>)
 8000780:	2100      	movs	r1, #0
 8000782:	2000      	movs	r0, #0
 8000784:	f000 ff7e 	bl	8001684 <TM_HD44780_Puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

	key = TM_KEYPAD_Read();
 8000788:	f001 f8dc 	bl	8001944 <TM_KEYPAD_Read>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	4b31      	ldr	r3, [pc, #196]	; (8000858 <main+0x160>)
 8000792:	701a      	strb	r2, [r3, #0]
	switch(key){
 8000794:	4b30      	ldr	r3, [pc, #192]	; (8000858 <main+0x160>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b0b      	cmp	r3, #11
 800079a:	d012      	beq.n	80007c2 <main+0xca>
 800079c:	2b0b      	cmp	r3, #11
 800079e:	dc12      	bgt.n	80007c6 <main+0xce>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <main+0xb2>
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d006      	beq.n	80007b6 <main+0xbe>
		TM_HD44780_Puts(0, 0, "1");
		break;
	case TM_KEYPAD_Button_HASH:
		break;
	default:
		break;
 80007a8:	e00d      	b.n	80007c6 <main+0xce>
		TM_HD44780_Puts(0, 0, "0");
 80007aa:	4a2c      	ldr	r2, [pc, #176]	; (800085c <main+0x164>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 ff68 	bl	8001684 <TM_HD44780_Puts>
		break;
 80007b4:	e008      	b.n	80007c8 <main+0xd0>
		TM_HD44780_Puts(0, 0, "1");
 80007b6:	4a2a      	ldr	r2, [pc, #168]	; (8000860 <main+0x168>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 ff62 	bl	8001684 <TM_HD44780_Puts>
		break;
 80007c0:	e002      	b.n	80007c8 <main+0xd0>
		break;
 80007c2:	bf00      	nop
 80007c4:	e000      	b.n	80007c8 <main+0xd0>
		break;
 80007c6:	bf00      	nop
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (IsDataAvailable() > 0) {
 80007c8:	f7ff ff24 	bl	8000614 <IsDataAvailable>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	dd10      	ble.n	80007f4 <main+0xfc>
			ch = (unsigned char) Uart_read();
 80007d2:	f7ff fec3 	bl	800055c <Uart_read>
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
			if (readMidiMessage(ch, &len) == TRUE)
 80007da:	1dba      	adds	r2, r7, #6
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 faf3 	bl	8000dcc <readMidiMessage>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d103      	bne.n	80007f4 <main+0xfc>
				sendMidiMessage(len);
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fb80 	bl	8000ef4 <sendMidiMessage>
		}
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80007f4:	210a      	movs	r1, #10
 80007f6:	4816      	ldr	r0, [pc, #88]	; (8000850 <main+0x158>)
 80007f8:	f001 fb2e 	bl	8001e58 <HAL_ADC_PollForConversion>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <main+0x120>
			adc0 = HAL_ADC_GetValue(&hadc1);
 8000802:	4813      	ldr	r0, [pc, #76]	; (8000850 <main+0x158>)
 8000804:	f001 fbb3 	bl	8001f6e <HAL_ADC_GetValue>
 8000808:	60f8      	str	r0, [r7, #12]
			ADC_SetActiveChannel(&hadc1, ADC_CHANNEL_1);
 800080a:	2101      	movs	r1, #1
 800080c:	4810      	ldr	r0, [pc, #64]	; (8000850 <main+0x158>)
 800080e:	f000 fab7 	bl	8000d80 <ADC_SetActiveChannel>
			HAL_ADC_Start(&hadc1);
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <main+0x158>)
 8000814:	f001 fa6c 	bl	8001cf0 <HAL_ADC_Start>
		}
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000818:	210a      	movs	r1, #10
 800081a:	480d      	ldr	r0, [pc, #52]	; (8000850 <main+0x158>)
 800081c:	f001 fb1c 	bl	8001e58 <HAL_ADC_PollForConversion>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d1b0      	bne.n	8000788 <main+0x90>
			adc1 = HAL_ADC_GetValue(&hadc1);
 8000826:	480a      	ldr	r0, [pc, #40]	; (8000850 <main+0x158>)
 8000828:	f001 fba1 	bl	8001f6e <HAL_ADC_GetValue>
 800082c:	60b8      	str	r0, [r7, #8]
			ADC_SetActiveChannel(&hadc1, ADC_CHANNEL_0);
 800082e:	2100      	movs	r1, #0
 8000830:	4807      	ldr	r0, [pc, #28]	; (8000850 <main+0x158>)
 8000832:	f000 faa5 	bl	8000d80 <ADC_SetActiveChannel>
			HAL_ADC_Start(&hadc1);
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <main+0x158>)
 8000838:	f001 fa5a 	bl	8001cf0 <HAL_ADC_Start>
	key = TM_KEYPAD_Read();
 800083c:	e7a4      	b.n	8000788 <main+0x90>
 800083e:	bf00      	nop
 8000840:	e000edf0 	.word	0xe000edf0
 8000844:	e0001000 	.word	0xe0001000
 8000848:	200001e8 	.word	0x200001e8
 800084c:	20000278 	.word	0x20000278
 8000850:	200001a0 	.word	0x200001a0
 8000854:	080047c8 	.word	0x080047c8
 8000858:	20000230 	.word	0x20000230
 800085c:	080047d0 	.word	0x080047d0
 8000860:	080047d4 	.word	0x080047d4

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2230      	movs	r2, #48	; 0x30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f003 ff94 	bl	80047a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a27      	ldr	r2, [pc, #156]	; (8000930 <SystemClock_Config+0xcc>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <SystemClock_Config+0xcc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a20      	ldr	r2, [pc, #128]	; (8000934 <SystemClock_Config+0xd0>)
 80008b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008d8:	2319      	movs	r3, #25
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008dc:	23a8      	movs	r3, #168	; 0xa8
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fad5 	bl	8002e9c <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008f8:	f000 fa63 	bl	8000dc2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2102      	movs	r1, #2
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fd37 	bl	800338c <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000924:	f000 fa4d 	bl	8000dc2 <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3750      	adds	r7, #80	; 0x50
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093e:	463b      	mov	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_ADC1_Init+0x9c>)
 800094c:	4a22      	ldr	r2, [pc, #136]	; (80009d8 <MX_ADC1_Init+0xa0>)
 800094e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <MX_ADC1_Init+0x9c>)
 8000952:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000956:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_ADC1_Init+0x9c>)
 800095a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800095e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_ADC1_Init+0x9c>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_ADC1_Init+0x9c>)
 8000968:	2200      	movs	r2, #0
 800096a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_ADC1_Init+0x9c>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_ADC1_Init+0x9c>)
 8000976:	2200      	movs	r2, #0
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_ADC1_Init+0x9c>)
 800097c:	4a17      	ldr	r2, [pc, #92]	; (80009dc <MX_ADC1_Init+0xa4>)
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_ADC1_Init+0x9c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_ADC1_Init+0x9c>)
 8000988:	2201      	movs	r2, #1
 800098a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_ADC1_Init+0x9c>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_ADC1_Init+0x9c>)
 8000996:	2201      	movs	r2, #1
 8000998:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800099a:	480e      	ldr	r0, [pc, #56]	; (80009d4 <MX_ADC1_Init+0x9c>)
 800099c:	f001 f964 	bl	8001c68 <HAL_ADC_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80009a6:	f000 fa0c 	bl	8000dc2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_ADC1_Init+0x9c>)
 80009bc:	f001 fae4 	bl	8001f88 <HAL_ADC_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009c6:	f000 f9fc 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200001a0 	.word	0x200001a0
 80009d8:	40012000 	.word	0x40012000
 80009dc:	0f000001 	.word	0x0f000001

080009e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009e6:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <MX_I2C1_Init+0x54>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009ec:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x58>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_I2C1_Init+0x50>)
 80009fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_I2C1_Init+0x50>)
 8000a1e:	f002 f8f9 	bl	8002c14 <HAL_I2C_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a28:	f000 f9cb 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000ec 	.word	0x200000ec
 8000a34:	40005400 	.word	0x40005400
 8000a38:	000186a0 	.word	0x000186a0

08000a3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	2224      	movs	r2, #36	; 0x24
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f003 fea8 	bl	80047a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <MX_TIM1_Init+0xb8>)
 8000a5a:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <MX_TIM1_Init+0xbc>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a5e:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <MX_TIM1_Init+0xb8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <MX_TIM1_Init+0xb8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a6a:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_TIM1_Init+0xb8>)
 8000a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <MX_TIM1_Init+0xb8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <MX_TIM1_Init+0xb8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_TIM1_Init+0xb8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	4811      	ldr	r0, [pc, #68]	; (8000af4 <MX_TIM1_Init+0xb8>)
 8000ab0:	f002 ff48 	bl	8003944 <HAL_TIM_Encoder_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000aba:	f000 f982 	bl	8000dc2 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000abe:	2108      	movs	r1, #8
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <MX_TIM1_Init+0xb8>)
 8000ac2:	f002 fee5 	bl	8003890 <HAL_TIM_OnePulse_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000acc:	f000 f979 	bl	8000dc2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_TIM1_Init+0xb8>)
 8000ade:	f003 fba3 	bl	8004228 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000ae8:	f000 f96b 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200001e8 	.word	0x200001e8
 8000af8:	40010000 	.word	0x40010000

08000afc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	463b      	mov	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b22:	2253      	movs	r2, #83	; 0x53
 8000b24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b40:	4813      	ldr	r0, [pc, #76]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b42:	f002 fdf3 	bl	800372c <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b4c:	f000 f939 	bl	8000dc2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b5e:	f003 f92d 	bl	8003dbc <HAL_TIM_ConfigClockSource>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b68:	f000 f92b 	bl	8000dc2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_TIM2_Init+0x94>)
 8000b7a:	f003 fb55 	bl	8004228 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b84:	f000 f91d 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000278 	.word	0x20000278

08000b94 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART6_UART_Init+0x4c>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_USART6_UART_Init+0x50>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 31250;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_USART6_UART_Init+0x4c>)
 8000ba0:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000ba4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART6_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART6_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART6_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART6_UART_Init+0x4c>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART6_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART6_UART_Init+0x4c>)
 8000bc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bca:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_USART6_UART_Init+0x4c>)
 8000bce:	f003 fbad 	bl	800432c <HAL_UART_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8000bd8:	f000 f8f3 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000234 	.word	0x20000234
 8000be4:	40011400 	.word	0x40011400

08000be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_DMA_Init+0x30>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <MX_DMA_Init+0x30>)
 8000bf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_DMA_Init+0x30>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b4e      	ldr	r3, [pc, #312]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a4d      	ldr	r2, [pc, #308]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b4b      	ldr	r3, [pc, #300]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b47      	ldr	r3, [pc, #284]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a46      	ldr	r2, [pc, #280]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b44      	ldr	r3, [pc, #272]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b40      	ldr	r3, [pc, #256]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a3f      	ldr	r2, [pc, #252]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b39      	ldr	r3, [pc, #228]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a38      	ldr	r2, [pc, #224]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca8:	4832      	ldr	r0, [pc, #200]	; (8000d74 <MX_GPIO_Init+0x158>)
 8000caa:	f001 ff99 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HD44780_RS_Pin|HD44780_E_Pin|HD44780_D4_Pin|HD44780_D5_Pin
 8000cae:	2201      	movs	r2, #1
 8000cb0:	21f8      	movs	r1, #248	; 0xf8
 8000cb2:	4831      	ldr	r0, [pc, #196]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000cb4:	f001 ff94 	bl	8002be0 <HAL_GPIO_WritePin>
                          |HD44780_D6_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HD44780_D7_Pin|KEYPAD_COLUMN_1_Pin|KEYPAD_COLUMN_2_Pin|KEYPAD_COLUMN_3_Pin
 8000cb8:	2200      	movs	r2, #0
 8000cba:	21f1      	movs	r1, #241	; 0xf1
 8000cbc:	482f      	ldr	r0, [pc, #188]	; (8000d7c <MX_GPIO_Init+0x160>)
 8000cbe:	f001 ff8f 	bl	8002be0 <HAL_GPIO_WritePin>
                          |KEYPAD_COLUMN_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4826      	ldr	r0, [pc, #152]	; (8000d74 <MX_GPIO_Init+0x158>)
 8000cdc:	f001 fde4 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_SW_Pin KEYPAD_ROW_1_Pin */
  GPIO_InitStruct.Pin = JOY_SW_Pin|KEYPAD_ROW_1_Pin;
 8000ce0:	f240 4304 	movw	r3, #1028	; 0x404
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4820      	ldr	r0, [pc, #128]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000cf6:	f001 fdd7 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HD44780_RS_Pin HD44780_E_Pin HD44780_D4_Pin HD44780_D5_Pin
                           HD44780_D6_Pin */
  GPIO_InitStruct.Pin = HD44780_RS_Pin|HD44780_E_Pin|HD44780_D4_Pin|HD44780_D5_Pin
 8000cfa:	23f8      	movs	r3, #248	; 0xf8
 8000cfc:	617b      	str	r3, [r7, #20]
                          |HD44780_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4819      	ldr	r0, [pc, #100]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000d12:	f001 fdc9 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HD44780_D7_Pin */
  GPIO_InitStruct.Pin = HD44780_D7_Pin;
 8000d16:	2301      	movs	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HD44780_D7_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4813      	ldr	r0, [pc, #76]	; (8000d7c <MX_GPIO_Init+0x160>)
 8000d2e:	f001 fdbb 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_ROW_4_Pin KEYPAD_ROW_3_Pin KEYPAD_ROW_2_Pin ENC_SW_Pin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_4_Pin|KEYPAD_ROW_3_Pin|KEYPAD_ROW_2_Pin|ENC_SW_Pin;
 8000d32:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_GPIO_Init+0x160>)
 8000d48:	f001 fdae 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_COLUMN_1_Pin KEYPAD_COLUMN_2_Pin KEYPAD_COLUMN_3_Pin KEYPAD_COLUMN_4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_COLUMN_1_Pin|KEYPAD_COLUMN_2_Pin|KEYPAD_COLUMN_3_Pin|KEYPAD_COLUMN_4_Pin;
 8000d4c:	23f0      	movs	r3, #240	; 0xf0
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_GPIO_Init+0x160>)
 8000d64:	f001 fda0 	bl	80028a8 <HAL_GPIO_Init>

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020800 	.word	0x40020800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020400 	.word	0x40020400

08000d80 <ADC_SetActiveChannel>:

/* USER CODE BEGIN 4 */
void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
	sConfig.Channel = AdcChannel;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	4619      	mov	r1, r3
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f001 f8ec 	bl	8001f88 <HAL_ADC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <ADC_SetActiveChannel+0x3a>
		Error_Handler();
 8000db6:	f000 f804 	bl	8000dc2 <Error_Handler>
	}
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc6:	b672      	cpsid	i
}
 8000dc8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000dca:	e7fe      	b.n	8000dca <Error_Handler+0x8>

08000dcc <readMidiMessage>:
	work_event.event.size = midiReadIndex;
	work_event.delta = dt;
	return &work_event;
}

BOOL readMidiMessage(unsigned char byte,unsigned char *len){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
	
   unsigned char tmp;

   // state machine for parsing the byte
   switch(midiState)
 8000dd8:	4b42      	ldr	r3, [pc, #264]	; (8000ee4 <readMidiMessage+0x118>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d06f      	beq.n	8000ec0 <readMidiMessage+0xf4>
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	dc79      	bgt.n	8000ed8 <readMidiMessage+0x10c>
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d002      	beq.n	8000dee <readMidiMessage+0x22>
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d02f      	beq.n	8000e4c <readMidiMessage+0x80>
 8000dec:	e074      	b.n	8000ed8 <readMidiMessage+0x10c>
   {
         // we are currently stateless, waiting to start reading an event we care about.
         case MIDI_WAIT:
            if (byte == 0xF0)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2bf0      	cmp	r3, #240	; 0xf0
 8000df2:	d06c      	beq.n	8000ece <readMidiMessage+0x102>
               // call sysex handler, which will return the state we should be in.
               //midiState = handleSysex();
               break;
            }
            // store length of midi command
            tmp = commandLen(byte);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f89a 	bl	8000f30 <commandLen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	73fb      	strb	r3, [r7, #15]
            // is the message one byte long?
            if (tmp == 1)
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d10a      	bne.n	8000e1c <readMidiMessage+0x50>
/*               if (byte == MIDI_CLOCK && midiClockFunc)
               {
                  // it's a clock event and we have a registered clock handler
                  midiClockFunc();
               } else {*/
            	 *len = 1;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
            	 work_event.event.data[0] = byte;
 8000e0c:	4a36      	ldr	r2, [pc, #216]	; (8000ee8 <readMidiMessage+0x11c>)
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	70d3      	strb	r3, [r2, #3]
            	 noteEvent = FALSE;
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <readMidiMessage+0x120>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
                 return TRUE;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e05e      	b.n	8000eda <readMidiMessage+0x10e>
            } else if(tmp == 0){
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10a      	bne.n	8000e38 <readMidiMessage+0x6c>
            	if(noteEvent == TRUE) {
 8000e22:	4b32      	ldr	r3, [pc, #200]	; (8000eec <readMidiMessage+0x120>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d10c      	bne.n	8000e44 <readMidiMessage+0x78>
            		work_event.event.data[1] = byte;
 8000e2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ee8 <readMidiMessage+0x11c>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	7113      	strb	r3, [r2, #4]
            		midiReadIndex = 2;
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <readMidiMessage+0x124>)
 8000e32:	2202      	movs	r2, #2
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e005      	b.n	8000e44 <readMidiMessage+0x78>
            	}
            }
			else {
				   // save first byte of event, position pointer..
				   work_event.event.data[0] = byte;
 8000e38:	4a2b      	ldr	r2, [pc, #172]	; (8000ee8 <readMidiMessage+0x11c>)
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	70d3      	strb	r3, [r2, #3]
				   midiReadIndex = 1;
 8000e3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <readMidiMessage+0x124>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
				}
            midiState = MIDI_READING;
 8000e44:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <readMidiMessage+0x118>)
 8000e46:	2202      	movs	r2, #2
 8000e48:	701a      	strb	r2, [r3, #0]
            break;
 8000e4a:	e045      	b.n	8000ed8 <readMidiMessage+0x10c>
         case MIDI_READING:
        	if(commandLen(byte) > 0){
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f86e 	bl	8000f30 <commandLen>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <readMidiMessage+0x9e>
        		midiState = MIDI_WAIT;
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <readMidiMessage+0x118>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
        		noteEvent = FALSE;
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <readMidiMessage+0x120>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e037      	b.n	8000eda <readMidiMessage+0x10e>
        	}
        	work_event.event.data[midiReadIndex++] = byte;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <readMidiMessage+0x124>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	b2d1      	uxtb	r1, r2
 8000e72:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <readMidiMessage+0x124>)
 8000e74:	7011      	strb	r1, [r2, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <readMidiMessage+0x11c>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	79fa      	ldrb	r2, [r7, #7]
 8000e7e:	70da      	strb	r2, [r3, #3]
            if (midiReadIndex == commandLen(work_event.event.data[0]&0xF0))
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <readMidiMessage+0x11c>)
 8000e82:	78db      	ldrb	r3, [r3, #3]
 8000e84:	f023 030f 	bic.w	r3, r3, #15
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f850 	bl	8000f30 <commandLen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <readMidiMessage+0x124>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d11a      	bne.n	8000ed2 <readMidiMessage+0x106>
            {
               midiState = MIDI_WAIT;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <readMidiMessage+0x118>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
               *len = midiReadIndex;
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <readMidiMessage+0x124>)
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	701a      	strb	r2, [r3, #0]
               if(work_event.event.data[0] & (MIDI_NOTE_ON|MIDI_NOTE_OFF)){
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <readMidiMessage+0x11c>)
 8000eac:	78db      	ldrb	r3, [r3, #3]
 8000eae:	f003 0390 	and.w	r3, r3, #144	; 0x90
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <readMidiMessage+0xf0>
            	   noteEvent = TRUE;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <readMidiMessage+0x120>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
               }
               return TRUE;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e00c      	b.n	8000eda <readMidiMessage+0x10e>
            }
            break;
         case MIDI_IGNORING:
            if (byte == 0xF7)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2bf7      	cmp	r3, #247	; 0xf7
 8000ec4:	d107      	bne.n	8000ed6 <readMidiMessage+0x10a>
            {
               midiState = MIDI_WAIT;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <readMidiMessage+0x118>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000ecc:	e003      	b.n	8000ed6 <readMidiMessage+0x10a>
               break;
 8000ece:	bf00      	nop
 8000ed0:	e002      	b.n	8000ed8 <readMidiMessage+0x10c>
            break;
 8000ed2:	bf00      	nop
 8000ed4:	e000      	b.n	8000ed8 <readMidiMessage+0x10c>
            break;
 8000ed6:	bf00      	nop
      }

   return FALSE;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	200002c4 	.word	0x200002c4
 8000eec:	200000d0 	.word	0x200000d0
 8000ef0:	200002c1 	.word	0x200002c1

08000ef4 <sendMidiMessage>:

void sendMidiMessage(unsigned char num){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	unsigned char i;	
	//if((work_event.event.data[0] & 0xF0) == 0x90)
		//work_event.event.data[2] *= ( (float)playVolume / 255.00);
	for(i = 0; i < num; i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e009      	b.n	8000f18 <sendMidiMessage+0x24>
		Uart_write(work_event.event.data[i]);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <sendMidiMessage+0x38>)
 8000f08:	4413      	add	r3, r2
 8000f0a:	78db      	ldrb	r3, [r3, #3]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fb4d 	bl	80005ac <Uart_write>
	for(i = 0; i < num; i++)
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	3301      	adds	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d3f1      	bcc.n	8000f04 <sendMidiMessage+0x10>
	
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200002c4 	.word	0x200002c4

08000f30 <commandLen>:
	work_event.event.data[1] = program;
	sendMidiMessage(2);
}

unsigned char commandLen(unsigned char cmd)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	
	if ((cmd & 0xF0) != 0xF0)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f40:	2bf0      	cmp	r3, #240	; 0xf0
 8000f42:	d003      	beq.n	8000f4c <commandLen+0x1c>
	cmd = cmd & 0xF0;
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f023 030f 	bic.w	r3, r3, #15
 8000f4a:	71fb      	strb	r3, [r7, #7]
	
	switch(cmd){
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b80      	cmp	r3, #128	; 0x80
 8000f50:	f000 80f4 	beq.w	800113c <commandLen+0x20c>
 8000f54:	2b80      	cmp	r3, #128	; 0x80
 8000f56:	f2c0 80f3 	blt.w	8001140 <commandLen+0x210>
 8000f5a:	2bff      	cmp	r3, #255	; 0xff
 8000f5c:	f300 80f0 	bgt.w	8001140 <commandLen+0x210>
 8000f60:	2b90      	cmp	r3, #144	; 0x90
 8000f62:	f2c0 80ed 	blt.w	8001140 <commandLen+0x210>
 8000f66:	3b90      	subs	r3, #144	; 0x90
 8000f68:	2b6f      	cmp	r3, #111	; 0x6f
 8000f6a:	f200 80e9 	bhi.w	8001140 <commandLen+0x210>
 8000f6e:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <commandLen+0x44>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	0800113d 	.word	0x0800113d
 8000f78:	08001141 	.word	0x08001141
 8000f7c:	08001141 	.word	0x08001141
 8000f80:	08001141 	.word	0x08001141
 8000f84:	08001141 	.word	0x08001141
 8000f88:	08001141 	.word	0x08001141
 8000f8c:	08001141 	.word	0x08001141
 8000f90:	08001141 	.word	0x08001141
 8000f94:	08001141 	.word	0x08001141
 8000f98:	08001141 	.word	0x08001141
 8000f9c:	08001141 	.word	0x08001141
 8000fa0:	08001141 	.word	0x08001141
 8000fa4:	08001141 	.word	0x08001141
 8000fa8:	08001141 	.word	0x08001141
 8000fac:	08001141 	.word	0x08001141
 8000fb0:	08001141 	.word	0x08001141
 8000fb4:	0800113d 	.word	0x0800113d
 8000fb8:	08001141 	.word	0x08001141
 8000fbc:	08001141 	.word	0x08001141
 8000fc0:	08001141 	.word	0x08001141
 8000fc4:	08001141 	.word	0x08001141
 8000fc8:	08001141 	.word	0x08001141
 8000fcc:	08001141 	.word	0x08001141
 8000fd0:	08001141 	.word	0x08001141
 8000fd4:	08001141 	.word	0x08001141
 8000fd8:	08001141 	.word	0x08001141
 8000fdc:	08001141 	.word	0x08001141
 8000fe0:	08001141 	.word	0x08001141
 8000fe4:	08001141 	.word	0x08001141
 8000fe8:	08001141 	.word	0x08001141
 8000fec:	08001141 	.word	0x08001141
 8000ff0:	08001141 	.word	0x08001141
 8000ff4:	0800113d 	.word	0x0800113d
 8000ff8:	08001141 	.word	0x08001141
 8000ffc:	08001141 	.word	0x08001141
 8001000:	08001141 	.word	0x08001141
 8001004:	08001141 	.word	0x08001141
 8001008:	08001141 	.word	0x08001141
 800100c:	08001141 	.word	0x08001141
 8001010:	08001141 	.word	0x08001141
 8001014:	08001141 	.word	0x08001141
 8001018:	08001141 	.word	0x08001141
 800101c:	08001141 	.word	0x08001141
 8001020:	08001141 	.word	0x08001141
 8001024:	08001141 	.word	0x08001141
 8001028:	08001141 	.word	0x08001141
 800102c:	08001141 	.word	0x08001141
 8001030:	08001141 	.word	0x08001141
 8001034:	08001139 	.word	0x08001139
 8001038:	08001141 	.word	0x08001141
 800103c:	08001141 	.word	0x08001141
 8001040:	08001141 	.word	0x08001141
 8001044:	08001141 	.word	0x08001141
 8001048:	08001141 	.word	0x08001141
 800104c:	08001141 	.word	0x08001141
 8001050:	08001141 	.word	0x08001141
 8001054:	08001141 	.word	0x08001141
 8001058:	08001141 	.word	0x08001141
 800105c:	08001141 	.word	0x08001141
 8001060:	08001141 	.word	0x08001141
 8001064:	08001141 	.word	0x08001141
 8001068:	08001141 	.word	0x08001141
 800106c:	08001141 	.word	0x08001141
 8001070:	08001141 	.word	0x08001141
 8001074:	08001139 	.word	0x08001139
 8001078:	08001141 	.word	0x08001141
 800107c:	08001141 	.word	0x08001141
 8001080:	08001141 	.word	0x08001141
 8001084:	08001141 	.word	0x08001141
 8001088:	08001141 	.word	0x08001141
 800108c:	08001141 	.word	0x08001141
 8001090:	08001141 	.word	0x08001141
 8001094:	08001141 	.word	0x08001141
 8001098:	08001141 	.word	0x08001141
 800109c:	08001141 	.word	0x08001141
 80010a0:	08001141 	.word	0x08001141
 80010a4:	08001141 	.word	0x08001141
 80010a8:	08001141 	.word	0x08001141
 80010ac:	08001141 	.word	0x08001141
 80010b0:	08001141 	.word	0x08001141
 80010b4:	0800113d 	.word	0x0800113d
 80010b8:	08001141 	.word	0x08001141
 80010bc:	08001141 	.word	0x08001141
 80010c0:	08001141 	.word	0x08001141
 80010c4:	08001141 	.word	0x08001141
 80010c8:	08001141 	.word	0x08001141
 80010cc:	08001141 	.word	0x08001141
 80010d0:	08001141 	.word	0x08001141
 80010d4:	08001141 	.word	0x08001141
 80010d8:	08001141 	.word	0x08001141
 80010dc:	08001141 	.word	0x08001141
 80010e0:	08001141 	.word	0x08001141
 80010e4:	08001141 	.word	0x08001141
 80010e8:	08001141 	.word	0x08001141
 80010ec:	08001141 	.word	0x08001141
 80010f0:	08001141 	.word	0x08001141
 80010f4:	08001141 	.word	0x08001141
 80010f8:	08001139 	.word	0x08001139
 80010fc:	0800113d 	.word	0x0800113d
 8001100:	08001139 	.word	0x08001139
 8001104:	08001141 	.word	0x08001141
 8001108:	08001141 	.word	0x08001141
 800110c:	08001135 	.word	0x08001135
 8001110:	08001141 	.word	0x08001141
 8001114:	08001135 	.word	0x08001135
 8001118:	08001135 	.word	0x08001135
 800111c:	08001135 	.word	0x08001135
 8001120:	08001135 	.word	0x08001135
 8001124:	08001135 	.word	0x08001135
 8001128:	08001141 	.word	0x08001141
 800112c:	08001135 	.word	0x08001135
 8001130:	08001135 	.word	0x08001135
		case	MIDI_START:
		case	MIDI_STOP:
		case	MIDI_CONT:
		case	MIDI_SENSE:
		case	MIDI_RESET:	
					return 1;
 8001134:	2301      	movs	r3, #1
 8001136:	e004      	b.n	8001142 <commandLen+0x212>
		case	MIDI_PROGRAM_CHANGE:
		case	MIDI_CHANNEL_TOUCH:
		case	MIDI_MTC:
		case	MIDI_SONG_SEL:	
					return 2;
 8001138:	2302      	movs	r3, #2
 800113a:	e002      	b.n	8001142 <commandLen+0x212>
		case	MIDI_NOTE_ON:
		case	MIDI_POLY_TOUCH:
		case	MIDI_CONTROL_CHANGE:
		case	MIDI_PITCH_BEND:
		case	MIDI_SPP:	
					return 3;
 800113c:	2303      	movs	r3, #3
 800113e:	e000      	b.n	8001142 <commandLen+0x212>
		
	}
	
	return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_MspInit+0x4c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_MspInit+0x4c>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_MspInit+0x4c>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_MspInit+0x4c>)
 800117c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800118e:	2005      	movs	r0, #5
 8001190:	f001 f9e8 	bl	8002564 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800

080011a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_ADC_MspInit+0x7c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d127      	bne.n	8001212 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_ADC_MspInit+0x80>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <HAL_ADC_MspInit+0x80>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HAL_ADC_MspInit+0x80>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_ADC_MspInit+0x80>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <HAL_ADC_MspInit+0x80>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_ADC_MspInit+0x80>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 80011fa:	2303      	movs	r3, #3
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fe:	2303      	movs	r3, #3
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <HAL_ADC_MspInit+0x84>)
 800120e:	f001 fb4b 	bl	80028a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40012000 	.word	0x40012000
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000

08001228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a19      	ldr	r2, [pc, #100]	; (80012ac <HAL_I2C_MspInit+0x84>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12c      	bne.n	80012a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_I2C_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_I2C_MspInit+0x88>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_I2C_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001266:	f44f 7340 	mov.w	r3, #768	; 0x300
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126c:	2312      	movs	r3, #18
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001270:	2301      	movs	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001278:	2304      	movs	r3, #4
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	480c      	ldr	r0, [pc, #48]	; (80012b4 <HAL_I2C_MspInit+0x8c>)
 8001284:	f001 fb10 	bl	80028a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_I2C_MspInit+0x88>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_I2C_MspInit+0x88>)
 8001292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_I2C_MspInit+0x88>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40005400 	.word	0x40005400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020400 	.word	0x40020400

080012b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a19      	ldr	r2, [pc, #100]	; (800133c <HAL_TIM_Encoder_MspInit+0x84>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d12c      	bne.n	8001334 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_TIM_Encoder_MspInit+0x88>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_TIM_Encoder_MspInit+0x88>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_TIM_Encoder_MspInit+0x88>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_TIM_Encoder_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a10      	ldr	r2, [pc, #64]	; (8001340 <HAL_TIM_Encoder_MspInit+0x88>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_TIM_Encoder_MspInit+0x88>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DT_Pin;
 8001312:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001324:	2301      	movs	r3, #1
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001330:	f001 faba 	bl	80028a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40010000 	.word	0x40010000
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001358:	d115      	bne.n	8001386 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_TIM_Base_MspInit+0x48>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <HAL_TIM_Base_MspInit+0x48>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_TIM_Base_MspInit+0x48>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8001376:	2201      	movs	r2, #1
 8001378:	2101      	movs	r1, #1
 800137a:	201c      	movs	r0, #28
 800137c:	f001 f8fd 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001380:	201c      	movs	r0, #28
 8001382:	f001 f916 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a35      	ldr	r2, [pc, #212]	; (8001488 <HAL_UART_MspInit+0xf4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d163      	bne.n	800147e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b34      	ldr	r3, [pc, #208]	; (800148c <HAL_UART_MspInit+0xf8>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a33      	ldr	r2, [pc, #204]	; (800148c <HAL_UART_MspInit+0xf8>)
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <HAL_UART_MspInit+0xf8>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f003 0320 	and.w	r3, r3, #32
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <HAL_UART_MspInit+0xf8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a2c      	ldr	r2, [pc, #176]	; (800148c <HAL_UART_MspInit+0xf8>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <HAL_UART_MspInit+0xf8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001400:	2308      	movs	r3, #8
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4821      	ldr	r0, [pc, #132]	; (8001490 <HAL_UART_MspInit+0xfc>)
 800140c:	f001 fa4c 	bl	80028a8 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_UART_MspInit+0x100>)
 8001412:	4a21      	ldr	r2, [pc, #132]	; (8001498 <HAL_UART_MspInit+0x104>)
 8001414:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <HAL_UART_MspInit+0x100>)
 8001418:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800141c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_UART_MspInit+0x100>)
 8001420:	2240      	movs	r2, #64	; 0x40
 8001422:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_UART_MspInit+0x100>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_UART_MspInit+0x100>)
 800142c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001430:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_UART_MspInit+0x100>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_UART_MspInit+0x100>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_UART_MspInit+0x100>)
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_UART_MspInit+0x100>)
 8001446:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800144a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_UART_MspInit+0x100>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001452:	4810      	ldr	r0, [pc, #64]	; (8001494 <HAL_UART_MspInit+0x100>)
 8001454:	f001 f8c8 	bl	80025e8 <HAL_DMA_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800145e:	f7ff fcb0 	bl	8000dc2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <HAL_UART_MspInit+0x100>)
 8001466:	635a      	str	r2, [r3, #52]	; 0x34
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_UART_MspInit+0x100>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 2);
 800146e:	2202      	movs	r2, #2
 8001470:	2101      	movs	r1, #1
 8001472:	2047      	movs	r0, #71	; 0x47
 8001474:	f001 f881 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001478:	2047      	movs	r0, #71	; 0x47
 800147a:	f001 f89a 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40011400 	.word	0x40011400
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000
 8001494:	20000140 	.word	0x20000140
 8001498:	400264a0 	.word	0x400264a0

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e8:	f000 fb9e 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014f4:	4803      	ldr	r0, [pc, #12]	; (8001504 <TIM2_IRQHandler+0x14>)
 80014f6:	f002 fb59 	bl	8003bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TM_KEYPAD_Update();
 80014fa:	f000 faf9 	bl	8001af0 <TM_KEYPAD_Update>
  /* USER CODE END TIM2_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000278 	.word	0x20000278

08001508 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */

  /* USER CODE BEGIN USART6_IRQn 1 */
	Uart_isr(&huart6);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <USART6_IRQHandler+0x10>)
 800150e:	f7ff f899 	bl	8000644 <Uart_isr>
  /* USER CODE END USART6_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000234 	.word	0x20000234

0800151c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <ShortDelayUS>:
__STATIC_INLINE void DelayUS(__IO uint32_t micros);

volatile int totalDelay = 0;

void ShortDelayUS(uint32_t Delay)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	DelayUS(Delay);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f805 	bl	8001558 <DelayUS>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <DelayUS>:

__STATIC_INLINE void DelayUS(__IO uint32_t micros) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

#if !defined(STM32F0xx)
    uint32_t start = DWT->CYCCNT;
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <DelayUS+0x40>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	60fb      	str	r3, [r7, #12]

    /* Go to number of cycles for system */
    micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001566:	f002 f8ad 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 800156a:	4603      	mov	r3, r0
 800156c:	4a0b      	ldr	r2, [pc, #44]	; (800159c <DelayUS+0x44>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	0c9b      	lsrs	r3, r3, #18
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - start) < micros);
 800157c:	bf00      	nop
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <DelayUS+0x40>)
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1ad2      	subs	r2, r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3f8      	bcc.n	800157e <DelayUS+0x26>
    micros *= (SystemCoreClock / 1000000) / 5;

    /* Wait till done */
    while (micros--);
#endif
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e0001000 	.word	0xe0001000
 800159c:	431bde83 	.word	0x431bde83

080015a0 <TM_HD44780_Init>:

void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	460a      	mov	r2, r1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	4613      	mov	r3, r2
 80015ae:	71bb      	strb	r3, [r7, #6]
	/* Initialize delay */
	//TM_DELAY_Init();
	
	/* Init pinout */
	TM_HD44780_InitPins();
 80015b0:	f000 f99a 	bl	80018e8 <TM_HD44780_InitPins>
	
	/* At least 40ms */
	HD44780_Delay(45000);
 80015b4:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 80015b8:	f7ff ffc2 	bl	8001540 <ShortDelayUS>

	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 80015bc:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <TM_HD44780_Init+0xc8>)
 80015be:	79bb      	ldrb	r3, [r7, #6]
 80015c0:	70d3      	strb	r3, [r2, #3]
	HD44780_Opts.Cols = cols;
 80015c2:	4a29      	ldr	r2, [pc, #164]	; (8001668 <TM_HD44780_Init+0xc8>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	7113      	strb	r3, [r2, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <TM_HD44780_Init+0xc8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <TM_HD44780_Init+0xc8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	719a      	strb	r2, [r3, #6]
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <TM_HD44780_Init+0xc8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 80015da:	79bb      	ldrb	r3, [r7, #6]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d906      	bls.n	80015ee <TM_HD44780_Init+0x4e>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <TM_HD44780_Init+0xc8>)
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <TM_HD44780_Init+0xc8>)
 80015ec:	705a      	strb	r2, [r3, #1]
	}
	
	/* Try to set 4bit mode */
	TM_HD44780_Cmd4bit(0x03);
 80015ee:	2003      	movs	r0, #3
 80015f0:	f000 f8f8 	bl	80017e4 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 80015f4:	f241 1094 	movw	r0, #4500	; 0x1194
 80015f8:	f7ff ffa2 	bl	8001540 <ShortDelayUS>

	/* Second try */
	TM_HD44780_Cmd4bit(0x03);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f8f1 	bl	80017e4 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 8001602:	f241 1094 	movw	r0, #4500	; 0x1194
 8001606:	f7ff ff9b 	bl	8001540 <ShortDelayUS>
	
	/* Third goo! */
	TM_HD44780_Cmd4bit(0x03);
 800160a:	2003      	movs	r0, #3
 800160c:	f000 f8ea 	bl	80017e4 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 8001610:	f241 1094 	movw	r0, #4500	; 0x1194
 8001614:	f7ff ff94 	bl	8001540 <ShortDelayUS>
	
	/* Set 4-bit interface */
	TM_HD44780_Cmd4bit(0x02);
 8001618:	2002      	movs	r0, #2
 800161a:	f000 f8e3 	bl	80017e4 <TM_HD44780_Cmd4bit>
	HD44780_Delay(100);
 800161e:	2064      	movs	r0, #100	; 0x64
 8001620:	f7ff ff8e 	bl	8001540 <ShortDelayUS>
	
	/* Set # lines, font size, etc. */
	TM_HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <TM_HD44780_Init+0xc8>)
 8001626:	785b      	ldrb	r3, [r3, #1]
 8001628:	f043 0320 	orr.w	r3, r3, #32
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f89c 	bl	800176c <TM_HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <TM_HD44780_Init+0xc8>)
 8001636:	2204      	movs	r2, #4
 8001638:	701a      	strb	r2, [r3, #0]
	TM_HD44780_DisplayOn();
 800163a:	f000 f881 	bl	8001740 <TM_HD44780_DisplayOn>

	/* Clear lcd */
	TM_HD44780_Clear();
 800163e:	f000 f815 	bl	800166c <TM_HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <TM_HD44780_Init+0xc8>)
 8001644:	2202      	movs	r2, #2
 8001646:	709a      	strb	r2, [r3, #2]
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <TM_HD44780_Init+0xc8>)
 800164a:	789b      	ldrb	r3, [r3, #2]
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	b2db      	uxtb	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f88a 	bl	800176c <TM_HD44780_Cmd>

	/* Delay */
	HD44780_Delay(4500);
 8001658:	f241 1094 	movw	r0, #4500	; 0x1194
 800165c:	f7ff ff70 	bl	8001540 <ShortDelayUS>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200000d4 	.word	0x200000d4

0800166c <TM_HD44780_Clear>:

void TM_HD44780_Clear(void) {
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
 8001670:	2001      	movs	r0, #1
 8001672:	f000 f87b 	bl	800176c <TM_HD44780_Cmd>
	HD44780_Delay(3000);
 8001676:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800167a:	f7ff ff61 	bl	8001540 <ShortDelayUS>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <TM_HD44780_Puts>:

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	603a      	str	r2, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	460b      	mov	r3, r1
 8001692:	71bb      	strb	r3, [r7, #6]
	TM_HD44780_CursorSet(x, y);
 8001694:	79ba      	ldrb	r2, [r7, #6]
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f8f4 	bl	8001888 <TM_HD44780_CursorSet>
	while (*str) {
 80016a0:	e042      	b.n	8001728 <TM_HD44780_Puts+0xa4>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <TM_HD44780_Puts+0xb8>)
 80016a4:	795a      	ldrb	r2, [r3, #5]
 80016a6:	4b25      	ldr	r3, [pc, #148]	; (800173c <TM_HD44780_Puts+0xb8>)
 80016a8:	791b      	ldrb	r3, [r3, #4]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d310      	bcc.n	80016d0 <TM_HD44780_Puts+0x4c>
			HD44780_Opts.currentX = 0;
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <TM_HD44780_Puts+0xb8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	715a      	strb	r2, [r3, #5]
			HD44780_Opts.currentY++;
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <TM_HD44780_Puts+0xb8>)
 80016b6:	799b      	ldrb	r3, [r3, #6]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <TM_HD44780_Puts+0xb8>)
 80016be:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <TM_HD44780_Puts+0xb8>)
 80016c2:	795b      	ldrb	r3, [r3, #5]
 80016c4:	4a1d      	ldr	r2, [pc, #116]	; (800173c <TM_HD44780_Puts+0xb8>)
 80016c6:	7992      	ldrb	r2, [r2, #6]
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f8dc 	bl	8001888 <TM_HD44780_CursorSet>
		}
		if (*str == '\n') {
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b0a      	cmp	r3, #10
 80016d6:	d10e      	bne.n	80016f6 <TM_HD44780_Puts+0x72>
			HD44780_Opts.currentY++;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <TM_HD44780_Puts+0xb8>)
 80016da:	799b      	ldrb	r3, [r3, #6]
 80016dc:	3301      	adds	r3, #1
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <TM_HD44780_Puts+0xb8>)
 80016e2:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <TM_HD44780_Puts+0xb8>)
 80016e6:	795b      	ldrb	r3, [r3, #5]
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <TM_HD44780_Puts+0xb8>)
 80016ea:	7992      	ldrb	r2, [r2, #6]
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f8ca 	bl	8001888 <TM_HD44780_CursorSet>
 80016f4:	e015      	b.n	8001722 <TM_HD44780_Puts+0x9e>
		} else if (*str == '\r') {
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b0d      	cmp	r3, #13
 80016fc:	d106      	bne.n	800170c <TM_HD44780_Puts+0x88>
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <TM_HD44780_Puts+0xb8>)
 8001700:	799b      	ldrb	r3, [r3, #6]
 8001702:	4619      	mov	r1, r3
 8001704:	2000      	movs	r0, #0
 8001706:	f000 f8bf 	bl	8001888 <TM_HD44780_CursorSet>
 800170a:	e00a      	b.n	8001722 <TM_HD44780_Puts+0x9e>
		} else {
			TM_HD44780_Data(*str);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f849 	bl	80017a8 <TM_HD44780_Data>
			HD44780_Opts.currentX++;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <TM_HD44780_Puts+0xb8>)
 8001718:	795b      	ldrb	r3, [r3, #5]
 800171a:	3301      	adds	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <TM_HD44780_Puts+0xb8>)
 8001720:	715a      	strb	r2, [r3, #5]
		}
		str++;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1b8      	bne.n	80016a2 <TM_HD44780_Puts+0x1e>
	}
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200000d4 	.word	0x200000d4

08001740 <TM_HD44780_DisplayOn>:

void TM_HD44780_DisplayOn(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <TM_HD44780_DisplayOn+0x28>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <TM_HD44780_DisplayOn+0x28>)
 8001750:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <TM_HD44780_DisplayOn+0x28>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	b2db      	uxtb	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	f000 f805 	bl	800176c <TM_HD44780_Cmd>
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200000d4 	.word	0x200000d4

0800176c <TM_HD44780_Cmd>:
	TM_HD44780_CursorSet(x, y);
	TM_HD44780_Data(location);
}

/* Private functions */
static void TM_HD44780_Cmd(uint8_t cmd) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
	/* Command mode */
	HD44780_RS_LOW;
 8001776:	2200      	movs	r2, #0
 8001778:	2108      	movs	r1, #8
 800177a:	480a      	ldr	r0, [pc, #40]	; (80017a4 <TM_HD44780_Cmd+0x38>)
 800177c:	f001 fa30 	bl	8002be0 <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(cmd >> 4);
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f82c 	bl	80017e4 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4618      	mov	r0, r3
 8001796:	f000 f825 	bl	80017e4 <TM_HD44780_Cmd4bit>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40020000 	.word	0x40020000

080017a8 <TM_HD44780_Data>:

static void TM_HD44780_Data(uint8_t data) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
	/* Data mode */
	HD44780_RS_HIGH;
 80017b2:	2201      	movs	r2, #1
 80017b4:	2108      	movs	r1, #8
 80017b6:	480a      	ldr	r0, [pc, #40]	; (80017e0 <TM_HD44780_Data+0x38>)
 80017b8:	f001 fa12 	bl	8002be0 <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(data >> 4);
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f80e 	bl	80017e4 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f807 	bl	80017e4 <TM_HD44780_Cmd4bit>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40020000 	.word	0x40020000

080017e4 <TM_HD44780_Cmd4bit>:

static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
	/* Set output port */

	HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin, (cmd & 0x08) != 0);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf14      	ite	ne
 80017f8:	2301      	movne	r3, #1
 80017fa:	2300      	moveq	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	2101      	movs	r1, #1
 8001802:	481f      	ldr	r0, [pc, #124]	; (8001880 <TM_HD44780_Cmd4bit+0x9c>)
 8001804:	f001 f9ec 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_GPIO_Port, HD44780_D6_Pin, (cmd & 0x04) != 0);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	4819      	ldr	r0, [pc, #100]	; (8001884 <TM_HD44780_Cmd4bit+0xa0>)
 800181e:	f001 f9df 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_GPIO_Port, HD44780_D5_Pin, (cmd & 0x02) != 0);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	2140      	movs	r1, #64	; 0x40
 8001836:	4813      	ldr	r0, [pc, #76]	; (8001884 <TM_HD44780_Cmd4bit+0xa0>)
 8001838:	f001 f9d2 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_GPIO_Port, HD44780_D4_Pin, (cmd & 0x01) != 0);
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf14      	ite	ne
 8001846:	2301      	movne	r3, #1
 8001848:	2300      	moveq	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	2120      	movs	r1, #32
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <TM_HD44780_Cmd4bit+0xa0>)
 8001852:	f001 f9c5 	bl	8002be0 <HAL_GPIO_WritePin>
	HD44780_E_BLINK;
 8001856:	2201      	movs	r2, #1
 8001858:	2110      	movs	r1, #16
 800185a:	480a      	ldr	r0, [pc, #40]	; (8001884 <TM_HD44780_Cmd4bit+0xa0>)
 800185c:	f001 f9c0 	bl	8002be0 <HAL_GPIO_WritePin>
 8001860:	2014      	movs	r0, #20
 8001862:	f7ff fe6d 	bl	8001540 <ShortDelayUS>
 8001866:	2200      	movs	r2, #0
 8001868:	2110      	movs	r1, #16
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <TM_HD44780_Cmd4bit+0xa0>)
 800186c:	f001 f9b8 	bl	8002be0 <HAL_GPIO_WritePin>
 8001870:	2014      	movs	r0, #20
 8001872:	f7ff fe65 	bl	8001540 <ShortDelayUS>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40020400 	.word	0x40020400
 8001884:	40020000 	.word	0x40020000

08001888 <TM_HD44780_CursorSet>:

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	71fb      	strb	r3, [r7, #7]
 8001894:	4613      	mov	r3, r2
 8001896:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <TM_HD44780_CursorSet+0x58>)
 800189a:	60fb      	str	r3, [r7, #12]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <TM_HD44780_CursorSet+0x5c>)
 800189e:	78db      	ldrb	r3, [r3, #3]
 80018a0:	79ba      	ldrb	r2, [r7, #6]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d301      	bcc.n	80018aa <TM_HD44780_CursorSet+0x22>
		row = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <TM_HD44780_CursorSet+0x5c>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	7153      	strb	r3, [r2, #5]
	HD44780_Opts.currentY = row;
 80018b0:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <TM_HD44780_CursorSet+0x5c>)
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	7193      	strb	r3, [r2, #6]
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 80018b6:	79bb      	ldrb	r3, [r7, #6]
 80018b8:	f107 0210 	add.w	r2, r7, #16
 80018bc:	4413      	add	r3, r2
 80018be:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4413      	add	r3, r2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ce:	b25b      	sxtb	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff4a 	bl	800176c <TM_HD44780_Cmd>
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	54144000 	.word	0x54144000
 80018e4:	200000d4 	.word	0x200000d4

080018e8 <TM_HD44780_InitPins>:

static void TM_HD44780_InitPins(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	/* Init all pins */
	/* Set pins low */
	HAL_GPIO_WritePin(HD44780_RS_GPIO_Port, HD44780_RS_Pin,GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2108      	movs	r1, #8
 80018f0:	480e      	ldr	r0, [pc, #56]	; (800192c <TM_HD44780_InitPins+0x44>)
 80018f2:	f001 f975 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_E_GPIO_Port, HD44780_E_Pin,GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2110      	movs	r1, #16
 80018fa:	480c      	ldr	r0, [pc, #48]	; (800192c <TM_HD44780_InitPins+0x44>)
 80018fc:	f001 f970 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_GPIO_Port, HD44780_D4_Pin,GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2120      	movs	r1, #32
 8001904:	4809      	ldr	r0, [pc, #36]	; (800192c <TM_HD44780_InitPins+0x44>)
 8001906:	f001 f96b 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_GPIO_Port, HD44780_D5_Pin,GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2140      	movs	r1, #64	; 0x40
 800190e:	4807      	ldr	r0, [pc, #28]	; (800192c <TM_HD44780_InitPins+0x44>)
 8001910:	f001 f966 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_GPIO_Port, HD44780_D6_Pin,GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <TM_HD44780_InitPins+0x44>)
 800191a:	f001 f961 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin,GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2101      	movs	r1, #1
 8001922:	4803      	ldr	r0, [pc, #12]	; (8001930 <TM_HD44780_InitPins+0x48>)
 8001924:	f001 f95c 	bl	8002be0 <HAL_GPIO_WritePin>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400

08001934 <TM_KEYPAD_Init>:
TM_KEYPAD_Type_t TM_KEYPAD_INT_KeypadType;
static TM_KEYPAD_Button_t KeypadStatus = TM_KEYPAD_Button_NOPRESSED;
static TM_KEYPAD_Button_t KeyCode = TM_KEYPAD_Button_NOPRESSED;


void TM_KEYPAD_Init() {
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	
	TM_KEYPAD_INT_SetColumn(0);
 8001938:	2000      	movs	r0, #0
 800193a:	f000 f815 	bl	8001968 <TM_KEYPAD_INT_SetColumn>
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <TM_KEYPAD_Read>:

char TM_KEYPAD_GetChar(TM_KEYPAD_Button_t key){
	return KEYPAD_INT_Chars[key];
}

TM_KEYPAD_Button_t TM_KEYPAD_Read(void) {
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
	TM_KEYPAD_Button_t temp;

	/* Get keypad status */
	temp = KeypadStatus;
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <TM_KEYPAD_Read+0x20>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	71fb      	strb	r3, [r7, #7]

	/* Reset keypad status */
	KeypadStatus = TM_KEYPAD_Button_NOPRESSED;
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <TM_KEYPAD_Read+0x20>)
 8001952:	22ff      	movs	r2, #255	; 0xff
 8001954:	701a      	strb	r2, [r3, #0]

	return temp;
 8001956:	79fb      	ldrb	r3, [r7, #7]

}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	20000018 	.word	0x20000018

08001968 <TM_KEYPAD_INT_SetColumn>:

/* Private */
void TM_KEYPAD_INT_SetColumn(uint8_t column) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_COLUMN_1_HIGH;
 8001972:	2201      	movs	r2, #1
 8001974:	2110      	movs	r1, #16
 8001976:	481b      	ldr	r0, [pc, #108]	; (80019e4 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001978:	f001 f932 	bl	8002be0 <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_2_HIGH;
 800197c:	2201      	movs	r2, #1
 800197e:	2120      	movs	r1, #32
 8001980:	4818      	ldr	r0, [pc, #96]	; (80019e4 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001982:	f001 f92d 	bl	8002be0 <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_3_HIGH;
 8001986:	2201      	movs	r2, #1
 8001988:	2140      	movs	r1, #64	; 0x40
 800198a:	4816      	ldr	r0, [pc, #88]	; (80019e4 <TM_KEYPAD_INT_SetColumn+0x7c>)
 800198c:	f001 f928 	bl	8002be0 <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_4_HIGH;
 8001990:	2201      	movs	r2, #1
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	4813      	ldr	r0, [pc, #76]	; (80019e4 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001996:	f001 f923 	bl	8002be0 <HAL_GPIO_WritePin>

	/* Set column low */
	if (column == 1) {
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d104      	bne.n	80019aa <TM_KEYPAD_INT_SetColumn+0x42>
		KEYPAD_COLUMN_1_LOW;
 80019a0:	2200      	movs	r2, #0
 80019a2:	2110      	movs	r1, #16
 80019a4:	480f      	ldr	r0, [pc, #60]	; (80019e4 <TM_KEYPAD_INT_SetColumn+0x7c>)
 80019a6:	f001 f91b 	bl	8002be0 <HAL_GPIO_WritePin>
	}
	if (column == 2) {
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d104      	bne.n	80019ba <TM_KEYPAD_INT_SetColumn+0x52>
		KEYPAD_COLUMN_2_LOW;
 80019b0:	2200      	movs	r2, #0
 80019b2:	2120      	movs	r1, #32
 80019b4:	480b      	ldr	r0, [pc, #44]	; (80019e4 <TM_KEYPAD_INT_SetColumn+0x7c>)
 80019b6:	f001 f913 	bl	8002be0 <HAL_GPIO_WritePin>
	}
	if (column == 3) {
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d104      	bne.n	80019ca <TM_KEYPAD_INT_SetColumn+0x62>
		KEYPAD_COLUMN_3_LOW;
 80019c0:	2200      	movs	r2, #0
 80019c2:	2140      	movs	r1, #64	; 0x40
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <TM_KEYPAD_INT_SetColumn+0x7c>)
 80019c6:	f001 f90b 	bl	8002be0 <HAL_GPIO_WritePin>
	}
	if (column == 4) {
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d104      	bne.n	80019da <TM_KEYPAD_INT_SetColumn+0x72>
		KEYPAD_COLUMN_4_LOW;
 80019d0:	2200      	movs	r2, #0
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	4803      	ldr	r0, [pc, #12]	; (80019e4 <TM_KEYPAD_INT_SetColumn+0x7c>)
 80019d6:	f001 f903 	bl	8002be0 <HAL_GPIO_WritePin>
	}
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40020400 	.word	0x40020400

080019e8 <TM_KEYPAD_INT_CheckRow>:



uint8_t TM_KEYPAD_INT_CheckRow(uint8_t column) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	/* Read rows */
	
	/* Scan row 1 */
	if (KEYPAD_ROW_1_CHECK) {
 80019f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f6:	481d      	ldr	r0, [pc, #116]	; (8001a6c <TM_KEYPAD_INT_CheckRow+0x84>)
 80019f8:	f001 f8da 	bl	8002bb0 <HAL_GPIO_ReadPin>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d104      	bne.n	8001a0c <TM_KEYPAD_INT_CheckRow+0x24>
		return KEYPAD_INT_Buttons[0][column - 1];	
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <TM_KEYPAD_INT_CheckRow+0x88>)
 8001a08:	5cd3      	ldrb	r3, [r2, r3]
 8001a0a:	e02a      	b.n	8001a62 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 2 */
	if (KEYPAD_ROW_2_CHECK) {
 8001a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a10:	4818      	ldr	r0, [pc, #96]	; (8001a74 <TM_KEYPAD_INT_CheckRow+0x8c>)
 8001a12:	f001 f8cd 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <TM_KEYPAD_INT_CheckRow+0x40>
		return KEYPAD_INT_Buttons[1][column - 1];
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	4a13      	ldr	r2, [pc, #76]	; (8001a70 <TM_KEYPAD_INT_CheckRow+0x88>)
 8001a22:	4413      	add	r3, r2
 8001a24:	791b      	ldrb	r3, [r3, #4]
 8001a26:	e01c      	b.n	8001a62 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 3 */
	if (KEYPAD_ROW_3_CHECK) {
 8001a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2c:	4811      	ldr	r0, [pc, #68]	; (8001a74 <TM_KEYPAD_INT_CheckRow+0x8c>)
 8001a2e:	f001 f8bf 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <TM_KEYPAD_INT_CheckRow+0x5c>
		return KEYPAD_INT_Buttons[2][column - 1];
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <TM_KEYPAD_INT_CheckRow+0x88>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	7a1b      	ldrb	r3, [r3, #8]
 8001a42:	e00e      	b.n	8001a62 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 4 */
	if (KEYPAD_ROW_4_CHECK) {
 8001a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <TM_KEYPAD_INT_CheckRow+0x8c>)
 8001a4a:	f001 f8b1 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <TM_KEYPAD_INT_CheckRow+0x78>
		return KEYPAD_INT_Buttons[3][column - 1];
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <TM_KEYPAD_INT_CheckRow+0x88>)
 8001a5a:	4413      	add	r3, r2
 8001a5c:	7b1b      	ldrb	r3, [r3, #12]
 8001a5e:	e000      	b.n	8001a62 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	
	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 8001a60:	23ff      	movs	r3, #255	; 0xff
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	20000008 	.word	0x20000008
 8001a74:	40020400 	.word	0x40020400

08001a78 <TM_KEYPAD_INT_Read>:


uint8_t TM_KEYPAD_INT_Read(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	TM_KEYPAD_INT_SetColumn(1);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7ff ff72 	bl	8001968 <TM_KEYPAD_INT_SetColumn>
	/* Check rows */
	check = TM_KEYPAD_INT_CheckRow(1);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f7ff ffaf 	bl	80019e8 <TM_KEYPAD_INT_CheckRow>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2bff      	cmp	r3, #255	; 0xff
 8001a92:	d001      	beq.n	8001a98 <TM_KEYPAD_INT_Read+0x20>
		return check;
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	e027      	b.n	8001ae8 <TM_KEYPAD_INT_Read+0x70>
	}
	
	/* Set row 2 to LOW */
	TM_KEYPAD_INT_SetColumn(2);
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f7ff ff65 	bl	8001968 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(2);
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	f7ff ffa2 	bl	80019e8 <TM_KEYPAD_INT_CheckRow>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2bff      	cmp	r3, #255	; 0xff
 8001aac:	d001      	beq.n	8001ab2 <TM_KEYPAD_INT_Read+0x3a>
		return check;
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	e01a      	b.n	8001ae8 <TM_KEYPAD_INT_Read+0x70>
	}
	
	/* Set row 3 to LOW */
	TM_KEYPAD_INT_SetColumn(3);
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	f7ff ff58 	bl	8001968 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(3);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f7ff ff95 	bl	80019e8 <TM_KEYPAD_INT_CheckRow>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2bff      	cmp	r3, #255	; 0xff
 8001ac6:	d001      	beq.n	8001acc <TM_KEYPAD_INT_Read+0x54>
		return check;
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	e00d      	b.n	8001ae8 <TM_KEYPAD_INT_Read+0x70>
	}


	/* Set column 4 to LOW */
	TM_KEYPAD_INT_SetColumn(4);
 8001acc:	2004      	movs	r0, #4
 8001ace:	f7ff ff4b 	bl	8001968 <TM_KEYPAD_INT_SetColumn>
	/* Check rows */
	check = TM_KEYPAD_INT_CheckRow(4);
 8001ad2:	2004      	movs	r0, #4
 8001ad4:	f7ff ff88 	bl	80019e8 <TM_KEYPAD_INT_CheckRow>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2bff      	cmp	r3, #255	; 0xff
 8001ae0:	d001      	beq.n	8001ae6 <TM_KEYPAD_INT_Read+0x6e>
		return check;
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	e000      	b.n	8001ae8 <TM_KEYPAD_INT_Read+0x70>
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 8001ae6:	23ff      	movs	r3, #255	; 0xff
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <TM_KEYPAD_Update>:


void TM_KEYPAD_Update(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;

	/* Every X ms read */
	if (++millis >= KEYPAD_READ_INTERVAL && KeypadStatus == TM_KEYPAD_Button_NOPRESSED) {
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <TM_KEYPAD_Update+0x38>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <TM_KEYPAD_Update+0x38>)
 8001afe:	801a      	strh	r2, [r3, #0]
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <TM_KEYPAD_Update+0x38>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	2bc7      	cmp	r3, #199	; 0xc7
 8001b06:	d90c      	bls.n	8001b22 <TM_KEYPAD_Update+0x32>
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <TM_KEYPAD_Update+0x3c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2bff      	cmp	r3, #255	; 0xff
 8001b0e:	d108      	bne.n	8001b22 <TM_KEYPAD_Update+0x32>
		/* Reset */
		millis = 0;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <TM_KEYPAD_Update+0x38>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	801a      	strh	r2, [r3, #0]

		/* Read keyboard */
		KeypadStatus = (TM_KEYPAD_Button_t) TM_KEYPAD_INT_Read();
 8001b16:	f7ff ffaf 	bl	8001a78 <TM_KEYPAD_INT_Read>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <TM_KEYPAD_Update+0x3c>)
 8001b20:	701a      	strb	r2, [r3, #0]
	}
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200000dc 	.word	0x200000dc
 8001b2c:	20000018 	.word	0x20000018

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b36:	490e      	ldr	r1, [pc, #56]	; (8001b70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b38:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b4c:	4c0b      	ldr	r4, [pc, #44]	; (8001b7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b5a:	f7ff fcdf 	bl	800151c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f002 fdfb 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7fe fdc9 	bl	80006f8 <main>
  bx  lr    
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001b74:	08004808 	.word	0x08004808
  ldr r2, =_sbss
 8001b78:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001b7c:	200002d4 	.word	0x200002d4

08001b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_Init+0x40>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_Init+0x40>)
 8001b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x40>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 fcd9 	bl	8002564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff faca 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fcf1 	bl	80025ce <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f000 fcb9 	bl	800257a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000004 	.word	0x20000004
 8001c20:	20000020 	.word	0x20000020
 8001c24:	2000001c 	.word	0x2000001c

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000020 	.word	0x20000020
 8001c4c:	200002d0 	.word	0x200002d0

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200002d0 	.word	0x200002d0

08001c68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e033      	b.n	8001ce6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fa8a 	bl	80011a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d118      	bne.n	8001cd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cae:	f023 0302 	bic.w	r3, r3, #2
 8001cb2:	f043 0202 	orr.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fa86 	bl	80021cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cd6:	e001      	b.n	8001cdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_Start+0x1a>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e097      	b.n	8001e3a <HAL_ADC_Start+0x14a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d018      	beq.n	8001d52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d30:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <HAL_ADC_Start+0x158>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a45      	ldr	r2, [pc, #276]	; (8001e4c <HAL_ADC_Start+0x15c>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0c9a      	lsrs	r2, r3, #18
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d44:	e002      	b.n	8001d4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f9      	bne.n	8001d46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d15f      	bne.n	8001e20 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d9e:	d106      	bne.n	8001dae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	f023 0206 	bic.w	r2, r3, #6
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
 8001dac:	e002      	b.n	8001db4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_ADC_Start+0x160>)
 8001dbe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dc8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10f      	bne.n	8001df6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d129      	bne.n	8001e38 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	e020      	b.n	8001e38 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a16      	ldr	r2, [pc, #88]	; (8001e54 <HAL_ADC_Start+0x164>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d11b      	bne.n	8001e38 <HAL_ADC_Start+0x148>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d114      	bne.n	8001e38 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	e00b      	b.n	8001e38 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f043 0210 	orr.w	r2, r3, #16
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	40012300 	.word	0x40012300
 8001e54:	40012000 	.word	0x40012000

08001e58 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e74:	d113      	bne.n	8001e9e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e84:	d10b      	bne.n	8001e9e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f043 0220 	orr.w	r2, r3, #32
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e063      	b.n	8001f66 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e9e:	f7ff fed7 	bl	8001c50 <HAL_GetTick>
 8001ea2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ea4:	e021      	b.n	8001eea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d01d      	beq.n	8001eea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_ADC_PollForConversion+0x6c>
 8001eb4:	f7ff fecc 	bl	8001c50 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d212      	bcs.n	8001eea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d00b      	beq.n	8001eea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f043 0204 	orr.w	r2, r3, #4
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e03d      	b.n	8001f66 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d1d6      	bne.n	8001ea6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0212 	mvn.w	r2, #18
 8001f00:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d123      	bne.n	8001f64 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d11f      	bne.n	8001f64 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d111      	bne.n	8001f64 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1c>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e105      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x228>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b09      	cmp	r3, #9
 8001fb2:	d925      	bls.n	8002000 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68d9      	ldr	r1, [r3, #12]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b1e      	subs	r3, #30
 8001fca:	2207      	movs	r2, #7
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68d9      	ldr	r1, [r3, #12]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	4603      	mov	r3, r0
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4403      	add	r3, r0
 8001ff2:	3b1e      	subs	r3, #30
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	e022      	b.n	8002046 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6919      	ldr	r1, [r3, #16]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	2207      	movs	r2, #7
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	400a      	ands	r2, r1
 8002022:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6919      	ldr	r1, [r3, #16]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	4618      	mov	r0, r3
 8002036:	4603      	mov	r3, r0
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4403      	add	r3, r0
 800203c:	409a      	lsls	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b06      	cmp	r3, #6
 800204c:	d824      	bhi.n	8002098 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b05      	subs	r3, #5
 8002060:	221f      	movs	r2, #31
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	400a      	ands	r2, r1
 800206e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	3b05      	subs	r3, #5
 800208a:	fa00 f203 	lsl.w	r2, r0, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	635a      	str	r2, [r3, #52]	; 0x34
 8002096:	e04c      	b.n	8002132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b0c      	cmp	r3, #12
 800209e:	d824      	bhi.n	80020ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	3b23      	subs	r3, #35	; 0x23
 80020b2:	221f      	movs	r2, #31
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43da      	mvns	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	400a      	ands	r2, r1
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	3b23      	subs	r3, #35	; 0x23
 80020dc:	fa00 f203 	lsl.w	r2, r0, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
 80020e8:	e023      	b.n	8002132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	3b41      	subs	r3, #65	; 0x41
 80020fc:	221f      	movs	r2, #31
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	400a      	ands	r2, r1
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	4618      	mov	r0, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	3b41      	subs	r3, #65	; 0x41
 8002126:	fa00 f203 	lsl.w	r2, r0, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_ADC_ConfigChannel+0x234>)
 8002134:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <HAL_ADC_ConfigChannel+0x238>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d109      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1cc>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b12      	cmp	r3, #18
 8002146:	d105      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_ADC_ConfigChannel+0x238>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d123      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x21e>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b10      	cmp	r3, #16
 8002164:	d003      	beq.n	800216e <HAL_ADC_ConfigChannel+0x1e6>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b11      	cmp	r3, #17
 800216c:	d11b      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b10      	cmp	r3, #16
 8002180:	d111      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_ADC_ConfigChannel+0x23c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_ADC_ConfigChannel+0x240>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	0c9a      	lsrs	r2, r3, #18
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002198:	e002      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f9      	bne.n	800219a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40012300 	.word	0x40012300
 80021c0:	40012000 	.word	0x40012000
 80021c4:	20000004 	.word	0x20000004
 80021c8:	431bde83 	.word	0x431bde83

080021cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d4:	4b79      	ldr	r3, [pc, #484]	; (80023bc <ADC_Init+0x1f0>)
 80021d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	021a      	lsls	r2, r3, #8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002224:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002246:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6899      	ldr	r1, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <ADC_Init+0x1f4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d022      	beq.n	80022aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002272:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6899      	ldr	r1, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	e00f      	b.n	80022ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0202 	bic.w	r2, r2, #2
 80022d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6899      	ldr	r1, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7e1b      	ldrb	r3, [r3, #24]
 80022e4:	005a      	lsls	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01b      	beq.n	8002330 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002306:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002316:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6859      	ldr	r1, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	3b01      	subs	r3, #1
 8002324:	035a      	lsls	r2, r3, #13
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	e007      	b.n	8002340 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	3b01      	subs	r3, #1
 800235c:	051a      	lsls	r2, r3, #20
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002374:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6899      	ldr	r1, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002382:	025a      	lsls	r2, r3, #9
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6899      	ldr	r1, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	029a      	lsls	r2, r3, #10
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	40012300 	.word	0x40012300
 80023c0:	0f000001 	.word	0x0f000001

080023c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e0:	4013      	ands	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f6:	4a04      	ldr	r2, [pc, #16]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	60d3      	str	r3, [r2, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <__NVIC_GetPriorityGrouping+0x18>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 0307 	and.w	r3, r3, #7
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	db0b      	blt.n	8002452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	4907      	ldr	r1, [pc, #28]	; (8002460 <__NVIC_EnableIRQ+0x38>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	2001      	movs	r0, #1
 800244a:	fa00 f202 	lsl.w	r2, r0, r2
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db0a      	blt.n	800248e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	490c      	ldr	r1, [pc, #48]	; (80024b0 <__NVIC_SetPriority+0x4c>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	0112      	lsls	r2, r2, #4
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	440b      	add	r3, r1
 8002488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800248c:	e00a      	b.n	80024a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4908      	ldr	r1, [pc, #32]	; (80024b4 <__NVIC_SetPriority+0x50>)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	3b04      	subs	r3, #4
 800249c:	0112      	lsls	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	440b      	add	r3, r1
 80024a2:	761a      	strb	r2, [r3, #24]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf28      	it	cs
 80024d6:	2304      	movcs	r3, #4
 80024d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3304      	adds	r3, #4
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d902      	bls.n	80024e8 <NVIC_EncodePriority+0x30>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3b03      	subs	r3, #3
 80024e6:	e000      	b.n	80024ea <NVIC_EncodePriority+0x32>
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43d9      	mvns	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	4313      	orrs	r3, r2
         );
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002530:	d301      	bcc.n	8002536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002532:	2301      	movs	r3, #1
 8002534:	e00f      	b.n	8002556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <SysTick_Config+0x40>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253e:	210f      	movs	r1, #15
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	f7ff ff8e 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <SysTick_Config+0x40>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <SysTick_Config+0x40>)
 8002550:	2207      	movs	r2, #7
 8002552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	e000e010 	.word	0xe000e010

08002564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff29 	bl	80023c4 <__NVIC_SetPriorityGrouping>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800258c:	f7ff ff3e 	bl	800240c <__NVIC_GetPriorityGrouping>
 8002590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ff8e 	bl	80024b8 <NVIC_EncodePriority>
 800259c:	4602      	mov	r2, r0
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff5d 	bl	8002464 <__NVIC_SetPriority>
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff31 	bl	8002428 <__NVIC_EnableIRQ>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffa2 	bl	8002520 <SysTick_Config>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7ff fb2c 	bl	8001c50 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e099      	b.n	8002738 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002624:	e00f      	b.n	8002646 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002626:	f7ff fb13 	bl	8001c50 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b05      	cmp	r3, #5
 8002632:	d908      	bls.n	8002646 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2203      	movs	r2, #3
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e078      	b.n	8002738 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e8      	bne.n	8002626 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_DMA_Init+0x158>)
 8002660:	4013      	ands	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002672:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	2b04      	cmp	r3, #4
 800269e:	d107      	bne.n	80026b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	4313      	orrs	r3, r2
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f023 0307 	bic.w	r3, r3, #7
 80026c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d117      	bne.n	800270a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00e      	beq.n	800270a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f85f 	bl	80027b0 <DMA_CheckFifoParam>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2240      	movs	r2, #64	; 0x40
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002706:	2301      	movs	r3, #1
 8002708:	e016      	b.n	8002738 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f816 	bl	8002744 <DMA_CalcBaseAndBitshift>
 8002718:	4603      	mov	r3, r0
 800271a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	223f      	movs	r2, #63	; 0x3f
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	f010803f 	.word	0xf010803f

08002744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	3b10      	subs	r3, #16
 8002754:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800275e:	4a13      	ldr	r2, [pc, #76]	; (80027ac <DMA_CalcBaseAndBitshift+0x68>)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d909      	bls.n	8002786 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	1d1a      	adds	r2, r3, #4
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	659a      	str	r2, [r3, #88]	; 0x58
 8002784:	e007      	b.n	8002796 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800278e:	f023 0303 	bic.w	r3, r3, #3
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	aaaaaaab 	.word	0xaaaaaaab
 80027ac:	080047f0 	.word	0x080047f0

080027b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11f      	bne.n	800280a <DMA_CheckFifoParam+0x5a>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d856      	bhi.n	800287e <DMA_CheckFifoParam+0xce>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <DMA_CheckFifoParam+0x28>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	080027fb 	.word	0x080027fb
 80027e0:	080027e9 	.word	0x080027e9
 80027e4:	0800287f 	.word	0x0800287f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d046      	beq.n	8002882 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f8:	e043      	b.n	8002882 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002802:	d140      	bne.n	8002886 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002808:	e03d      	b.n	8002886 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002812:	d121      	bne.n	8002858 <DMA_CheckFifoParam+0xa8>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d837      	bhi.n	800288a <DMA_CheckFifoParam+0xda>
 800281a:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <DMA_CheckFifoParam+0x70>)
 800281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002820:	08002831 	.word	0x08002831
 8002824:	08002837 	.word	0x08002837
 8002828:	08002831 	.word	0x08002831
 800282c:	08002849 	.word	0x08002849
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      break;
 8002834:	e030      	b.n	8002898 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d025      	beq.n	800288e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002846:	e022      	b.n	800288e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002850:	d11f      	bne.n	8002892 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002856:	e01c      	b.n	8002892 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d903      	bls.n	8002866 <DMA_CheckFifoParam+0xb6>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d003      	beq.n	800286c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002864:	e018      	b.n	8002898 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
      break;
 800286a:	e015      	b.n	8002898 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00e      	beq.n	8002896 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
      break;
 800287c:	e00b      	b.n	8002896 <DMA_CheckFifoParam+0xe6>
      break;
 800287e:	bf00      	nop
 8002880:	e00a      	b.n	8002898 <DMA_CheckFifoParam+0xe8>
      break;
 8002882:	bf00      	nop
 8002884:	e008      	b.n	8002898 <DMA_CheckFifoParam+0xe8>
      break;
 8002886:	bf00      	nop
 8002888:	e006      	b.n	8002898 <DMA_CheckFifoParam+0xe8>
      break;
 800288a:	bf00      	nop
 800288c:	e004      	b.n	8002898 <DMA_CheckFifoParam+0xe8>
      break;
 800288e:	bf00      	nop
 8002890:	e002      	b.n	8002898 <DMA_CheckFifoParam+0xe8>
      break;   
 8002892:	bf00      	nop
 8002894:	e000      	b.n	8002898 <DMA_CheckFifoParam+0xe8>
      break;
 8002896:	bf00      	nop
    }
  } 
  
  return status; 
 8002898:	7bfb      	ldrb	r3, [r7, #15]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	e159      	b.n	8002b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c4:	2201      	movs	r2, #1
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	429a      	cmp	r2, r3
 80028de:	f040 8148 	bne.w	8002b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d005      	beq.n	80028fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d130      	bne.n	800295c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2203      	movs	r2, #3
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002930:	2201      	movs	r2, #1
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 0201 	and.w	r2, r3, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b03      	cmp	r3, #3
 8002966:	d017      	beq.n	8002998 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2203      	movs	r2, #3
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d123      	bne.n	80029ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	08da      	lsrs	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3208      	adds	r2, #8
 80029ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	08da      	lsrs	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3208      	adds	r2, #8
 80029e6:	69b9      	ldr	r1, [r7, #24]
 80029e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0203 	and.w	r2, r3, #3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80a2 	beq.w	8002b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b57      	ldr	r3, [pc, #348]	; (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a4a:	4a52      	ldr	r2, [pc, #328]	; (8002b94 <HAL_GPIO_Init+0x2ec>)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	3302      	adds	r3, #2
 8002a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	220f      	movs	r2, #15
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a49      	ldr	r2, [pc, #292]	; (8002b98 <HAL_GPIO_Init+0x2f0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0x202>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <HAL_GPIO_Init+0x2f4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0x1fe>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a47      	ldr	r2, [pc, #284]	; (8002ba0 <HAL_GPIO_Init+0x2f8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a46      	ldr	r2, [pc, #280]	; (8002ba4 <HAL_GPIO_Init+0x2fc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x1f6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a45      	ldr	r2, [pc, #276]	; (8002ba8 <HAL_GPIO_Init+0x300>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_Init+0x1f2>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e008      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e004      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	f002 0203 	and.w	r2, r2, #3
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	4093      	lsls	r3, r2
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002abc:	4935      	ldr	r1, [pc, #212]	; (8002b94 <HAL_GPIO_Init+0x2ec>)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aca:	4b38      	ldr	r3, [pc, #224]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aee:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b18:	4a24      	ldr	r2, [pc, #144]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b42:	4a1a      	ldr	r2, [pc, #104]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3301      	adds	r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	f67f aea2 	bls.w	80028c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40013800 	.word	0x40013800
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	40020400 	.word	0x40020400
 8002ba0:	40020800 	.word	0x40020800
 8002ba4:	40020c00 	.word	0x40020c00
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	e001      	b.n	8002bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
 8002bec:	4613      	mov	r3, r2
 8002bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf0:	787b      	ldrb	r3, [r7, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bfc:	e003      	b.n	8002c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	041a      	lsls	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	619a      	str	r2, [r3, #24]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e12b      	b.n	8002e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe faf4 	bl	8001228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c78:	f000 fd30 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8002c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a81      	ldr	r2, [pc, #516]	; (8002e88 <HAL_I2C_Init+0x274>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d807      	bhi.n	8002c98 <HAL_I2C_Init+0x84>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a80      	ldr	r2, [pc, #512]	; (8002e8c <HAL_I2C_Init+0x278>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	bf94      	ite	ls
 8002c90:	2301      	movls	r3, #1
 8002c92:	2300      	movhi	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	e006      	b.n	8002ca6 <HAL_I2C_Init+0x92>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a7d      	ldr	r2, [pc, #500]	; (8002e90 <HAL_I2C_Init+0x27c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	bf94      	ite	ls
 8002ca0:	2301      	movls	r3, #1
 8002ca2:	2300      	movhi	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0e7      	b.n	8002e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a78      	ldr	r2, [pc, #480]	; (8002e94 <HAL_I2C_Init+0x280>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0c9b      	lsrs	r3, r3, #18
 8002cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a6a      	ldr	r2, [pc, #424]	; (8002e88 <HAL_I2C_Init+0x274>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d802      	bhi.n	8002ce8 <HAL_I2C_Init+0xd4>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	e009      	b.n	8002cfc <HAL_I2C_Init+0xe8>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	4a69      	ldr	r2, [pc, #420]	; (8002e98 <HAL_I2C_Init+0x284>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	495c      	ldr	r1, [pc, #368]	; (8002e88 <HAL_I2C_Init+0x274>)
 8002d18:	428b      	cmp	r3, r1
 8002d1a:	d819      	bhi.n	8002d50 <HAL_I2C_Init+0x13c>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1e59      	subs	r1, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2a:	1c59      	adds	r1, r3, #1
 8002d2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d30:	400b      	ands	r3, r1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_I2C_Init+0x138>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1e59      	subs	r1, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4a:	e051      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	e04f      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d111      	bne.n	8002d7c <HAL_I2C_Init+0x168>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e58      	subs	r0, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	440b      	add	r3, r1
 8002d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e012      	b.n	8002da2 <HAL_I2C_Init+0x18e>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	0099      	lsls	r1, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d92:	3301      	adds	r3, #1
 8002d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Init+0x196>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e022      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10e      	bne.n	8002dd0 <HAL_I2C_Init+0x1bc>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1e58      	subs	r0, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	440b      	add	r3, r1
 8002dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dce:	e00f      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e58      	subs	r0, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	0099      	lsls	r1, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	6809      	ldr	r1, [r1, #0]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6911      	ldr	r1, [r2, #16]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68d2      	ldr	r2, [r2, #12]
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	000186a0 	.word	0x000186a0
 8002e8c:	001e847f 	.word	0x001e847f
 8002e90:	003d08ff 	.word	0x003d08ff
 8002e94:	431bde83 	.word	0x431bde83
 8002e98:	10624dd3 	.word	0x10624dd3

08002e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e264      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d075      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eba:	4ba3      	ldr	r3, [pc, #652]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d00c      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec6:	4ba0      	ldr	r3, [pc, #640]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d112      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed2:	4b9d      	ldr	r3, [pc, #628]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ede:	d10b      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	4b99      	ldr	r3, [pc, #612]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d05b      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x108>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d157      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e23f      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d106      	bne.n	8002f10 <HAL_RCC_OscConfig+0x74>
 8002f02:	4b91      	ldr	r3, [pc, #580]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a90      	ldr	r2, [pc, #576]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e01d      	b.n	8002f4c <HAL_RCC_OscConfig+0xb0>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x98>
 8002f1a:	4b8b      	ldr	r3, [pc, #556]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a8a      	ldr	r2, [pc, #552]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b88      	ldr	r3, [pc, #544]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a87      	ldr	r2, [pc, #540]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0xb0>
 8002f34:	4b84      	ldr	r3, [pc, #528]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a83      	ldr	r2, [pc, #524]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b81      	ldr	r3, [pc, #516]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a80      	ldr	r2, [pc, #512]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe fe7c 	bl	8001c50 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fe fe78 	bl	8001c50 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e204      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b76      	ldr	r3, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0xc0>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fe68 	bl	8001c50 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe fe64 	bl	8001c50 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e1f0      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	4b6c      	ldr	r3, [pc, #432]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0xe8>
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d063      	beq.n	800307a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fb2:	4b65      	ldr	r3, [pc, #404]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fbe:	4b62      	ldr	r3, [pc, #392]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d11c      	bne.n	8003004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fca:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d116      	bne.n	8003004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	4b5c      	ldr	r3, [pc, #368]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_RCC_OscConfig+0x152>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e1c4      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fee:	4b56      	ldr	r3, [pc, #344]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4952      	ldr	r1, [pc, #328]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	e03a      	b.n	800307a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800300c:	4b4f      	ldr	r3, [pc, #316]	; (800314c <HAL_RCC_OscConfig+0x2b0>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe fe1d 	bl	8001c50 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301a:	f7fe fe19 	bl	8001c50 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e1a5      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	4b46      	ldr	r3, [pc, #280]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003038:	4b43      	ldr	r3, [pc, #268]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4940      	ldr	r1, [pc, #256]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
 800304c:	e015      	b.n	800307a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304e:	4b3f      	ldr	r3, [pc, #252]	; (800314c <HAL_RCC_OscConfig+0x2b0>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fdfc 	bl	8001c50 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305c:	f7fe fdf8 	bl	8001c50 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e184      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	4b36      	ldr	r3, [pc, #216]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d030      	beq.n	80030e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d016      	beq.n	80030bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308e:	4b30      	ldr	r3, [pc, #192]	; (8003150 <HAL_RCC_OscConfig+0x2b4>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7fe fddc 	bl	8001c50 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309c:	f7fe fdd8 	bl	8001c50 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e164      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x200>
 80030ba:	e015      	b.n	80030e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030bc:	4b24      	ldr	r3, [pc, #144]	; (8003150 <HAL_RCC_OscConfig+0x2b4>)
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fe fdc5 	bl	8001c50 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ca:	f7fe fdc1 	bl	8001c50 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e14d      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030dc:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80a0 	beq.w	8003236 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fa:	4b13      	ldr	r3, [pc, #76]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10f      	bne.n	8003126 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003114:	6413      	str	r3, [r2, #64]	; 0x40
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003122:	2301      	movs	r3, #1
 8003124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_OscConfig+0x2b8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d121      	bne.n	8003176 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_RCC_OscConfig+0x2b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HAL_RCC_OscConfig+0x2b8>)
 8003138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313e:	f7fe fd87 	bl	8001c50 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	e011      	b.n	800316a <HAL_RCC_OscConfig+0x2ce>
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	42470000 	.word	0x42470000
 8003150:	42470e80 	.word	0x42470e80
 8003154:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003158:	f7fe fd7a 	bl	8001c50 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e106      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b85      	ldr	r3, [pc, #532]	; (8003380 <HAL_RCC_OscConfig+0x4e4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d106      	bne.n	800318c <HAL_RCC_OscConfig+0x2f0>
 800317e:	4b81      	ldr	r3, [pc, #516]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a80      	ldr	r2, [pc, #512]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	e01c      	b.n	80031c6 <HAL_RCC_OscConfig+0x32a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b05      	cmp	r3, #5
 8003192:	d10c      	bne.n	80031ae <HAL_RCC_OscConfig+0x312>
 8003194:	4b7b      	ldr	r3, [pc, #492]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a7a      	ldr	r2, [pc, #488]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
 80031a0:	4b78      	ldr	r3, [pc, #480]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a77      	ldr	r2, [pc, #476]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
 80031ac:	e00b      	b.n	80031c6 <HAL_RCC_OscConfig+0x32a>
 80031ae:	4b75      	ldr	r3, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	4a74      	ldr	r2, [pc, #464]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ba:	4b72      	ldr	r3, [pc, #456]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a71      	ldr	r2, [pc, #452]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d015      	beq.n	80031fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fe fd3f 	bl	8001c50 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d4:	e00a      	b.n	80031ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fe fd3b 	bl	8001c50 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e0c5      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ee      	beq.n	80031d6 <HAL_RCC_OscConfig+0x33a>
 80031f8:	e014      	b.n	8003224 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fa:	f7fe fd29 	bl	8001c50 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fe fd25 	bl	8001c50 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e0af      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	4b5a      	ldr	r3, [pc, #360]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1ee      	bne.n	8003202 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003224:	7dfb      	ldrb	r3, [r7, #23]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d105      	bne.n	8003236 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322a:	4b56      	ldr	r3, [pc, #344]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a55      	ldr	r2, [pc, #340]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 8003230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 809b 	beq.w	8003376 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003240:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b08      	cmp	r3, #8
 800324a:	d05c      	beq.n	8003306 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d141      	bne.n	80032d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003254:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <HAL_RCC_OscConfig+0x4ec>)
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe fcf9 	bl	8001c50 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003262:	f7fe fcf5 	bl	8001c50 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e081      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003274:	4b43      	ldr	r3, [pc, #268]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f0      	bne.n	8003262 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	019b      	lsls	r3, r3, #6
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	3b01      	subs	r3, #1
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	4937      	ldr	r1, [pc, #220]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032aa:	4b37      	ldr	r3, [pc, #220]	; (8003388 <HAL_RCC_OscConfig+0x4ec>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fe fcce 	bl	8001c50 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fe fcca 	bl	8001c50 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e056      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x41c>
 80032d6:	e04e      	b.n	8003376 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_RCC_OscConfig+0x4ec>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fe fcb7 	bl	8001c50 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fe fcb3 	bl	8001c50 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e03f      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f8:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x44a>
 8003304:	e037      	b.n	8003376 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e032      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003312:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <HAL_RCC_OscConfig+0x4e8>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d028      	beq.n	8003372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d121      	bne.n	8003372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d11a      	bne.n	8003372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003342:	4013      	ands	r3, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003348:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334a:	4293      	cmp	r3, r2
 800334c:	d111      	bne.n	8003372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	3b01      	subs	r3, #1
 800335c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d107      	bne.n	8003372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40007000 	.word	0x40007000
 8003384:	40023800 	.word	0x40023800
 8003388:	42470060 	.word	0x42470060

0800338c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0cc      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a0:	4b68      	ldr	r3, [pc, #416]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d90c      	bls.n	80033c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b65      	ldr	r3, [pc, #404]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b63      	ldr	r3, [pc, #396]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0b8      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d020      	beq.n	8003416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e0:	4b59      	ldr	r3, [pc, #356]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a58      	ldr	r2, [pc, #352]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f8:	4b53      	ldr	r3, [pc, #332]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a52      	ldr	r2, [pc, #328]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003404:	4b50      	ldr	r3, [pc, #320]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	494d      	ldr	r1, [pc, #308]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d044      	beq.n	80034ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d119      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e07f      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d003      	beq.n	800344a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003446:	2b03      	cmp	r3, #3
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e06f      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e067      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346a:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f023 0203 	bic.w	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4934      	ldr	r1, [pc, #208]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	4313      	orrs	r3, r2
 800347a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800347c:	f7fe fbe8 	bl	8001c50 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	e00a      	b.n	800349a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003484:	f7fe fbe4 	bl	8001c50 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e04f      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 020c 	and.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d1eb      	bne.n	8003484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d20c      	bcs.n	80034d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ba:	4b22      	ldr	r3, [pc, #136]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e032      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4916      	ldr	r1, [pc, #88]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	490e      	ldr	r1, [pc, #56]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003512:	f000 f821 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8003516:	4602      	mov	r2, r0
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	490a      	ldr	r1, [pc, #40]	; (800354c <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	5ccb      	ldrb	r3, [r1, r3]
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	4a09      	ldr	r2, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe fb48 	bl	8001bc8 <HAL_InitTick>

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023c00 	.word	0x40023c00
 8003548:	40023800 	.word	0x40023800
 800354c:	080047d8 	.word	0x080047d8
 8003550:	20000004 	.word	0x20000004
 8003554:	2000001c 	.word	0x2000001c

08003558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800355e:	2100      	movs	r1, #0
 8003560:	6079      	str	r1, [r7, #4]
 8003562:	2100      	movs	r1, #0
 8003564:	60f9      	str	r1, [r7, #12]
 8003566:	2100      	movs	r1, #0
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800356a:	2100      	movs	r1, #0
 800356c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356e:	4952      	ldr	r1, [pc, #328]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003570:	6889      	ldr	r1, [r1, #8]
 8003572:	f001 010c 	and.w	r1, r1, #12
 8003576:	2908      	cmp	r1, #8
 8003578:	d00d      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x3e>
 800357a:	2908      	cmp	r1, #8
 800357c:	f200 8094 	bhi.w	80036a8 <HAL_RCC_GetSysClockFreq+0x150>
 8003580:	2900      	cmp	r1, #0
 8003582:	d002      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x32>
 8003584:	2904      	cmp	r1, #4
 8003586:	d003      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x38>
 8003588:	e08e      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800358a:	4b4c      	ldr	r3, [pc, #304]	; (80036bc <HAL_RCC_GetSysClockFreq+0x164>)
 800358c:	60bb      	str	r3, [r7, #8]
       break;
 800358e:	e08e      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003590:	4b4b      	ldr	r3, [pc, #300]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003592:	60bb      	str	r3, [r7, #8]
      break;
 8003594:	e08b      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003596:	4948      	ldr	r1, [pc, #288]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003598:	6849      	ldr	r1, [r1, #4]
 800359a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800359e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a0:	4945      	ldr	r1, [pc, #276]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035a2:	6849      	ldr	r1, [r1, #4]
 80035a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80035a8:	2900      	cmp	r1, #0
 80035aa:	d024      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ac:	4942      	ldr	r1, [pc, #264]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035ae:	6849      	ldr	r1, [r1, #4]
 80035b0:	0989      	lsrs	r1, r1, #6
 80035b2:	4608      	mov	r0, r1
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80035bc:	f04f 0500 	mov.w	r5, #0
 80035c0:	ea00 0204 	and.w	r2, r0, r4
 80035c4:	ea01 0305 	and.w	r3, r1, r5
 80035c8:	493d      	ldr	r1, [pc, #244]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035ca:	fb01 f003 	mul.w	r0, r1, r3
 80035ce:	2100      	movs	r1, #0
 80035d0:	fb01 f102 	mul.w	r1, r1, r2
 80035d4:	1844      	adds	r4, r0, r1
 80035d6:	493a      	ldr	r1, [pc, #232]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035d8:	fba2 0101 	umull	r0, r1, r2, r1
 80035dc:	1863      	adds	r3, r4, r1
 80035de:	4619      	mov	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	f7fc fdf4 	bl	80001d4 <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4613      	mov	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e04a      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f6:	4b30      	ldr	r3, [pc, #192]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	461a      	mov	r2, r3
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	ea02 0400 	and.w	r4, r2, r0
 800360e:	ea03 0501 	and.w	r5, r3, r1
 8003612:	4620      	mov	r0, r4
 8003614:	4629      	mov	r1, r5
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	014b      	lsls	r3, r1, #5
 8003620:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003624:	0142      	lsls	r2, r0, #5
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	1b00      	subs	r0, r0, r4
 800362c:	eb61 0105 	sbc.w	r1, r1, r5
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	018b      	lsls	r3, r1, #6
 800363a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800363e:	0182      	lsls	r2, r0, #6
 8003640:	1a12      	subs	r2, r2, r0
 8003642:	eb63 0301 	sbc.w	r3, r3, r1
 8003646:	f04f 0000 	mov.w	r0, #0
 800364a:	f04f 0100 	mov.w	r1, #0
 800364e:	00d9      	lsls	r1, r3, #3
 8003650:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003654:	00d0      	lsls	r0, r2, #3
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	1912      	adds	r2, r2, r4
 800365c:	eb45 0303 	adc.w	r3, r5, r3
 8003660:	f04f 0000 	mov.w	r0, #0
 8003664:	f04f 0100 	mov.w	r1, #0
 8003668:	0299      	lsls	r1, r3, #10
 800366a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800366e:	0290      	lsls	r0, r2, #10
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	461a      	mov	r2, r3
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	f7fc fda8 	bl	80001d4 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4613      	mov	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	3301      	adds	r3, #1
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	60bb      	str	r3, [r7, #8]
      break;
 80036a6:	e002      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_RCC_GetSysClockFreq+0x164>)
 80036aa:	60bb      	str	r3, [r7, #8]
      break;
 80036ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ae:	68bb      	ldr	r3, [r7, #8]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bdb0      	pop	{r4, r5, r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	00f42400 	.word	0x00f42400
 80036c0:	017d7840 	.word	0x017d7840

080036c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000004 	.word	0x20000004

080036dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036e0:	f7ff fff0 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0a9b      	lsrs	r3, r3, #10
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4903      	ldr	r1, [pc, #12]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	080047e8 	.word	0x080047e8

08003704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003708:	f7ff ffdc 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0b5b      	lsrs	r3, r3, #13
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	080047e8 	.word	0x080047e8

0800372c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e041      	b.n	80037c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd fdf8 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 fc1c 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d001      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e044      	b.n	800386e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1e      	ldr	r2, [pc, #120]	; (800387c <HAL_TIM_Base_Start_IT+0xb0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d018      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x6c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380e:	d013      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x6c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1a      	ldr	r2, [pc, #104]	; (8003880 <HAL_TIM_Base_Start_IT+0xb4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x6c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a19      	ldr	r2, [pc, #100]	; (8003884 <HAL_TIM_Base_Start_IT+0xb8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x6c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a17      	ldr	r2, [pc, #92]	; (8003888 <HAL_TIM_Base_Start_IT+0xbc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x6c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a16      	ldr	r2, [pc, #88]	; (800388c <HAL_TIM_Base_Start_IT+0xc0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d111      	bne.n	800385c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b06      	cmp	r3, #6
 8003848:	d010      	beq.n	800386c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385a:	e007      	b.n	800386c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40014000 	.word	0x40014000

08003890 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e041      	b.n	8003928 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f839 	bl	8003930 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f000 fb69 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0208 	bic.w	r2, r2, #8
 80038e4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6819      	ldr	r1, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e097      	b.n	8003a88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fd fca3 	bl	80012b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003988:	f023 0307 	bic.w	r3, r3, #7
 800398c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3304      	adds	r3, #4
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f000 fb05 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c6:	f023 0303 	bic.w	r3, r3, #3
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	4313      	orrs	r3, r2
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039e4:	f023 030c 	bic.w	r3, r3, #12
 80039e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	4313      	orrs	r3, r2
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	011a      	lsls	r2, r3, #4
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	031b      	lsls	r3, r3, #12
 8003a14:	4313      	orrs	r3, r2
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	4313      	orrs	r3, r2
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aa8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ab0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ab8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d110      	bne.n	8003ae2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d102      	bne.n	8003acc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ac6:	7b7b      	ldrb	r3, [r7, #13]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d001      	beq.n	8003ad0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e069      	b.n	8003ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ae0:	e031      	b.n	8003b46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d110      	bne.n	8003b0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ae8:	7bbb      	ldrb	r3, [r7, #14]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d102      	bne.n	8003af4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003aee:	7b3b      	ldrb	r3, [r7, #12]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d001      	beq.n	8003af8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e055      	b.n	8003ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b08:	e01d      	b.n	8003b46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d108      	bne.n	8003b22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b10:	7bbb      	ldrb	r3, [r7, #14]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b16:	7b7b      	ldrb	r3, [r7, #13]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d102      	bne.n	8003b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b1c:	7b3b      	ldrb	r3, [r7, #12]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d001      	beq.n	8003b26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e03e      	b.n	8003ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_TIM_Encoder_Start+0xc4>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d008      	beq.n	8003b64 <HAL_TIM_Encoder_Start+0xd4>
 8003b52:	e00f      	b.n	8003b74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fb3d 	bl	80041dc <TIM_CCxChannelCmd>
      break;
 8003b62:	e016      	b.n	8003b92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	2104      	movs	r1, #4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fb35 	bl	80041dc <TIM_CCxChannelCmd>
      break;
 8003b72:	e00e      	b.n	8003b92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fb2d 	bl	80041dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	2104      	movs	r1, #4
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fb26 	bl	80041dc <TIM_CCxChannelCmd>
      break;
 8003b90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d122      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d11b      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0202 	mvn.w	r2, #2
 8003bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f9bc 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9ae 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f9bf 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0204 	mvn.w	r2, #4
 8003c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2202      	movs	r2, #2
 8003c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f992 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f984 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f995 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d122      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d11b      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0208 	mvn.w	r2, #8
 8003c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2204      	movs	r2, #4
 8003c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f968 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003c9c:	e005      	b.n	8003caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f95a 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f96b 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d122      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d11b      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0210 	mvn.w	r2, #16
 8003cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2208      	movs	r2, #8
 8003cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f93e 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003cf0:	e005      	b.n	8003cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f930 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f941 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d10e      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d107      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0201 	mvn.w	r2, #1
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f90a 	bl	8003f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3a:	2b80      	cmp	r3, #128	; 0x80
 8003d3c:	d10e      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d48:	2b80      	cmp	r3, #128	; 0x80
 8003d4a:	d107      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fade 	bl	8004318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d10e      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d107      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f906 	bl	8003f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d10e      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d107      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0220 	mvn.w	r2, #32
 8003dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 faa8 	bl	8004304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIM_ConfigClockSource+0x18>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e0b3      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x180>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0c:	d03e      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0xd0>
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e12:	f200 8087 	bhi.w	8003f24 <HAL_TIM_ConfigClockSource+0x168>
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	f000 8085 	beq.w	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e22:	d87f      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x168>
 8003e24:	2b70      	cmp	r3, #112	; 0x70
 8003e26:	d01a      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0xa2>
 8003e28:	2b70      	cmp	r3, #112	; 0x70
 8003e2a:	d87b      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x168>
 8003e2c:	2b60      	cmp	r3, #96	; 0x60
 8003e2e:	d050      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x116>
 8003e30:	2b60      	cmp	r3, #96	; 0x60
 8003e32:	d877      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x168>
 8003e34:	2b50      	cmp	r3, #80	; 0x50
 8003e36:	d03c      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0xf6>
 8003e38:	2b50      	cmp	r3, #80	; 0x50
 8003e3a:	d873      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x168>
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	d058      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x136>
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d86f      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x168>
 8003e44:	2b30      	cmp	r3, #48	; 0x30
 8003e46:	d064      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x156>
 8003e48:	2b30      	cmp	r3, #48	; 0x30
 8003e4a:	d86b      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x168>
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d060      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x156>
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d867      	bhi.n	8003f24 <HAL_TIM_ConfigClockSource+0x168>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05c      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x156>
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d05a      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e5c:	e062      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6899      	ldr	r1, [r3, #8]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f000 f995 	bl	800419c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	609a      	str	r2, [r3, #8]
      break;
 8003e8a:	e04e      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	6899      	ldr	r1, [r3, #8]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f000 f97e 	bl	800419c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eae:	609a      	str	r2, [r3, #8]
      break;
 8003eb0:	e03b      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6859      	ldr	r1, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f000 f8f2 	bl	80040a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2150      	movs	r1, #80	; 0x50
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f94b 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003ed0:	e02b      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f000 f911 	bl	8004106 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2160      	movs	r1, #96	; 0x60
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f93b 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003ef0:	e01b      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	461a      	mov	r2, r3
 8003f00:	f000 f8d2 	bl	80040a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2140      	movs	r1, #64	; 0x40
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f92b 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003f10:	e00b      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f000 f922 	bl	8004166 <TIM_ITRx_SetConfig>
        break;
 8003f22:	e002      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f24:	bf00      	nop
 8003f26:	e000      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a34      	ldr	r2, [pc, #208]	; (800408c <TIM_Base_SetConfig+0xe4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00f      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a31      	ldr	r2, [pc, #196]	; (8004090 <TIM_Base_SetConfig+0xe8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a30      	ldr	r2, [pc, #192]	; (8004094 <TIM_Base_SetConfig+0xec>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a2f      	ldr	r2, [pc, #188]	; (8004098 <TIM_Base_SetConfig+0xf0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a25      	ldr	r2, [pc, #148]	; (800408c <TIM_Base_SetConfig+0xe4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01b      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d017      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <TIM_Base_SetConfig+0xe8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a21      	ldr	r2, [pc, #132]	; (8004094 <TIM_Base_SetConfig+0xec>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00f      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a20      	ldr	r2, [pc, #128]	; (8004098 <TIM_Base_SetConfig+0xf0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a1f      	ldr	r2, [pc, #124]	; (800409c <TIM_Base_SetConfig+0xf4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <TIM_Base_SetConfig+0xf8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <TIM_Base_SetConfig+0xfc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a08      	ldr	r2, [pc, #32]	; (800408c <TIM_Base_SetConfig+0xe4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d103      	bne.n	8004078 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	615a      	str	r2, [r3, #20]
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40014000 	.word	0x40014000
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800

080040a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0201 	bic.w	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f023 030a 	bic.w	r3, r3, #10
 80040e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004106:	b480      	push	{r7}
 8004108:	b087      	sub	sp, #28
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0210 	bic.w	r2, r3, #16
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	031b      	lsls	r3, r3, #12
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004142:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	621a      	str	r2, [r3, #32]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	f043 0307 	orr.w	r3, r3, #7
 8004188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	609a      	str	r2, [r3, #8]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	021a      	lsls	r2, r3, #8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	431a      	orrs	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2201      	movs	r2, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a1a      	ldr	r2, [r3, #32]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	401a      	ands	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1a      	ldr	r2, [r3, #32]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	fa01 f303 	lsl.w	r3, r1, r3
 8004214:	431a      	orrs	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800423c:	2302      	movs	r3, #2
 800423e:	e050      	b.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1c      	ldr	r2, [pc, #112]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d018      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428c:	d013      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a18      	ldr	r2, [pc, #96]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00e      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a15      	ldr	r2, [pc, #84]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a13      	ldr	r2, [pc, #76]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d10c      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40000800 	.word	0x40000800
 80042fc:	40000c00 	.word	0x40000c00
 8004300:	40014000 	.word	0x40014000

08004304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e03f      	b.n	80043be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fd f81e 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	; 0x24
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800436e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f829 	bl	80043c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	b09f      	sub	sp, #124	; 0x7c
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043de:	68d9      	ldr	r1, [r3, #12]
 80043e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	ea40 0301 	orr.w	r3, r0, r1
 80043e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	4313      	orrs	r3, r2
 8004400:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800440c:	f021 010c 	bic.w	r1, r1, #12
 8004410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004416:	430b      	orrs	r3, r1
 8004418:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800441a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004426:	6999      	ldr	r1, [r3, #24]
 8004428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	ea40 0301 	orr.w	r3, r0, r1
 8004430:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4bc5      	ldr	r3, [pc, #788]	; (800474c <UART_SetConfig+0x384>)
 8004438:	429a      	cmp	r2, r3
 800443a:	d004      	beq.n	8004446 <UART_SetConfig+0x7e>
 800443c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4bc3      	ldr	r3, [pc, #780]	; (8004750 <UART_SetConfig+0x388>)
 8004442:	429a      	cmp	r2, r3
 8004444:	d103      	bne.n	800444e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004446:	f7ff f95d 	bl	8003704 <HAL_RCC_GetPCLK2Freq>
 800444a:	6778      	str	r0, [r7, #116]	; 0x74
 800444c:	e002      	b.n	8004454 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800444e:	f7ff f945 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8004452:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445c:	f040 80b6 	bne.w	80045cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004462:	461c      	mov	r4, r3
 8004464:	f04f 0500 	mov.w	r5, #0
 8004468:	4622      	mov	r2, r4
 800446a:	462b      	mov	r3, r5
 800446c:	1891      	adds	r1, r2, r2
 800446e:	6439      	str	r1, [r7, #64]	; 0x40
 8004470:	415b      	adcs	r3, r3
 8004472:	647b      	str	r3, [r7, #68]	; 0x44
 8004474:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004478:	1912      	adds	r2, r2, r4
 800447a:	eb45 0303 	adc.w	r3, r5, r3
 800447e:	f04f 0000 	mov.w	r0, #0
 8004482:	f04f 0100 	mov.w	r1, #0
 8004486:	00d9      	lsls	r1, r3, #3
 8004488:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800448c:	00d0      	lsls	r0, r2, #3
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	1911      	adds	r1, r2, r4
 8004494:	6639      	str	r1, [r7, #96]	; 0x60
 8004496:	416b      	adcs	r3, r5
 8004498:	667b      	str	r3, [r7, #100]	; 0x64
 800449a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	461a      	mov	r2, r3
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	1891      	adds	r1, r2, r2
 80044a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044a8:	415b      	adcs	r3, r3
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80044b4:	f7fb fe8e 	bl	80001d4 <__aeabi_uldivmod>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4ba5      	ldr	r3, [pc, #660]	; (8004754 <UART_SetConfig+0x38c>)
 80044be:	fba3 2302 	umull	r2, r3, r3, r2
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	011e      	lsls	r6, r3, #4
 80044c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c8:	461c      	mov	r4, r3
 80044ca:	f04f 0500 	mov.w	r5, #0
 80044ce:	4622      	mov	r2, r4
 80044d0:	462b      	mov	r3, r5
 80044d2:	1891      	adds	r1, r2, r2
 80044d4:	6339      	str	r1, [r7, #48]	; 0x30
 80044d6:	415b      	adcs	r3, r3
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34
 80044da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044de:	1912      	adds	r2, r2, r4
 80044e0:	eb45 0303 	adc.w	r3, r5, r3
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	00d9      	lsls	r1, r3, #3
 80044ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f2:	00d0      	lsls	r0, r2, #3
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	1911      	adds	r1, r2, r4
 80044fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80044fc:	416b      	adcs	r3, r5
 80044fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	461a      	mov	r2, r3
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	1891      	adds	r1, r2, r2
 800450c:	62b9      	str	r1, [r7, #40]	; 0x28
 800450e:	415b      	adcs	r3, r3
 8004510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004516:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800451a:	f7fb fe5b 	bl	80001d4 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4b8c      	ldr	r3, [pc, #560]	; (8004754 <UART_SetConfig+0x38c>)
 8004524:	fba3 1302 	umull	r1, r3, r3, r2
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	2164      	movs	r1, #100	; 0x64
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	3332      	adds	r3, #50	; 0x32
 8004536:	4a87      	ldr	r2, [pc, #540]	; (8004754 <UART_SetConfig+0x38c>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004544:	441e      	add	r6, r3
 8004546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004548:	4618      	mov	r0, r3
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	1894      	adds	r4, r2, r2
 8004554:	623c      	str	r4, [r7, #32]
 8004556:	415b      	adcs	r3, r3
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800455e:	1812      	adds	r2, r2, r0
 8004560:	eb41 0303 	adc.w	r3, r1, r3
 8004564:	f04f 0400 	mov.w	r4, #0
 8004568:	f04f 0500 	mov.w	r5, #0
 800456c:	00dd      	lsls	r5, r3, #3
 800456e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004572:	00d4      	lsls	r4, r2, #3
 8004574:	4622      	mov	r2, r4
 8004576:	462b      	mov	r3, r5
 8004578:	1814      	adds	r4, r2, r0
 800457a:	653c      	str	r4, [r7, #80]	; 0x50
 800457c:	414b      	adcs	r3, r1
 800457e:	657b      	str	r3, [r7, #84]	; 0x54
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	461a      	mov	r2, r3
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	1891      	adds	r1, r2, r2
 800458c:	61b9      	str	r1, [r7, #24]
 800458e:	415b      	adcs	r3, r3
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004596:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800459a:	f7fb fe1b 	bl	80001d4 <__aeabi_uldivmod>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4b6c      	ldr	r3, [pc, #432]	; (8004754 <UART_SetConfig+0x38c>)
 80045a4:	fba3 1302 	umull	r1, r3, r3, r2
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	2164      	movs	r1, #100	; 0x64
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	3332      	adds	r3, #50	; 0x32
 80045b6:	4a67      	ldr	r2, [pc, #412]	; (8004754 <UART_SetConfig+0x38c>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	f003 0207 	and.w	r2, r3, #7
 80045c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4432      	add	r2, r6
 80045c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045ca:	e0b9      	b.n	8004740 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ce:	461c      	mov	r4, r3
 80045d0:	f04f 0500 	mov.w	r5, #0
 80045d4:	4622      	mov	r2, r4
 80045d6:	462b      	mov	r3, r5
 80045d8:	1891      	adds	r1, r2, r2
 80045da:	6139      	str	r1, [r7, #16]
 80045dc:	415b      	adcs	r3, r3
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045e4:	1912      	adds	r2, r2, r4
 80045e6:	eb45 0303 	adc.w	r3, r5, r3
 80045ea:	f04f 0000 	mov.w	r0, #0
 80045ee:	f04f 0100 	mov.w	r1, #0
 80045f2:	00d9      	lsls	r1, r3, #3
 80045f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045f8:	00d0      	lsls	r0, r2, #3
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	eb12 0804 	adds.w	r8, r2, r4
 8004602:	eb43 0905 	adc.w	r9, r3, r5
 8004606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	4618      	mov	r0, r3
 800460c:	f04f 0100 	mov.w	r1, #0
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	008b      	lsls	r3, r1, #2
 800461a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800461e:	0082      	lsls	r2, r0, #2
 8004620:	4640      	mov	r0, r8
 8004622:	4649      	mov	r1, r9
 8004624:	f7fb fdd6 	bl	80001d4 <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4b49      	ldr	r3, [pc, #292]	; (8004754 <UART_SetConfig+0x38c>)
 800462e:	fba3 2302 	umull	r2, r3, r3, r2
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	011e      	lsls	r6, r3, #4
 8004636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004638:	4618      	mov	r0, r3
 800463a:	f04f 0100 	mov.w	r1, #0
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	1894      	adds	r4, r2, r2
 8004644:	60bc      	str	r4, [r7, #8]
 8004646:	415b      	adcs	r3, r3
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800464e:	1812      	adds	r2, r2, r0
 8004650:	eb41 0303 	adc.w	r3, r1, r3
 8004654:	f04f 0400 	mov.w	r4, #0
 8004658:	f04f 0500 	mov.w	r5, #0
 800465c:	00dd      	lsls	r5, r3, #3
 800465e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004662:	00d4      	lsls	r4, r2, #3
 8004664:	4622      	mov	r2, r4
 8004666:	462b      	mov	r3, r5
 8004668:	1814      	adds	r4, r2, r0
 800466a:	64bc      	str	r4, [r7, #72]	; 0x48
 800466c:	414b      	adcs	r3, r1
 800466e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4618      	mov	r0, r3
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	008b      	lsls	r3, r1, #2
 8004684:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004688:	0082      	lsls	r2, r0, #2
 800468a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800468e:	f7fb fda1 	bl	80001d4 <__aeabi_uldivmod>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4b2f      	ldr	r3, [pc, #188]	; (8004754 <UART_SetConfig+0x38c>)
 8004698:	fba3 1302 	umull	r1, r3, r3, r2
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	2164      	movs	r1, #100	; 0x64
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	3332      	adds	r3, #50	; 0x32
 80046aa:	4a2a      	ldr	r2, [pc, #168]	; (8004754 <UART_SetConfig+0x38c>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b6:	441e      	add	r6, r3
 80046b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ba:	4618      	mov	r0, r3
 80046bc:	f04f 0100 	mov.w	r1, #0
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	1894      	adds	r4, r2, r2
 80046c6:	603c      	str	r4, [r7, #0]
 80046c8:	415b      	adcs	r3, r3
 80046ca:	607b      	str	r3, [r7, #4]
 80046cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046d0:	1812      	adds	r2, r2, r0
 80046d2:	eb41 0303 	adc.w	r3, r1, r3
 80046d6:	f04f 0400 	mov.w	r4, #0
 80046da:	f04f 0500 	mov.w	r5, #0
 80046de:	00dd      	lsls	r5, r3, #3
 80046e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046e4:	00d4      	lsls	r4, r2, #3
 80046e6:	4622      	mov	r2, r4
 80046e8:	462b      	mov	r3, r5
 80046ea:	eb12 0a00 	adds.w	sl, r2, r0
 80046ee:	eb43 0b01 	adc.w	fp, r3, r1
 80046f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f04f 0100 	mov.w	r1, #0
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	008b      	lsls	r3, r1, #2
 8004706:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800470a:	0082      	lsls	r2, r0, #2
 800470c:	4650      	mov	r0, sl
 800470e:	4659      	mov	r1, fp
 8004710:	f7fb fd60 	bl	80001d4 <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <UART_SetConfig+0x38c>)
 800471a:	fba3 1302 	umull	r1, r3, r3, r2
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	2164      	movs	r1, #100	; 0x64
 8004722:	fb01 f303 	mul.w	r3, r1, r3
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	3332      	adds	r3, #50	; 0x32
 800472c:	4a09      	ldr	r2, [pc, #36]	; (8004754 <UART_SetConfig+0x38c>)
 800472e:	fba2 2303 	umull	r2, r3, r2, r3
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	f003 020f 	and.w	r2, r3, #15
 8004738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4432      	add	r2, r6
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	377c      	adds	r7, #124	; 0x7c
 8004744:	46bd      	mov	sp, r7
 8004746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474a:	bf00      	nop
 800474c:	40011000 	.word	0x40011000
 8004750:	40011400 	.word	0x40011400
 8004754:	51eb851f 	.word	0x51eb851f

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	4d0d      	ldr	r5, [pc, #52]	; (8004790 <__libc_init_array+0x38>)
 800475c:	4c0d      	ldr	r4, [pc, #52]	; (8004794 <__libc_init_array+0x3c>)
 800475e:	1b64      	subs	r4, r4, r5
 8004760:	10a4      	asrs	r4, r4, #2
 8004762:	2600      	movs	r6, #0
 8004764:	42a6      	cmp	r6, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	4d0b      	ldr	r5, [pc, #44]	; (8004798 <__libc_init_array+0x40>)
 800476a:	4c0c      	ldr	r4, [pc, #48]	; (800479c <__libc_init_array+0x44>)
 800476c:	f000 f820 	bl	80047b0 <_init>
 8004770:	1b64      	subs	r4, r4, r5
 8004772:	10a4      	asrs	r4, r4, #2
 8004774:	2600      	movs	r6, #0
 8004776:	42a6      	cmp	r6, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004780:	4798      	blx	r3
 8004782:	3601      	adds	r6, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f855 3b04 	ldr.w	r3, [r5], #4
 800478a:	4798      	blx	r3
 800478c:	3601      	adds	r6, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	08004800 	.word	0x08004800
 8004794:	08004800 	.word	0x08004800
 8004798:	08004800 	.word	0x08004800
 800479c:	08004804 	.word	0x08004804

080047a0 <memset>:
 80047a0:	4402      	add	r2, r0
 80047a2:	4603      	mov	r3, r0
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d100      	bne.n	80047aa <memset+0xa>
 80047a8:	4770      	bx	lr
 80047aa:	f803 1b01 	strb.w	r1, [r3], #1
 80047ae:	e7f9      	b.n	80047a4 <memset+0x4>

080047b0 <_init>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	bf00      	nop
 80047b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b6:	bc08      	pop	{r3}
 80047b8:	469e      	mov	lr, r3
 80047ba:	4770      	bx	lr

080047bc <_fini>:
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047be:	bf00      	nop
 80047c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c2:	bc08      	pop	{r3}
 80047c4:	469e      	mov	lr, r3
 80047c6:	4770      	bx	lr
