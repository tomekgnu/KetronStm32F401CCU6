
KetronStm32F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e4  080066e4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066ec  080066ec  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080066f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000088  0800677c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  0800677c  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e9e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa0  00000000  00000000  00035f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00038ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003a170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198c5  00000000  00000000  0003b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ccc  00000000  00000000  00054bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d001  00000000  00000000  0006a891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107892  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  001078e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800664c 	.word	0x0800664c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800664c 	.word	0x0800664c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <Ringbuf_init+0x3c>)
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <Ringbuf_init+0x40>)
 8000580:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <Ringbuf_init+0x44>)
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <Ringbuf_init+0x48>)
 8000586:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <Ringbuf_init+0x4c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	695a      	ldr	r2, [r3, #20]
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <Ringbuf_init+0x4c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f042 0201 	orr.w	r2, r2, #1
 8000596:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <Ringbuf_init+0x4c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	68da      	ldr	r2, [r3, #12]
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <Ringbuf_init+0x4c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f042 0220 	orr.w	r2, r2, #32
 80005a6:	60da      	str	r2, [r3, #12]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000154 	.word	0x20000154
 80005b8:	200000a4 	.word	0x200000a4
 80005bc:	20000150 	.word	0x20000150
 80005c0:	200000ec 	.word	0x200000ec
 80005c4:	200002dc 	.word	0x200002dc

080005c8 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	3301      	adds	r3, #1
 80005da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005de:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d007      	beq.n	80005fa <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	79f9      	ldrb	r1, [r7, #7]
 80005f2:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <Uart_read+0x4c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <Uart_read+0x4c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061a:	429a      	cmp	r2, r3
 800061c:	d102      	bne.n	8000624 <Uart_read+0x1c>
  {
    return -1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	e010      	b.n	8000646 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <Uart_read+0x4c>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <Uart_read+0x4c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062e:	5cd3      	ldrb	r3, [r2, r3]
 8000630:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <Uart_read+0x4c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <Uart_read+0x4c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000642:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000644:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000154 	.word	0x20000154

08000658 <Uart_write>:

/* writes a single character to the uart and increments head
 */
void Uart_write(int c)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db21      	blt.n	80006aa <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <Uart_write+0x60>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	3301      	adds	r3, #1
 800066e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000672:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 8000674:	bf00      	nop
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <Uart_write+0x60>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	429a      	cmp	r2, r3
 8000680:	d0f9      	beq.n	8000676 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <Uart_write+0x60>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <Uart_write+0x60>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	b2c9      	uxtb	r1, r1
 8000690:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <Uart_write+0x60>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <Uart_write+0x64>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68da      	ldr	r2, [r3, #12]
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <Uart_write+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006a8:	60da      	str	r2, [r3, #12]
	}
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000150 	.word	0x20000150
 80006bc:	200002dc 	.word	0x200002dc

080006c0 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <IsDataAvailable+0x2c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <IsDataAvailable+0x2c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	3340      	adds	r3, #64	; 0x40
 80006da:	b29b      	uxth	r3, r3
 80006dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000154 	.word	0x20000154

080006f0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	f003 0320 	and.w	r3, r3, #32
 800070e:	2b00      	cmp	r3, #0
 8000710:	d013      	beq.n	800073a <Uart_isr+0x4a>
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	f003 0320 	and.w	r3, r3, #32
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00e      	beq.n	800073a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <Uart_isr+0xac>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff48 	bl	80005c8 <store_char>
        return;
 8000738:	e02c      	b.n	8000794 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000740:	2b00      	cmp	r3, #0
 8000742:	d027      	beq.n	8000794 <Uart_isr+0xa4>
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	2b00      	cmp	r3, #0
 800074c:	d022      	beq.n	8000794 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <Uart_isr+0xb0>)
 8000750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <Uart_isr+0xb0>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	429a      	cmp	r2, r3
 8000758:	d108      	bne.n	800076c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000768:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800076a:	e012      	b.n	8000792 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <Uart_isr+0xb0>)
 800076e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000770:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <Uart_isr+0xb0>)
 8000772:	5cd3      	ldrb	r3, [r2, r3]
 8000774:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <Uart_isr+0xb0>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	3301      	adds	r3, #1
 800077c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <Uart_isr+0xb0>)
 8000782:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	7bba      	ldrb	r2, [r7, #14]
 8000790:	605a      	str	r2, [r3, #4]
    	return;
 8000792:	bf00      	nop
    }
}
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000154 	.word	0x20000154
 80007a0:	200000ec 	.word	0x200000ec

080007a4 <ee24_isConnected>:

extern I2C_HandleTypeDef hi2c1;
uint8_t ee24_lock = 0;
//################################################################################################################
BOOL ee24_isConnected(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100)==HAL_OK)
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	2202      	movs	r2, #2
 80007ac:	21a0      	movs	r1, #160	; 0xa0
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <ee24_isConnected+0x20>)
 80007b0:	f002 ffe2 	bl	8003778 <HAL_I2C_IsDeviceReady>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <ee24_isConnected+0x1a>
    return TRUE;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e000      	b.n	80007c0 <ee24_isConnected+0x1c>
  else
    return FALSE;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000018c 	.word	0x2000018c

080007c8 <ee24_read>:
    }
  }
}
//################################################################################################################
BOOL ee24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4603      	mov	r3, r0
 80007d6:	81fb      	strh	r3, [r7, #14]
  if (ee24_lock == 1)
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <ee24_read+0x74>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d101      	bne.n	80007e4 <ee24_read+0x1c>
    return FALSE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e026      	b.n	8000832 <ee24_read+0x6a>
  ee24_lock = 1;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <ee24_read+0x74>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
  #elif (_EEPROM_SIZE_KBIT == 4)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0100) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
 80007ea:	89fb      	ldrh	r3, [r7, #14]
 80007ec:	11db      	asrs	r3, r3, #7
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	f003 030e 	and.w	r3, r3, #14
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	b299      	uxth	r1, r3
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	b29a      	uxth	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	b29b      	uxth	r3, r3
 8000808:	2064      	movs	r0, #100	; 0x64
 800080a:	9002      	str	r0, [sp, #8]
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <ee24_read+0x78>)
 8000816:	f002 fd89 	bl	800332c <HAL_I2C_Mem_Read>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d104      	bne.n	800082a <ee24_read+0x62>
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
  #endif
  {
    ee24_lock = 0;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <ee24_read+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8000826:	2301      	movs	r3, #1
 8000828:	e003      	b.n	8000832 <ee24_read+0x6a>
  }
  else
  {
    ee24_lock = 0;
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <ee24_read+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
    return FALSE;
 8000830:	2300      	movs	r3, #0
  }    
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000134 	.word	0x20000134
 8000840:	2000018c 	.word	0x2000018c

08000844 <initControls>:
struct Joystick joyold;
struct Encoder encold;

static void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel);

void initControls(struct Joystick *joycur,struct Encoder *enccur){
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]

	extern ADC_HandleTypeDef hadc1;

	joycur->x = joyold.x = 0;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <initControls+0x60>)
 8000850:	2200      	movs	r2, #0
 8000852:	801a      	strh	r2, [r3, #0]
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <initControls+0x60>)
 8000856:	881a      	ldrh	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	801a      	strh	r2, [r3, #0]
	joycur->y = joyold.y = 0;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <initControls+0x60>)
 800085e:	2200      	movs	r2, #0
 8000860:	805a      	strh	r2, [r3, #2]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <initControls+0x60>)
 8000864:	885a      	ldrh	r2, [r3, #2]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	805a      	strh	r2, [r3, #2]
	joycur->button = joyold.button = 0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <initControls+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	711a      	strb	r2, [r3, #4]
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <initControls+0x60>)
 8000872:	791a      	ldrb	r2, [r3, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	711a      	strb	r2, [r3, #4]
	enccur->position = encold.position = 0;
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <initControls+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <initControls+0x64>)
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	701a      	strb	r2, [r3, #0]
	enccur->button = encold.button = FALSE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <initControls+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	705a      	strb	r2, [r3, #1]
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <initControls+0x64>)
 800088e:	785a      	ldrb	r2, [r3, #1]
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	705a      	strb	r2, [r3, #1]
	ADC_SetActiveChannel(&hadc1, ADC_CHANNEL_0);
 8000894:	2100      	movs	r1, #0
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <initControls+0x68>)
 8000898:	f000 f8a6 	bl	80009e8 <ADC_SetActiveChannel>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000160 	.word	0x20000160
 80008a8:	2000015c 	.word	0x2000015c
 80008ac:	20000244 	.word	0x20000244

080008b0 <joystickPressed>:

BOOL joystickPressed(struct Joystick *joy){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

	extern ADC_HandleTypeDef hadc1;

	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80008b8:	210a      	movs	r1, #10
 80008ba:	4825      	ldr	r0, [pc, #148]	; (8000950 <joystickPressed+0xa0>)
 80008bc:	f001 fd14 	bl	80022e8 <HAL_ADC_PollForConversion>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10e      	bne.n	80008e4 <joystickPressed+0x34>
		joy->x = HAL_ADC_GetValue(&hadc1) >> 1;
 80008c6:	4822      	ldr	r0, [pc, #136]	; (8000950 <joystickPressed+0xa0>)
 80008c8:	f001 fd99 	bl	80023fe <HAL_ADC_GetValue>
 80008cc:	4603      	mov	r3, r0
 80008ce:	085b      	lsrs	r3, r3, #1
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	801a      	strh	r2, [r3, #0]
		ADC_SetActiveChannel(&hadc1, ADC_CHANNEL_1);
 80008d6:	2101      	movs	r1, #1
 80008d8:	481d      	ldr	r0, [pc, #116]	; (8000950 <joystickPressed+0xa0>)
 80008da:	f000 f885 	bl	80009e8 <ADC_SetActiveChannel>
		HAL_ADC_Start(&hadc1);
 80008de:	481c      	ldr	r0, [pc, #112]	; (8000950 <joystickPressed+0xa0>)
 80008e0:	f001 fc4e 	bl	8002180 <HAL_ADC_Start>
	}
	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80008e4:	210a      	movs	r1, #10
 80008e6:	481a      	ldr	r0, [pc, #104]	; (8000950 <joystickPressed+0xa0>)
 80008e8:	f001 fcfe 	bl	80022e8 <HAL_ADC_PollForConversion>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10e      	bne.n	8000910 <joystickPressed+0x60>
		joy->y = HAL_ADC_GetValue(&hadc1) >> 1;
 80008f2:	4817      	ldr	r0, [pc, #92]	; (8000950 <joystickPressed+0xa0>)
 80008f4:	f001 fd83 	bl	80023fe <HAL_ADC_GetValue>
 80008f8:	4603      	mov	r3, r0
 80008fa:	085b      	lsrs	r3, r3, #1
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	805a      	strh	r2, [r3, #2]
		ADC_SetActiveChannel(&hadc1, ADC_CHANNEL_0);
 8000902:	2100      	movs	r1, #0
 8000904:	4812      	ldr	r0, [pc, #72]	; (8000950 <joystickPressed+0xa0>)
 8000906:	f000 f86f 	bl	80009e8 <ADC_SetActiveChannel>
		HAL_ADC_Start(&hadc1);
 800090a:	4811      	ldr	r0, [pc, #68]	; (8000950 <joystickPressed+0xa0>)
 800090c:	f001 fc38 	bl	8002180 <HAL_ADC_Start>
	}
	if(HAL_GPIO_ReadPin(JOY_SW_GPIO_Port, JOY_SW_Pin) == GPIO_PIN_RESET)
 8000910:	2104      	movs	r1, #4
 8000912:	4810      	ldr	r0, [pc, #64]	; (8000954 <joystickPressed+0xa4>)
 8000914:	f002 fb94 	bl	8003040 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d103      	bne.n	8000926 <joystickPressed+0x76>
		joy->button = TRUE;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2201      	movs	r2, #1
 8000922:	711a      	strb	r2, [r3, #4]
 8000924:	e002      	b.n	800092c <joystickPressed+0x7c>
	else
		joy->button = FALSE;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	711a      	strb	r2, [r3, #4]

	if(joy->button != joyold.button){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	791a      	ldrb	r2, [r3, #4]
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <joystickPressed+0xa8>)
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	429a      	cmp	r2, r3
 8000936:	d006      	beq.n	8000946 <joystickPressed+0x96>
		joyold.button = joy->button;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	791a      	ldrb	r2, [r3, #4]
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <joystickPressed+0xa8>)
 800093e:	711a      	strb	r2, [r3, #4]
		return joy->button;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	e000      	b.n	8000948 <joystickPressed+0x98>
	}

	return FALSE;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000244 	.word	0x20000244
 8000954:	40020000 	.word	0x40020000
 8000958:	20000160 	.word	0x20000160

0800095c <encoderChanged>:

BOOL encoderChanged(struct Encoder *enc){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

	extern TIM_HandleTypeDef htim1;
	uint16_t pulse_count = htim1.Instance->CNT;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <encoderChanged+0x80>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096a:	81fb      	strh	r3, [r7, #14]
	enc->position = pulse_count / 4;
 800096c:	89fb      	ldrh	r3, [r7, #14]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	b29b      	uxth	r3, r3
 8000972:	b2da      	uxtb	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(ENC_SW_GPIO_Port, ENC_SW_Pin) == GPIO_PIN_RESET)
 8000978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097c:	4818      	ldr	r0, [pc, #96]	; (80009e0 <encoderChanged+0x84>)
 800097e:	f002 fb5f 	bl	8003040 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d103      	bne.n	8000990 <encoderChanged+0x34>
		enc->button = TRUE;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2201      	movs	r2, #1
 800098c:	705a      	strb	r2, [r3, #1]
 800098e:	e002      	b.n	8000996 <encoderChanged+0x3a>
	else
		enc->button = FALSE;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	705a      	strb	r2, [r3, #1]

	if(enc->position != encold.position && enc->position != 128){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	781a      	ldrb	r2, [r3, #0]
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <encoderChanged+0x88>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d009      	beq.n	80009b6 <encoderChanged+0x5a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b80      	cmp	r3, #128	; 0x80
 80009a8:	d005      	beq.n	80009b6 <encoderChanged+0x5a>
		encold.position = enc->position;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <encoderChanged+0x88>)
 80009b0:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00d      	b.n	80009d2 <encoderChanged+0x76>
	}
	if(enc->button != encold.button){
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	785a      	ldrb	r2, [r3, #1]
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <encoderChanged+0x88>)
 80009bc:	785b      	ldrb	r3, [r3, #1]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d006      	beq.n	80009d0 <encoderChanged+0x74>
		encold.button = enc->button;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	785a      	ldrb	r2, [r3, #1]
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <encoderChanged+0x88>)
 80009c8:	705a      	strb	r2, [r3, #1]
		return encold.button;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <encoderChanged+0x88>)
 80009cc:	785b      	ldrb	r3, [r3, #1]
 80009ce:	e000      	b.n	80009d2 <encoderChanged+0x76>
	}

	return FALSE;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000294 	.word	0x20000294
 80009e0:	40020400 	.word	0x40020400
 80009e4:	2000015c 	.word	0x2000015c

080009e8 <ADC_SetActiveChannel>:

static void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
	sConfig.Channel = AdcChannel;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	4619      	mov	r1, r3
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f001 fd00 	bl	8002418 <HAL_ADC_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <ADC_SetActiveChannel+0x3a>
		Error_Handler();
 8000a1e:	f000 fba9 	bl	8001174 <Error_Handler>
	}
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t ch;
	uint8_t len = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	717b      	strb	r3, [r7, #5]
	BOOL result;

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000a36:	4b67      	ldr	r3, [pc, #412]	; (8000bd4 <main+0x1a8>)
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	4a66      	ldr	r2, [pc, #408]	; (8000bd4 <main+0x1a8>)
 8000a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a40:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8000a42:	4b65      	ldr	r3, [pc, #404]	; (8000bd8 <main+0x1ac>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000a48:	4b63      	ldr	r3, [pc, #396]	; (8000bd8 <main+0x1ac>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a62      	ldr	r2, [pc, #392]	; (8000bd8 <main+0x1ac>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a54:	f001 fade 	bl	8002014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 f8dc 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5c:	f000 fad8 	bl	8001010 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a60:	f000 fabc 	bl	8000fdc <MX_DMA_Init>
  MX_I2C1_Init();
 8000a64:	f000 f994 	bl	8000d90 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000a68:	f000 f93e 	bl	8000ce8 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000a6c:	f000 fa8c 	bl	8000f88 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000a70:	f000 fa14 	bl	8000e9c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000a74:	f000 f9ba 	bl	8000dec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	initControls(&joystick,&encoder);
 8000a78:	4958      	ldr	r1, [pc, #352]	; (8000bdc <main+0x1b0>)
 8000a7a:	4859      	ldr	r0, [pc, #356]	; (8000be0 <main+0x1b4>)
 8000a7c:	f7ff fee2 	bl	8000844 <initControls>
	Ringbuf_init();
 8000a80:	f7ff fd7a 	bl	8000578 <Ringbuf_init>
	TM_KEYPAD_Init();
 8000a84:	f001 f99e 	bl	8001dc4 <TM_KEYPAD_Init>
	TM_HD44780_Init(16, 2);
 8000a88:	2102      	movs	r1, #2
 8000a8a:	2010      	movs	r0, #16
 8000a8c:	f000 ffd0 	bl	8001a30 <TM_HD44780_Init>
	HAL_TIM_PWM_Init(&htim2);
 8000a90:	4854      	ldr	r0, [pc, #336]	; (8000be4 <main+0x1b8>)
 8000a92:	f003 ff1d 	bl	80048d0 <HAL_TIM_PWM_Init>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000a96:	213c      	movs	r1, #60	; 0x3c
 8000a98:	4853      	ldr	r0, [pc, #332]	; (8000be8 <main+0x1bc>)
 8000a9a:	f004 f8c9 	bl	8004c30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000a9e:	4851      	ldr	r0, [pc, #324]	; (8000be4 <main+0x1b8>)
 8000aa0:	f003 feb4 	bl	800480c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	484f      	ldr	r0, [pc, #316]	; (8000be4 <main+0x1b8>)
 8000aa8:	f003 ff6c 	bl	8004984 <HAL_TIM_PWM_Start>
	TIM2->ARR = 127;
 8000aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab0:	227f      	movs	r2, #127	; 0x7f
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 40;
 8000ab4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab8:	2228      	movs	r2, #40	; 0x28
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_ADC_Start(&hadc1);
 8000abc:	484b      	ldr	r0, [pc, #300]	; (8000bec <main+0x1c0>)
 8000abe:	f001 fb5f 	bl	8002180 <HAL_ADC_Start>

	TM_HD44780_Clear();
 8000ac2:	f001 f81b 	bl	8001afc <TM_HD44780_Clear>
	TM_HD44780_Puts(0, 0, "Ketron");
 8000ac6:	4a4a      	ldr	r2, [pc, #296]	; (8000bf0 <main+0x1c4>)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2000      	movs	r0, #0
 8000acc:	f001 f822 	bl	8001b14 <TM_HD44780_Puts>

	if((result = ee24_isConnected()) ==FALSE){
 8000ad0:	f7ff fe68 	bl	80007a4 <ee24_isConnected>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d105      	bne.n	8000aea <main+0xbe>
		TM_HD44780_Puts(0, 1, "EEPROM fail");
 8000ade:	4a45      	ldr	r2, [pc, #276]	; (8000bf4 <main+0x1c8>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f001 f816 	bl	8001b14 <TM_HD44780_Puts>
 8000ae8:	e025      	b.n	8000b36 <main+0x10a>
	}
	else{
		settings.family_left = 1;
 8000aea:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <main+0x1cc>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
		settings.instrument_left = 1;
 8000af0:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <main+0x1cc>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	705a      	strb	r2, [r3, #1]
		settings.family_right = 2;
 8000af6:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <main+0x1cc>)
 8000af8:	2202      	movs	r2, #2
 8000afa:	709a      	strb	r2, [r3, #2]
		settings.instrument_right = 2;
 8000afc:	4b3e      	ldr	r3, [pc, #248]	; (8000bf8 <main+0x1cc>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	70da      	strb	r2, [r3, #3]
		settings.family_left = settings.family_right = settings.instrument_left = settings.instrument_right = 0;
 8000b02:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <main+0x1cc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	70da      	strb	r2, [r3, #3]
 8000b08:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <main+0x1cc>)
 8000b0a:	78da      	ldrb	r2, [r3, #3]
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <main+0x1cc>)
 8000b0e:	705a      	strb	r2, [r3, #1]
 8000b10:	4b39      	ldr	r3, [pc, #228]	; (8000bf8 <main+0x1cc>)
 8000b12:	785a      	ldrb	r2, [r3, #1]
 8000b14:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <main+0x1cc>)
 8000b16:	709a      	strb	r2, [r3, #2]
 8000b18:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <main+0x1cc>)
 8000b1a:	789a      	ldrb	r2, [r3, #2]
 8000b1c:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <main+0x1cc>)
 8000b1e:	701a      	strb	r2, [r3, #0]
		if(result == TRUE)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d107      	bne.n	8000b36 <main+0x10a>
			result = ee24_read(_EEPROM_ADDRESS, (uint8_t *)(&settings), sizeof(struct Settings), 100);
 8000b26:	2364      	movs	r3, #100	; 0x64
 8000b28:	2204      	movs	r2, #4
 8000b2a:	4933      	ldr	r1, [pc, #204]	; (8000bf8 <main+0x1cc>)
 8000b2c:	20a0      	movs	r0, #160	; 0xa0
 8000b2e:	f7ff fe4b 	bl	80007c8 <ee24_read>
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		userKey = TM_KEYPAD_Read();
 8000b36:	f001 f94d 	bl	8001dd4 <TM_KEYPAD_Read>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <main+0x1d0>)
 8000b40:	701a      	strb	r2, [r3, #0]
		if(userKey != TM_KEYPAD_Button_NOPRESSED){
 8000b42:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <main+0x1d0>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2bff      	cmp	r3, #255	; 0xff
 8000b48:	d00b      	beq.n	8000b62 <main+0x136>
			sprintf(lcdText[0],"%d",userKey);
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <main+0x1d0>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	492b      	ldr	r1, [pc, #172]	; (8000c00 <main+0x1d4>)
 8000b52:	482c      	ldr	r0, [pc, #176]	; (8000c04 <main+0x1d8>)
 8000b54:	f005 f94c 	bl	8005df0 <siprintf>
			TM_HD44780_Puts(0, 0, lcdText[0]);
 8000b58:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <main+0x1d8>)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f000 ffd9 	bl	8001b14 <TM_HD44780_Puts>
		}
		if(joystickPressed(&joystick) == TRUE){
 8000b62:	481f      	ldr	r0, [pc, #124]	; (8000be0 <main+0x1b4>)
 8000b64:	f7ff fea4 	bl	80008b0 <joystickPressed>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d104      	bne.n	8000b78 <main+0x14c>
			TM_HD44780_Puts(0, 0, "Joystick");
 8000b6e:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <main+0x1dc>)
 8000b70:	2100      	movs	r1, #0
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 ffce 	bl	8001b14 <TM_HD44780_Puts>
		}
		if(encoderChanged(&encoder) == TRUE){
 8000b78:	4818      	ldr	r0, [pc, #96]	; (8000bdc <main+0x1b0>)
 8000b7a:	f7ff feef 	bl	800095c <encoderChanged>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d110      	bne.n	8000ba6 <main+0x17a>
			TM_HD44780_Puts(0, 0, "Encoder");
 8000b84:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <main+0x1e0>)
 8000b86:	2100      	movs	r1, #0
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 ffc3 	bl	8001b14 <TM_HD44780_Puts>
			sprintf(lcdText[1],"%d",encoder.position);
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <main+0x1b0>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	491a      	ldr	r1, [pc, #104]	; (8000c00 <main+0x1d4>)
 8000b96:	481e      	ldr	r0, [pc, #120]	; (8000c10 <main+0x1e4>)
 8000b98:	f005 f92a 	bl	8005df0 <siprintf>
			TM_HD44780_Puts(0, 1,lcdText[1]);
 8000b9c:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <main+0x1e4>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 ffb7 	bl	8001b14 <TM_HD44780_Puts>
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (IsDataAvailable() > 0) {
 8000ba6:	f7ff fd8b 	bl	80006c0 <IsDataAvailable>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	ddc2      	ble.n	8000b36 <main+0x10a>
			ch = (unsigned char) Uart_read();
 8000bb0:	f7ff fd2a 	bl	8000608 <Uart_read>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71bb      	strb	r3, [r7, #6]
			if (readMidiMessage(ch, &len) == TRUE)
 8000bb8:	1d7a      	adds	r2, r7, #5
 8000bba:	79bb      	ldrb	r3, [r7, #6]
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fade 	bl	8001180 <readMidiMessage>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d1b5      	bne.n	8000b36 <main+0x10a>
				sendMidiMessage(len);
 8000bca:	797b      	ldrb	r3, [r7, #5]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fb6b 	bl	80012a8 <sendMidiMessage>
		userKey = TM_KEYPAD_Read();
 8000bd2:	e7b0      	b.n	8000b36 <main+0x10a>
 8000bd4:	e000edf0 	.word	0xe000edf0
 8000bd8:	e0001000 	.word	0xe0001000
 8000bdc:	200001e0 	.word	0x200001e0
 8000be0:	2000028c 	.word	0x2000028c
 8000be4:	20000320 	.word	0x20000320
 8000be8:	20000294 	.word	0x20000294
 8000bec:	20000244 	.word	0x20000244
 8000bf0:	08006664 	.word	0x08006664
 8000bf4:	0800666c 	.word	0x0800666c
 8000bf8:	20000188 	.word	0x20000188
 8000bfc:	20000368 	.word	0x20000368
 8000c00:	08006678 	.word	0x08006678
 8000c04:	20000168 	.word	0x20000168
 8000c08:	0800667c 	.word	0x0800667c
 8000c0c:	08006688 	.word	0x08006688
 8000c10:	20000178 	.word	0x20000178

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b094      	sub	sp, #80	; 0x50
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0320 	add.w	r3, r7, #32
 8000c1e:	2230      	movs	r2, #48	; 0x30
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f005 f8dc 	bl	8005de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <SystemClock_Config+0xcc>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a27      	ldr	r2, [pc, #156]	; (8000ce0 <SystemClock_Config+0xcc>)
 8000c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <SystemClock_Config+0xcc>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <SystemClock_Config+0xd0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c60:	4a20      	ldr	r2, [pc, #128]	; (8000ce4 <SystemClock_Config+0xd0>)
 8000c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <SystemClock_Config+0xd0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c88:	2319      	movs	r3, #25
 8000c8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c8c:	23a8      	movs	r3, #168	; 0xa8
 8000c8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c94:	2304      	movs	r3, #4
 8000c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 0320 	add.w	r3, r7, #32
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 f91d 	bl	8003edc <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ca8:	f000 fa64 	bl	8001174 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cac:	230f      	movs	r3, #15
 8000cae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 fb7f 	bl	80043cc <HAL_RCC_ClockConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cd4:	f000 fa4e 	bl	8001174 <Error_Handler>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3750      	adds	r7, #80	; 0x50
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40007000 	.word	0x40007000

08000ce8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000cfc:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <MX_ADC1_Init+0xa0>)
 8000cfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000d08:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <MX_ADC1_Init+0xa4>)
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d4c:	f001 f9d4 	bl	80020f8 <HAL_ADC_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000d56:	f000 fa0d 	bl	8001174 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d66:	463b      	mov	r3, r7
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <MX_ADC1_Init+0x9c>)
 8000d6c:	f001 fb54 	bl	8002418 <HAL_ADC_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d76:	f000 f9fd 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000244 	.word	0x20000244
 8000d88:	40012000 	.word	0x40012000
 8000d8c:	0f000001 	.word	0x0f000001

08000d90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_I2C1_Init+0x50>)
 8000d96:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <MX_I2C1_Init+0x54>)
 8000d98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_I2C1_Init+0x50>)
 8000d9c:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <MX_I2C1_Init+0x58>)
 8000d9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_I2C1_Init+0x50>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_I2C1_Init+0x50>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_I2C1_Init+0x50>)
 8000dae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <MX_I2C1_Init+0x50>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_I2C1_Init+0x50>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <MX_I2C1_Init+0x50>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_I2C1_Init+0x50>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_I2C1_Init+0x50>)
 8000dce:	f002 f969 	bl	80030a4 <HAL_I2C_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dd8:	f000 f9cc 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	2000018c 	.word	0x2000018c
 8000de4:	40005400 	.word	0x40005400
 8000de8:	000186a0 	.word	0x000186a0

08000dec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	; 0x30
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	2224      	movs	r2, #36	; 0x24
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 fff0 	bl	8005de0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <MX_TIM1_Init+0xa8>)
 8000e0a:	4a23      	ldr	r2, [pc, #140]	; (8000e98 <MX_TIM1_Init+0xac>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_TIM1_Init+0xa8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_TIM1_Init+0xa8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 512;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_TIM1_Init+0xa8>)
 8000e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_TIM1_Init+0xa8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_TIM1_Init+0xa8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_TIM1_Init+0xa8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e34:	2303      	movs	r3, #3
 8000e36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e44:	230a      	movs	r3, #10
 8000e46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000e54:	230a      	movs	r3, #10
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_TIM1_Init+0xa8>)
 8000e60:	f003 fe40 	bl	8004ae4 <HAL_TIM_Encoder_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000e6a:	f000 f983 	bl	8001174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	; (8000e94 <MX_TIM1_Init+0xa8>)
 8000e7c:	f004 fcee 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000e86:	f000 f975 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	3730      	adds	r7, #48	; 0x30
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000294 	.word	0x20000294
 8000e98:	40010000 	.word	0x40010000

08000e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08e      	sub	sp, #56	; 0x38
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ecc:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ed6:	2253      	movs	r2, #83	; 0x53
 8000ed8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ee0:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ee2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef4:	4823      	ldr	r0, [pc, #140]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ef6:	f003 fc39 	bl	800476c <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f00:	f000 f938 	bl	8001174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481c      	ldr	r0, [pc, #112]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f12:	f004 f8e1 	bl	80050d8 <HAL_TIM_ConfigClockSource>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f1c:	f000 f92a 	bl	8001174 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f20:	4818      	ldr	r0, [pc, #96]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f22:	f003 fcd5 	bl	80048d0 <HAL_TIM_PWM_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f2c:	f000 f922 	bl	8001174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4811      	ldr	r0, [pc, #68]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f40:	f004 fc8c 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f4a:	f000 f913 	bl	8001174 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4e:	2360      	movs	r3, #96	; 0x60
 8000f50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	4619      	mov	r1, r3
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f66:	f003 fff9 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f70:	f000 f900 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f76:	f000 fbe7 	bl	8001748 <HAL_TIM_MspPostInit>

}
 8000f7a:	bf00      	nop
 8000f7c:	3738      	adds	r7, #56	; 0x38
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000320 	.word	0x20000320

08000f88 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_USART6_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 31250;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f94:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000f98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fbe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fc2:	f004 fccd 	bl	8005960 <HAL_UART_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8000fcc:	f000 f8d2 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200002dc 	.word	0x200002dc
 8000fd8:	40011400 	.word	0x40011400

08000fdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_DMA_Init+0x30>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <MX_DMA_Init+0x30>)
 8000fec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_DMA_Init+0x30>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b4e      	ldr	r3, [pc, #312]	; (8001164 <MX_GPIO_Init+0x154>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a4d      	ldr	r2, [pc, #308]	; (8001164 <MX_GPIO_Init+0x154>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <MX_GPIO_Init+0x154>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <MX_GPIO_Init+0x154>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a46      	ldr	r2, [pc, #280]	; (8001164 <MX_GPIO_Init+0x154>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b44      	ldr	r3, [pc, #272]	; (8001164 <MX_GPIO_Init+0x154>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b40      	ldr	r3, [pc, #256]	; (8001164 <MX_GPIO_Init+0x154>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a3f      	ldr	r2, [pc, #252]	; (8001164 <MX_GPIO_Init+0x154>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <MX_GPIO_Init+0x154>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <MX_GPIO_Init+0x154>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a38      	ldr	r2, [pc, #224]	; (8001164 <MX_GPIO_Init+0x154>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <MX_GPIO_Init+0x154>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109c:	4832      	ldr	r0, [pc, #200]	; (8001168 <MX_GPIO_Init+0x158>)
 800109e:	f001 ffe7 	bl	8003070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HD44780_RS_Pin|HD44780_E_Pin|HD44780_D4_Pin|HD44780_D5_Pin
 80010a2:	2201      	movs	r2, #1
 80010a4:	21f8      	movs	r1, #248	; 0xf8
 80010a6:	4831      	ldr	r0, [pc, #196]	; (800116c <MX_GPIO_Init+0x15c>)
 80010a8:	f001 ffe2 	bl	8003070 <HAL_GPIO_WritePin>
                          |HD44780_D6_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HD44780_D7_Pin|KEYPAD_COLUMN_1_Pin|KEYPAD_COLUMN_2_Pin|KEYPAD_COLUMN_3_Pin
 80010ac:	2200      	movs	r2, #0
 80010ae:	21f1      	movs	r1, #241	; 0xf1
 80010b0:	482f      	ldr	r0, [pc, #188]	; (8001170 <MX_GPIO_Init+0x160>)
 80010b2:	f001 ffdd 	bl	8003070 <HAL_GPIO_WritePin>
                          |KEYPAD_COLUMN_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4826      	ldr	r0, [pc, #152]	; (8001168 <MX_GPIO_Init+0x158>)
 80010d0:	f001 fe32 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_SW_Pin KEYPAD_ROW_1_Pin */
  GPIO_InitStruct.Pin = JOY_SW_Pin|KEYPAD_ROW_1_Pin;
 80010d4:	f240 4304 	movw	r3, #1028	; 0x404
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010de:	2301      	movs	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4820      	ldr	r0, [pc, #128]	; (800116c <MX_GPIO_Init+0x15c>)
 80010ea:	f001 fe25 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : HD44780_RS_Pin HD44780_E_Pin HD44780_D4_Pin HD44780_D5_Pin
                           HD44780_D6_Pin */
  GPIO_InitStruct.Pin = HD44780_RS_Pin|HD44780_E_Pin|HD44780_D4_Pin|HD44780_D5_Pin
 80010ee:	23f8      	movs	r3, #248	; 0xf8
 80010f0:	617b      	str	r3, [r7, #20]
                          |HD44780_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4819      	ldr	r0, [pc, #100]	; (800116c <MX_GPIO_Init+0x15c>)
 8001106:	f001 fe17 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : HD44780_D7_Pin */
  GPIO_InitStruct.Pin = HD44780_D7_Pin;
 800110a:	2301      	movs	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HD44780_D7_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4813      	ldr	r0, [pc, #76]	; (8001170 <MX_GPIO_Init+0x160>)
 8001122:	f001 fe09 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_ROW_4_Pin KEYPAD_ROW_3_Pin KEYPAD_ROW_2_Pin ENC_SW_Pin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_4_Pin|KEYPAD_ROW_3_Pin|KEYPAD_ROW_2_Pin|ENC_SW_Pin;
 8001126:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001130:	2301      	movs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_GPIO_Init+0x160>)
 800113c:	f001 fdfc 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_COLUMN_1_Pin KEYPAD_COLUMN_2_Pin KEYPAD_COLUMN_3_Pin KEYPAD_COLUMN_4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_COLUMN_1_Pin|KEYPAD_COLUMN_2_Pin|KEYPAD_COLUMN_3_Pin|KEYPAD_COLUMN_4_Pin;
 8001140:	23f0      	movs	r3, #240	; 0xf0
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800114c:	2301      	movs	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <MX_GPIO_Init+0x160>)
 8001158:	f001 fdee 	bl	8002d38 <HAL_GPIO_Init>

}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40020800 	.word	0x40020800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800117c:	e7fe      	b.n	800117c <Error_Handler+0x8>
	...

08001180 <readMidiMessage>:
	work_event.event.size = midiReadIndex;
	work_event.delta = dt;
	return &work_event;
}

BOOL readMidiMessage(unsigned char byte,unsigned char *len){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
	
   unsigned char tmp;

   // state machine for parsing the byte
   switch(midiState)
 800118c:	4b42      	ldr	r3, [pc, #264]	; (8001298 <readMidiMessage+0x118>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d06f      	beq.n	8001274 <readMidiMessage+0xf4>
 8001194:	2b03      	cmp	r3, #3
 8001196:	dc79      	bgt.n	800128c <readMidiMessage+0x10c>
 8001198:	2b01      	cmp	r3, #1
 800119a:	d002      	beq.n	80011a2 <readMidiMessage+0x22>
 800119c:	2b02      	cmp	r3, #2
 800119e:	d02f      	beq.n	8001200 <readMidiMessage+0x80>
 80011a0:	e074      	b.n	800128c <readMidiMessage+0x10c>
   {
         // we are currently stateless, waiting to start reading an event we care about.
         case MIDI_WAIT:
            if (byte == 0xF0)
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2bf0      	cmp	r3, #240	; 0xf0
 80011a6:	d06c      	beq.n	8001282 <readMidiMessage+0x102>
               // call sysex handler, which will return the state we should be in.
               //midiState = handleSysex();
               break;
            }
            // store length of midi command
            tmp = commandLen(byte);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f89a 	bl	80012e4 <commandLen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73fb      	strb	r3, [r7, #15]
            // is the message one byte long?
            if (tmp == 1)
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d10a      	bne.n	80011d0 <readMidiMessage+0x50>
/*               if (byte == MIDI_CLOCK && midiClockFunc)
               {
                  // it's a clock event and we have a registered clock handler
                  midiClockFunc();
               } else {*/
            	 *len = 1;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
            	 work_event.event.data[0] = byte;
 80011c0:	4a36      	ldr	r2, [pc, #216]	; (800129c <readMidiMessage+0x11c>)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	70d3      	strb	r3, [r2, #3]
            	 noteEvent = FALSE;
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <readMidiMessage+0x120>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
                 return TRUE;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e05e      	b.n	800128e <readMidiMessage+0x10e>
            } else if(tmp == 0){
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10a      	bne.n	80011ec <readMidiMessage+0x6c>
            	if(noteEvent == TRUE) {
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <readMidiMessage+0x120>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d10c      	bne.n	80011f8 <readMidiMessage+0x78>
            		work_event.event.data[1] = byte;
 80011de:	4a2f      	ldr	r2, [pc, #188]	; (800129c <readMidiMessage+0x11c>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	7113      	strb	r3, [r2, #4]
            		midiReadIndex = 2;
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <readMidiMessage+0x124>)
 80011e6:	2202      	movs	r2, #2
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e005      	b.n	80011f8 <readMidiMessage+0x78>
            	}
            }
			else {
				   // save first byte of event, position pointer..
				   work_event.event.data[0] = byte;
 80011ec:	4a2b      	ldr	r2, [pc, #172]	; (800129c <readMidiMessage+0x11c>)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	70d3      	strb	r3, [r2, #3]
				   midiReadIndex = 1;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <readMidiMessage+0x124>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
				}
            midiState = MIDI_READING;
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <readMidiMessage+0x118>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	701a      	strb	r2, [r3, #0]
            break;
 80011fe:	e045      	b.n	800128c <readMidiMessage+0x10c>
         case MIDI_READING:
        	if(commandLen(byte) > 0){
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f86e 	bl	80012e4 <commandLen>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <readMidiMessage+0x9e>
        		midiState = MIDI_WAIT;
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <readMidiMessage+0x118>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
        		noteEvent = FALSE;
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <readMidiMessage+0x120>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 800121a:	2300      	movs	r3, #0
 800121c:	e037      	b.n	800128e <readMidiMessage+0x10e>
        	}
        	work_event.event.data[midiReadIndex++] = byte;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <readMidiMessage+0x124>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	b2d1      	uxtb	r1, r2
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <readMidiMessage+0x124>)
 8001228:	7011      	strb	r1, [r2, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <readMidiMessage+0x11c>)
 800122e:	4413      	add	r3, r2
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	70da      	strb	r2, [r3, #3]
            if (midiReadIndex == commandLen(work_event.event.data[0]&0xF0))
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <readMidiMessage+0x11c>)
 8001236:	78db      	ldrb	r3, [r3, #3]
 8001238:	f023 030f 	bic.w	r3, r3, #15
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f850 	bl	80012e4 <commandLen>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <readMidiMessage+0x124>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d11a      	bne.n	8001286 <readMidiMessage+0x106>
            {
               midiState = MIDI_WAIT;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <readMidiMessage+0x118>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
               *len = midiReadIndex;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <readMidiMessage+0x124>)
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	701a      	strb	r2, [r3, #0]
               if(work_event.event.data[0] & (MIDI_NOTE_ON|MIDI_NOTE_OFF)){
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <readMidiMessage+0x11c>)
 8001260:	78db      	ldrb	r3, [r3, #3]
 8001262:	f003 0390 	and.w	r3, r3, #144	; 0x90
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <readMidiMessage+0xf0>
            	   noteEvent = TRUE;
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <readMidiMessage+0x120>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
               }
               return TRUE;
 8001270:	2301      	movs	r3, #1
 8001272:	e00c      	b.n	800128e <readMidiMessage+0x10e>
            }
            break;
         case MIDI_IGNORING:
            if (byte == 0xF7)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2bf7      	cmp	r3, #247	; 0xf7
 8001278:	d107      	bne.n	800128a <readMidiMessage+0x10a>
            {
               midiState = MIDI_WAIT;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <readMidiMessage+0x118>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001280:	e003      	b.n	800128a <readMidiMessage+0x10a>
               break;
 8001282:	bf00      	nop
 8001284:	e002      	b.n	800128c <readMidiMessage+0x10c>
            break;
 8001286:	bf00      	nop
 8001288:	e000      	b.n	800128c <readMidiMessage+0x10c>
            break;
 800128a:	bf00      	nop
      }

   return FALSE;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000000 	.word	0x20000000
 800129c:	20000370 	.word	0x20000370
 80012a0:	20000135 	.word	0x20000135
 80012a4:	2000036d 	.word	0x2000036d

080012a8 <sendMidiMessage>:

void sendMidiMessage(unsigned char num){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	unsigned char i;	
	//if((work_event.event.data[0] & 0xF0) == 0x90)
		//work_event.event.data[2] *= ( (float)playVolume / 255.00);
	for(i = 0; i < num; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e009      	b.n	80012cc <sendMidiMessage+0x24>
		Uart_write(work_event.event.data[i]);
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <sendMidiMessage+0x38>)
 80012bc:	4413      	add	r3, r2
 80012be:	78db      	ldrb	r3, [r3, #3]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f9c9 	bl	8000658 <Uart_write>
	for(i = 0; i < num; i++)
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	3301      	adds	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d3f1      	bcc.n	80012b8 <sendMidiMessage+0x10>
	
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000370 	.word	0x20000370

080012e4 <commandLen>:
	work_event.event.data[1] = program;
	sendMidiMessage(2);
}

unsigned char commandLen(unsigned char cmd)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	
	if ((cmd & 0xF0) != 0xF0)
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012f4:	2bf0      	cmp	r3, #240	; 0xf0
 80012f6:	d003      	beq.n	8001300 <commandLen+0x1c>
	cmd = cmd & 0xF0;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f023 030f 	bic.w	r3, r3, #15
 80012fe:	71fb      	strb	r3, [r7, #7]
	
	switch(cmd){
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b80      	cmp	r3, #128	; 0x80
 8001304:	f000 80f4 	beq.w	80014f0 <commandLen+0x20c>
 8001308:	2b80      	cmp	r3, #128	; 0x80
 800130a:	f2c0 80f3 	blt.w	80014f4 <commandLen+0x210>
 800130e:	2bff      	cmp	r3, #255	; 0xff
 8001310:	f300 80f0 	bgt.w	80014f4 <commandLen+0x210>
 8001314:	2b90      	cmp	r3, #144	; 0x90
 8001316:	f2c0 80ed 	blt.w	80014f4 <commandLen+0x210>
 800131a:	3b90      	subs	r3, #144	; 0x90
 800131c:	2b6f      	cmp	r3, #111	; 0x6f
 800131e:	f200 80e9 	bhi.w	80014f4 <commandLen+0x210>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <commandLen+0x44>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	080014f1 	.word	0x080014f1
 800132c:	080014f5 	.word	0x080014f5
 8001330:	080014f5 	.word	0x080014f5
 8001334:	080014f5 	.word	0x080014f5
 8001338:	080014f5 	.word	0x080014f5
 800133c:	080014f5 	.word	0x080014f5
 8001340:	080014f5 	.word	0x080014f5
 8001344:	080014f5 	.word	0x080014f5
 8001348:	080014f5 	.word	0x080014f5
 800134c:	080014f5 	.word	0x080014f5
 8001350:	080014f5 	.word	0x080014f5
 8001354:	080014f5 	.word	0x080014f5
 8001358:	080014f5 	.word	0x080014f5
 800135c:	080014f5 	.word	0x080014f5
 8001360:	080014f5 	.word	0x080014f5
 8001364:	080014f5 	.word	0x080014f5
 8001368:	080014f1 	.word	0x080014f1
 800136c:	080014f5 	.word	0x080014f5
 8001370:	080014f5 	.word	0x080014f5
 8001374:	080014f5 	.word	0x080014f5
 8001378:	080014f5 	.word	0x080014f5
 800137c:	080014f5 	.word	0x080014f5
 8001380:	080014f5 	.word	0x080014f5
 8001384:	080014f5 	.word	0x080014f5
 8001388:	080014f5 	.word	0x080014f5
 800138c:	080014f5 	.word	0x080014f5
 8001390:	080014f5 	.word	0x080014f5
 8001394:	080014f5 	.word	0x080014f5
 8001398:	080014f5 	.word	0x080014f5
 800139c:	080014f5 	.word	0x080014f5
 80013a0:	080014f5 	.word	0x080014f5
 80013a4:	080014f5 	.word	0x080014f5
 80013a8:	080014f1 	.word	0x080014f1
 80013ac:	080014f5 	.word	0x080014f5
 80013b0:	080014f5 	.word	0x080014f5
 80013b4:	080014f5 	.word	0x080014f5
 80013b8:	080014f5 	.word	0x080014f5
 80013bc:	080014f5 	.word	0x080014f5
 80013c0:	080014f5 	.word	0x080014f5
 80013c4:	080014f5 	.word	0x080014f5
 80013c8:	080014f5 	.word	0x080014f5
 80013cc:	080014f5 	.word	0x080014f5
 80013d0:	080014f5 	.word	0x080014f5
 80013d4:	080014f5 	.word	0x080014f5
 80013d8:	080014f5 	.word	0x080014f5
 80013dc:	080014f5 	.word	0x080014f5
 80013e0:	080014f5 	.word	0x080014f5
 80013e4:	080014f5 	.word	0x080014f5
 80013e8:	080014ed 	.word	0x080014ed
 80013ec:	080014f5 	.word	0x080014f5
 80013f0:	080014f5 	.word	0x080014f5
 80013f4:	080014f5 	.word	0x080014f5
 80013f8:	080014f5 	.word	0x080014f5
 80013fc:	080014f5 	.word	0x080014f5
 8001400:	080014f5 	.word	0x080014f5
 8001404:	080014f5 	.word	0x080014f5
 8001408:	080014f5 	.word	0x080014f5
 800140c:	080014f5 	.word	0x080014f5
 8001410:	080014f5 	.word	0x080014f5
 8001414:	080014f5 	.word	0x080014f5
 8001418:	080014f5 	.word	0x080014f5
 800141c:	080014f5 	.word	0x080014f5
 8001420:	080014f5 	.word	0x080014f5
 8001424:	080014f5 	.word	0x080014f5
 8001428:	080014ed 	.word	0x080014ed
 800142c:	080014f5 	.word	0x080014f5
 8001430:	080014f5 	.word	0x080014f5
 8001434:	080014f5 	.word	0x080014f5
 8001438:	080014f5 	.word	0x080014f5
 800143c:	080014f5 	.word	0x080014f5
 8001440:	080014f5 	.word	0x080014f5
 8001444:	080014f5 	.word	0x080014f5
 8001448:	080014f5 	.word	0x080014f5
 800144c:	080014f5 	.word	0x080014f5
 8001450:	080014f5 	.word	0x080014f5
 8001454:	080014f5 	.word	0x080014f5
 8001458:	080014f5 	.word	0x080014f5
 800145c:	080014f5 	.word	0x080014f5
 8001460:	080014f5 	.word	0x080014f5
 8001464:	080014f5 	.word	0x080014f5
 8001468:	080014f1 	.word	0x080014f1
 800146c:	080014f5 	.word	0x080014f5
 8001470:	080014f5 	.word	0x080014f5
 8001474:	080014f5 	.word	0x080014f5
 8001478:	080014f5 	.word	0x080014f5
 800147c:	080014f5 	.word	0x080014f5
 8001480:	080014f5 	.word	0x080014f5
 8001484:	080014f5 	.word	0x080014f5
 8001488:	080014f5 	.word	0x080014f5
 800148c:	080014f5 	.word	0x080014f5
 8001490:	080014f5 	.word	0x080014f5
 8001494:	080014f5 	.word	0x080014f5
 8001498:	080014f5 	.word	0x080014f5
 800149c:	080014f5 	.word	0x080014f5
 80014a0:	080014f5 	.word	0x080014f5
 80014a4:	080014f5 	.word	0x080014f5
 80014a8:	080014f5 	.word	0x080014f5
 80014ac:	080014ed 	.word	0x080014ed
 80014b0:	080014f1 	.word	0x080014f1
 80014b4:	080014ed 	.word	0x080014ed
 80014b8:	080014f5 	.word	0x080014f5
 80014bc:	080014f5 	.word	0x080014f5
 80014c0:	080014e9 	.word	0x080014e9
 80014c4:	080014f5 	.word	0x080014f5
 80014c8:	080014e9 	.word	0x080014e9
 80014cc:	080014e9 	.word	0x080014e9
 80014d0:	080014e9 	.word	0x080014e9
 80014d4:	080014e9 	.word	0x080014e9
 80014d8:	080014e9 	.word	0x080014e9
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	080014e9 	.word	0x080014e9
 80014e4:	080014e9 	.word	0x080014e9
		case	MIDI_START:
		case	MIDI_STOP:
		case	MIDI_CONT:
		case	MIDI_SENSE:
		case	MIDI_RESET:	
					return 1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e004      	b.n	80014f6 <commandLen+0x212>
		case	MIDI_PROGRAM_CHANGE:
		case	MIDI_CHANNEL_TOUCH:
		case	MIDI_MTC:
		case	MIDI_SONG_SEL:	
					return 2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	e002      	b.n	80014f6 <commandLen+0x212>
		case	MIDI_NOTE_ON:
		case	MIDI_POLY_TOUCH:
		case	MIDI_CONTROL_CHANGE:
		case	MIDI_PITCH_BEND:
		case	MIDI_SPP:	
					return 3;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e000      	b.n	80014f6 <commandLen+0x212>
		
	}
	
	return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop

08001504 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_MspInit+0x4c>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001542:	2005      	movs	r0, #5
 8001544:	f001 fa56 	bl	80029f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_ADC_MspInit+0x7c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d127      	bne.n	80015c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 80015ae:	2303      	movs	r3, #3
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b2:	2303      	movs	r3, #3
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_ADC_MspInit+0x84>)
 80015c2:	f001 fbb9 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40012000 	.word	0x40012000
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a19      	ldr	r2, [pc, #100]	; (8001660 <HAL_I2C_MspInit+0x84>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d12c      	bne.n	8001658 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_I2C_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a17      	ldr	r2, [pc, #92]	; (8001664 <HAL_I2C_MspInit+0x88>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_I2C_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800161a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001620:	2312      	movs	r3, #18
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001624:	2301      	movs	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162c:	2304      	movs	r3, #4
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	480c      	ldr	r0, [pc, #48]	; (8001668 <HAL_I2C_MspInit+0x8c>)
 8001638:	f001 fb7e 	bl	8002d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_I2C_MspInit+0x88>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <HAL_I2C_MspInit+0x88>)
 8001646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800164a:	6413      	str	r3, [r2, #64]	; 0x40
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_I2C_MspInit+0x88>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40005400 	.word	0x40005400
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400

0800166c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <HAL_TIM_Encoder_MspInit+0x84>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12c      	bne.n	80016e8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016d8:	2301      	movs	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80016e4:	f001 fb28 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000

080016fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170c:	d115      	bne.n	800173a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_TIM_Base_MspInit+0x48>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_TIM_Base_MspInit+0x48>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_TIM_Base_MspInit+0x48>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 800172a:	2201      	movs	r2, #1
 800172c:	2101      	movs	r1, #1
 800172e:	201c      	movs	r0, #28
 8001730:	f001 f96b 	bl	8002a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001734:	201c      	movs	r0, #28
 8001736:	f001 f984 	bl	8002a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001768:	d11e      	bne.n	80017a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_TIM_MspPostInit+0x68>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <HAL_TIM_MspPostInit+0x68>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_TIM_MspPostInit+0x68>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800178a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001798:	2301      	movs	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4619      	mov	r1, r3
 80017a2:	4804      	ldr	r0, [pc, #16]	; (80017b4 <HAL_TIM_MspPostInit+0x6c>)
 80017a4:	f001 fac8 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a35      	ldr	r2, [pc, #212]	; (80018ac <HAL_UART_MspInit+0xf4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d163      	bne.n	80018a2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_UART_MspInit+0xf8>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a33      	ldr	r2, [pc, #204]	; (80018b0 <HAL_UART_MspInit+0xf8>)
 80017e4:	f043 0320 	orr.w	r3, r3, #32
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_UART_MspInit+0xf8>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_UART_MspInit+0xf8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a2c      	ldr	r2, [pc, #176]	; (80018b0 <HAL_UART_MspInit+0xf8>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_UART_MspInit+0xf8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001812:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001824:	2308      	movs	r3, #8
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4821      	ldr	r0, [pc, #132]	; (80018b4 <HAL_UART_MspInit+0xfc>)
 8001830:	f001 fa82 	bl	8002d38 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_UART_MspInit+0x100>)
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_UART_MspInit+0x104>)
 8001838:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_UART_MspInit+0x100>)
 800183c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001840:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_UART_MspInit+0x100>)
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_UART_MspInit+0x100>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_UART_MspInit+0x100>)
 8001850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001854:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_UART_MspInit+0x100>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <HAL_UART_MspInit+0x100>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_UART_MspInit+0x100>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_UART_MspInit+0x100>)
 800186a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800186e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_UART_MspInit+0x100>)
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001876:	4810      	ldr	r0, [pc, #64]	; (80018b8 <HAL_UART_MspInit+0x100>)
 8001878:	f001 f8fe 	bl	8002a78 <HAL_DMA_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001882:	f7ff fc77 	bl	8001174 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_UART_MspInit+0x100>)
 800188a:	635a      	str	r2, [r3, #52]	; 0x34
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_UART_MspInit+0x100>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 2);
 8001892:	2202      	movs	r2, #2
 8001894:	2101      	movs	r1, #1
 8001896:	2047      	movs	r0, #71	; 0x47
 8001898:	f001 f8b7 	bl	8002a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800189c:	2047      	movs	r0, #71	; 0x47
 800189e:	f001 f8d0 	bl	8002a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	; 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40011400 	.word	0x40011400
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	200001e4 	.word	0x200001e4
 80018bc:	400264a0 	.word	0x400264a0

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <NMI_Handler+0x4>

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <UsageFault_Handler+0x4>

080018de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190c:	f000 fbd4 	bl	80020b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <TIM2_IRQHandler+0x14>)
 800191a:	f003 fa17 	bl	8004d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TM_KEYPAD_Update();
 800191e:	f000 fb2f 	bl	8001f80 <TM_KEYPAD_Update>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000320 	.word	0x20000320

0800192c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
	Uart_isr(&huart6);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <USART6_IRQHandler+0x10>)
 8001932:	f7fe fedd 	bl	80006f0 <Uart_isr>
  /* USER CODE END USART6_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200002dc 	.word	0x200002dc

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <_sbrk+0x5c>)
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <_sbrk+0x60>)
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <_sbrk+0x64>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <_sbrk+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	429a      	cmp	r2, r3
 800196e:	d207      	bcs.n	8001980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001970:	f004 fa0c 	bl	8005d8c <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	220c      	movs	r2, #12
 8001978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e009      	b.n	8001994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <_sbrk+0x64>)
 8001990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20010000 	.word	0x20010000
 80019a0:	00000400 	.word	0x00000400
 80019a4:	20000138 	.word	0x20000138
 80019a8:	20000390 	.word	0x20000390

080019ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <SystemInit+0x20>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <SystemInit+0x20>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <ShortDelayUS>:
__STATIC_INLINE void DelayUS(__IO uint32_t micros);

volatile int totalDelay = 0;

void ShortDelayUS(uint32_t Delay)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	DelayUS(Delay);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f805 	bl	80019e8 <DelayUS>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <DelayUS>:

__STATIC_INLINE void DelayUS(__IO uint32_t micros) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

#if !defined(STM32F0xx)
    uint32_t start = DWT->CYCCNT;
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <DelayUS+0x40>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

    /* Go to number of cycles for system */
    micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80019f6:	f002 fe85 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <DelayUS+0x44>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9b      	lsrs	r3, r3, #18
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - start) < micros);
 8001a0c:	bf00      	nop
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <DelayUS+0x40>)
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad2      	subs	r2, r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d3f8      	bcc.n	8001a0e <DelayUS+0x26>
    micros *= (SystemCoreClock / 1000000) / 5;

    /* Wait till done */
    while (micros--);
#endif
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e0001000 	.word	0xe0001000
 8001a2c:	431bde83 	.word	0x431bde83

08001a30 <TM_HD44780_Init>:

void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	460a      	mov	r2, r1
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	71bb      	strb	r3, [r7, #6]
	/* Initialize delay */
	//TM_DELAY_Init();
	
	/* Init pinout */
	TM_HD44780_InitPins();
 8001a40:	f000 f99a 	bl	8001d78 <TM_HD44780_InitPins>
	
	/* At least 40ms */
	HD44780_Delay(45000);
 8001a44:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 8001a48:	f7ff ffc2 	bl	80019d0 <ShortDelayUS>

	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 8001a4c:	4a2a      	ldr	r2, [pc, #168]	; (8001af8 <TM_HD44780_Init+0xc8>)
 8001a4e:	79bb      	ldrb	r3, [r7, #6]
 8001a50:	70d3      	strb	r3, [r2, #3]
	HD44780_Opts.Cols = cols;
 8001a52:	4a29      	ldr	r2, [pc, #164]	; (8001af8 <TM_HD44780_Init+0xc8>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	7113      	strb	r3, [r2, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <TM_HD44780_Init+0xc8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <TM_HD44780_Init+0xc8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	719a      	strb	r2, [r3, #6]
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <TM_HD44780_Init+0xc8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 8001a6a:	79bb      	ldrb	r3, [r7, #6]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d906      	bls.n	8001a7e <TM_HD44780_Init+0x4e>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <TM_HD44780_Init+0xc8>)
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <TM_HD44780_Init+0xc8>)
 8001a7c:	705a      	strb	r2, [r3, #1]
	}
	
	/* Try to set 4bit mode */
	TM_HD44780_Cmd4bit(0x03);
 8001a7e:	2003      	movs	r0, #3
 8001a80:	f000 f8f8 	bl	8001c74 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 8001a84:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a88:	f7ff ffa2 	bl	80019d0 <ShortDelayUS>

	/* Second try */
	TM_HD44780_Cmd4bit(0x03);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f8f1 	bl	8001c74 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 8001a92:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a96:	f7ff ff9b 	bl	80019d0 <ShortDelayUS>
	
	/* Third goo! */
	TM_HD44780_Cmd4bit(0x03);
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	f000 f8ea 	bl	8001c74 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 8001aa0:	f241 1094 	movw	r0, #4500	; 0x1194
 8001aa4:	f7ff ff94 	bl	80019d0 <ShortDelayUS>
	
	/* Set 4-bit interface */
	TM_HD44780_Cmd4bit(0x02);
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f000 f8e3 	bl	8001c74 <TM_HD44780_Cmd4bit>
	HD44780_Delay(100);
 8001aae:	2064      	movs	r0, #100	; 0x64
 8001ab0:	f7ff ff8e 	bl	80019d0 <ShortDelayUS>
	
	/* Set # lines, font size, etc. */
	TM_HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <TM_HD44780_Init+0xc8>)
 8001ab6:	785b      	ldrb	r3, [r3, #1]
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f89c 	bl	8001bfc <TM_HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <TM_HD44780_Init+0xc8>)
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	701a      	strb	r2, [r3, #0]
	TM_HD44780_DisplayOn();
 8001aca:	f000 f881 	bl	8001bd0 <TM_HD44780_DisplayOn>

	/* Clear lcd */
	TM_HD44780_Clear();
 8001ace:	f000 f815 	bl	8001afc <TM_HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <TM_HD44780_Init+0xc8>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	709a      	strb	r2, [r3, #2]
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <TM_HD44780_Init+0xc8>)
 8001ada:	789b      	ldrb	r3, [r3, #2]
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f88a 	bl	8001bfc <TM_HD44780_Cmd>

	/* Delay */
	HD44780_Delay(4500);
 8001ae8:	f241 1094 	movw	r0, #4500	; 0x1194
 8001aec:	f7ff ff70 	bl	80019d0 <ShortDelayUS>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2000013c 	.word	0x2000013c

08001afc <TM_HD44780_Clear>:

void TM_HD44780_Clear(void) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f000 f87b 	bl	8001bfc <TM_HD44780_Cmd>
	HD44780_Delay(3000);
 8001b06:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b0a:	f7ff ff61 	bl	80019d0 <ShortDelayUS>
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <TM_HD44780_Puts>:

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	603a      	str	r2, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	460b      	mov	r3, r1
 8001b22:	71bb      	strb	r3, [r7, #6]
	TM_HD44780_CursorSet(x, y);
 8001b24:	79ba      	ldrb	r2, [r7, #6]
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f8f4 	bl	8001d18 <TM_HD44780_CursorSet>
	while (*str) {
 8001b30:	e042      	b.n	8001bb8 <TM_HD44780_Puts+0xa4>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b34:	795a      	ldrb	r2, [r3, #5]
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d310      	bcc.n	8001b60 <TM_HD44780_Puts+0x4c>
			HD44780_Opts.currentX = 0;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	715a      	strb	r2, [r3, #5]
			HD44780_Opts.currentY++;
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b46:	799b      	ldrb	r3, [r3, #6]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b4e:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b52:	795b      	ldrb	r3, [r3, #5]
 8001b54:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b56:	7992      	ldrb	r2, [r2, #6]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f8dc 	bl	8001d18 <TM_HD44780_CursorSet>
		}
		if (*str == '\n') {
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b0a      	cmp	r3, #10
 8001b66:	d10e      	bne.n	8001b86 <TM_HD44780_Puts+0x72>
			HD44780_Opts.currentY++;
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b6a:	799b      	ldrb	r3, [r3, #6]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b72:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b76:	795b      	ldrb	r3, [r3, #5]
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b7a:	7992      	ldrb	r2, [r2, #6]
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f8ca 	bl	8001d18 <TM_HD44780_CursorSet>
 8001b84:	e015      	b.n	8001bb2 <TM_HD44780_Puts+0x9e>
		} else if (*str == '\r') {
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b0d      	cmp	r3, #13
 8001b8c:	d106      	bne.n	8001b9c <TM_HD44780_Puts+0x88>
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001b90:	799b      	ldrb	r3, [r3, #6]
 8001b92:	4619      	mov	r1, r3
 8001b94:	2000      	movs	r0, #0
 8001b96:	f000 f8bf 	bl	8001d18 <TM_HD44780_CursorSet>
 8001b9a:	e00a      	b.n	8001bb2 <TM_HD44780_Puts+0x9e>
		} else {
			TM_HD44780_Data(*str);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 f849 	bl	8001c38 <TM_HD44780_Data>
			HD44780_Opts.currentX++;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001ba8:	795b      	ldrb	r3, [r3, #5]
 8001baa:	3301      	adds	r3, #1
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <TM_HD44780_Puts+0xb8>)
 8001bb0:	715a      	strb	r2, [r3, #5]
		}
		str++;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1b8      	bne.n	8001b32 <TM_HD44780_Puts+0x1e>
	}
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000013c 	.word	0x2000013c

08001bd0 <TM_HD44780_DisplayOn>:

void TM_HD44780_DisplayOn(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <TM_HD44780_DisplayOn+0x28>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <TM_HD44780_DisplayOn+0x28>)
 8001be0:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <TM_HD44780_DisplayOn+0x28>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	f043 0308 	orr.w	r3, r3, #8
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f805 	bl	8001bfc <TM_HD44780_Cmd>
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000013c 	.word	0x2000013c

08001bfc <TM_HD44780_Cmd>:
	TM_HD44780_CursorSet(x, y);
	TM_HD44780_Data(location);
}

/* Private functions */
static void TM_HD44780_Cmd(uint8_t cmd) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
	/* Command mode */
	HD44780_RS_LOW;
 8001c06:	2200      	movs	r2, #0
 8001c08:	2108      	movs	r1, #8
 8001c0a:	480a      	ldr	r0, [pc, #40]	; (8001c34 <TM_HD44780_Cmd+0x38>)
 8001c0c:	f001 fa30 	bl	8003070 <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(cmd >> 4);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f82c 	bl	8001c74 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f825 	bl	8001c74 <TM_HD44780_Cmd4bit>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40020000 	.word	0x40020000

08001c38 <TM_HD44780_Data>:

static void TM_HD44780_Data(uint8_t data) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
	/* Data mode */
	HD44780_RS_HIGH;
 8001c42:	2201      	movs	r2, #1
 8001c44:	2108      	movs	r1, #8
 8001c46:	480a      	ldr	r0, [pc, #40]	; (8001c70 <TM_HD44780_Data+0x38>)
 8001c48:	f001 fa12 	bl	8003070 <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(data >> 4);
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f80e 	bl	8001c74 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f807 	bl	8001c74 <TM_HD44780_Cmd4bit>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40020000 	.word	0x40020000

08001c74 <TM_HD44780_Cmd4bit>:

static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	/* Set output port */

	HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin, (cmd & 0x08) != 0);
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf14      	ite	ne
 8001c88:	2301      	movne	r3, #1
 8001c8a:	2300      	moveq	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2101      	movs	r1, #1
 8001c92:	481f      	ldr	r0, [pc, #124]	; (8001d10 <TM_HD44780_Cmd4bit+0x9c>)
 8001c94:	f001 f9ec 	bl	8003070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_GPIO_Port, HD44780_D6_Pin, (cmd & 0x04) != 0);
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bf14      	ite	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	2300      	moveq	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	4819      	ldr	r0, [pc, #100]	; (8001d14 <TM_HD44780_Cmd4bit+0xa0>)
 8001cae:	f001 f9df 	bl	8003070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_GPIO_Port, HD44780_D5_Pin, (cmd & 0x02) != 0);
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2140      	movs	r1, #64	; 0x40
 8001cc6:	4813      	ldr	r0, [pc, #76]	; (8001d14 <TM_HD44780_Cmd4bit+0xa0>)
 8001cc8:	f001 f9d2 	bl	8003070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_GPIO_Port, HD44780_D4_Pin, (cmd & 0x01) != 0);
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bf14      	ite	ne
 8001cd6:	2301      	movne	r3, #1
 8001cd8:	2300      	moveq	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2120      	movs	r1, #32
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <TM_HD44780_Cmd4bit+0xa0>)
 8001ce2:	f001 f9c5 	bl	8003070 <HAL_GPIO_WritePin>
	HD44780_E_BLINK;
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2110      	movs	r1, #16
 8001cea:	480a      	ldr	r0, [pc, #40]	; (8001d14 <TM_HD44780_Cmd4bit+0xa0>)
 8001cec:	f001 f9c0 	bl	8003070 <HAL_GPIO_WritePin>
 8001cf0:	2014      	movs	r0, #20
 8001cf2:	f7ff fe6d 	bl	80019d0 <ShortDelayUS>
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <TM_HD44780_Cmd4bit+0xa0>)
 8001cfc:	f001 f9b8 	bl	8003070 <HAL_GPIO_WritePin>
 8001d00:	2014      	movs	r0, #20
 8001d02:	f7ff fe65 	bl	80019d0 <ShortDelayUS>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020000 	.word	0x40020000

08001d18 <TM_HD44780_CursorSet>:

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <TM_HD44780_CursorSet+0x58>)
 8001d2a:	60fb      	str	r3, [r7, #12]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <TM_HD44780_CursorSet+0x5c>)
 8001d2e:	78db      	ldrb	r3, [r3, #3]
 8001d30:	79ba      	ldrb	r2, [r7, #6]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d301      	bcc.n	8001d3a <TM_HD44780_CursorSet+0x22>
		row = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <TM_HD44780_CursorSet+0x5c>)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	7153      	strb	r3, [r2, #5]
	HD44780_Opts.currentY = row;
 8001d40:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <TM_HD44780_CursorSet+0x5c>)
 8001d42:	79bb      	ldrb	r3, [r7, #6]
 8001d44:	7193      	strb	r3, [r2, #6]
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	f107 0210 	add.w	r2, r7, #16
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	4413      	add	r3, r2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d5e:	b25b      	sxtb	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff4a 	bl	8001bfc <TM_HD44780_Cmd>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	54144000 	.word	0x54144000
 8001d74:	2000013c 	.word	0x2000013c

08001d78 <TM_HD44780_InitPins>:

static void TM_HD44780_InitPins(void) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	/* Init all pins */
	/* Set pins low */
	HAL_GPIO_WritePin(HD44780_RS_GPIO_Port, HD44780_RS_Pin,GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2108      	movs	r1, #8
 8001d80:	480e      	ldr	r0, [pc, #56]	; (8001dbc <TM_HD44780_InitPins+0x44>)
 8001d82:	f001 f975 	bl	8003070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_E_GPIO_Port, HD44780_E_Pin,GPIO_PIN_RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2110      	movs	r1, #16
 8001d8a:	480c      	ldr	r0, [pc, #48]	; (8001dbc <TM_HD44780_InitPins+0x44>)
 8001d8c:	f001 f970 	bl	8003070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_GPIO_Port, HD44780_D4_Pin,GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2120      	movs	r1, #32
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <TM_HD44780_InitPins+0x44>)
 8001d96:	f001 f96b 	bl	8003070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_GPIO_Port, HD44780_D5_Pin,GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2140      	movs	r1, #64	; 0x40
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <TM_HD44780_InitPins+0x44>)
 8001da0:	f001 f966 	bl	8003070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_GPIO_Port, HD44780_D6_Pin,GPIO_PIN_RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	4804      	ldr	r0, [pc, #16]	; (8001dbc <TM_HD44780_InitPins+0x44>)
 8001daa:	f001 f961 	bl	8003070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin,GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2101      	movs	r1, #1
 8001db2:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <TM_HD44780_InitPins+0x48>)
 8001db4:	f001 f95c 	bl	8003070 <HAL_GPIO_WritePin>
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40020400 	.word	0x40020400

08001dc4 <TM_KEYPAD_Init>:
TM_KEYPAD_Type_t TM_KEYPAD_INT_KeypadType;
static TM_KEYPAD_Button_t KeypadStatus = TM_KEYPAD_Button_NOPRESSED;
static TM_KEYPAD_Button_t KeyCode = TM_KEYPAD_Button_NOPRESSED;


void TM_KEYPAD_Init() {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	
	TM_KEYPAD_INT_SetColumn(0);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 f815 	bl	8001df8 <TM_KEYPAD_INT_SetColumn>
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <TM_KEYPAD_Read>:

char TM_KEYPAD_GetChar(TM_KEYPAD_Button_t key){
	return KEYPAD_INT_Chars[key];
}

TM_KEYPAD_Button_t TM_KEYPAD_Read(void) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
	TM_KEYPAD_Button_t temp;

	/* Get keypad status */
	temp = KeypadStatus;
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <TM_KEYPAD_Read+0x20>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]

	/* Reset keypad status */
	KeypadStatus = TM_KEYPAD_Button_NOPRESSED;
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <TM_KEYPAD_Read+0x20>)
 8001de2:	22ff      	movs	r2, #255	; 0xff
 8001de4:	701a      	strb	r2, [r3, #0]

	return temp;
 8001de6:	79fb      	ldrb	r3, [r7, #7]

}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	20000018 	.word	0x20000018

08001df8 <TM_KEYPAD_INT_SetColumn>:

/* Private */
void TM_KEYPAD_INT_SetColumn(uint8_t column) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_COLUMN_1_HIGH;
 8001e02:	2201      	movs	r2, #1
 8001e04:	2110      	movs	r1, #16
 8001e06:	481b      	ldr	r0, [pc, #108]	; (8001e74 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e08:	f001 f932 	bl	8003070 <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_2_HIGH;
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2120      	movs	r1, #32
 8001e10:	4818      	ldr	r0, [pc, #96]	; (8001e74 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e12:	f001 f92d 	bl	8003070 <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_3_HIGH;
 8001e16:	2201      	movs	r2, #1
 8001e18:	2140      	movs	r1, #64	; 0x40
 8001e1a:	4816      	ldr	r0, [pc, #88]	; (8001e74 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e1c:	f001 f928 	bl	8003070 <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_4_HIGH;
 8001e20:	2201      	movs	r2, #1
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	4813      	ldr	r0, [pc, #76]	; (8001e74 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e26:	f001 f923 	bl	8003070 <HAL_GPIO_WritePin>

	/* Set column low */
	if (column == 1) {
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d104      	bne.n	8001e3a <TM_KEYPAD_INT_SetColumn+0x42>
		KEYPAD_COLUMN_1_LOW;
 8001e30:	2200      	movs	r2, #0
 8001e32:	2110      	movs	r1, #16
 8001e34:	480f      	ldr	r0, [pc, #60]	; (8001e74 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e36:	f001 f91b 	bl	8003070 <HAL_GPIO_WritePin>
	}
	if (column == 2) {
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d104      	bne.n	8001e4a <TM_KEYPAD_INT_SetColumn+0x52>
		KEYPAD_COLUMN_2_LOW;
 8001e40:	2200      	movs	r2, #0
 8001e42:	2120      	movs	r1, #32
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e46:	f001 f913 	bl	8003070 <HAL_GPIO_WritePin>
	}
	if (column == 3) {
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d104      	bne.n	8001e5a <TM_KEYPAD_INT_SetColumn+0x62>
		KEYPAD_COLUMN_3_LOW;
 8001e50:	2200      	movs	r2, #0
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	4807      	ldr	r0, [pc, #28]	; (8001e74 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e56:	f001 f90b 	bl	8003070 <HAL_GPIO_WritePin>
	}
	if (column == 4) {
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d104      	bne.n	8001e6a <TM_KEYPAD_INT_SetColumn+0x72>
		KEYPAD_COLUMN_4_LOW;
 8001e60:	2200      	movs	r2, #0
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	4803      	ldr	r0, [pc, #12]	; (8001e74 <TM_KEYPAD_INT_SetColumn+0x7c>)
 8001e66:	f001 f903 	bl	8003070 <HAL_GPIO_WritePin>
	}
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40020400 	.word	0x40020400

08001e78 <TM_KEYPAD_INT_CheckRow>:



uint8_t TM_KEYPAD_INT_CheckRow(uint8_t column) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	/* Read rows */
	
	/* Scan row 1 */
	if (KEYPAD_ROW_1_CHECK) {
 8001e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e86:	481d      	ldr	r0, [pc, #116]	; (8001efc <TM_KEYPAD_INT_CheckRow+0x84>)
 8001e88:	f001 f8da 	bl	8003040 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d104      	bne.n	8001e9c <TM_KEYPAD_INT_CheckRow+0x24>
		return KEYPAD_INT_Buttons[0][column - 1];	
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <TM_KEYPAD_INT_CheckRow+0x88>)
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	e02a      	b.n	8001ef2 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 2 */
	if (KEYPAD_ROW_2_CHECK) {
 8001e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ea0:	4818      	ldr	r0, [pc, #96]	; (8001f04 <TM_KEYPAD_INT_CheckRow+0x8c>)
 8001ea2:	f001 f8cd 	bl	8003040 <HAL_GPIO_ReadPin>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <TM_KEYPAD_INT_CheckRow+0x40>
		return KEYPAD_INT_Buttons[1][column - 1];
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <TM_KEYPAD_INT_CheckRow+0x88>)
 8001eb2:	4413      	add	r3, r2
 8001eb4:	791b      	ldrb	r3, [r3, #4]
 8001eb6:	e01c      	b.n	8001ef2 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 3 */
	if (KEYPAD_ROW_3_CHECK) {
 8001eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ebc:	4811      	ldr	r0, [pc, #68]	; (8001f04 <TM_KEYPAD_INT_CheckRow+0x8c>)
 8001ebe:	f001 f8bf 	bl	8003040 <HAL_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <TM_KEYPAD_INT_CheckRow+0x5c>
		return KEYPAD_INT_Buttons[2][column - 1];
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <TM_KEYPAD_INT_CheckRow+0x88>)
 8001ece:	4413      	add	r3, r2
 8001ed0:	7a1b      	ldrb	r3, [r3, #8]
 8001ed2:	e00e      	b.n	8001ef2 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	/* Scan row 4 */
	if (KEYPAD_ROW_4_CHECK) {
 8001ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed8:	480a      	ldr	r0, [pc, #40]	; (8001f04 <TM_KEYPAD_INT_CheckRow+0x8c>)
 8001eda:	f001 f8b1 	bl	8003040 <HAL_GPIO_ReadPin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <TM_KEYPAD_INT_CheckRow+0x78>
		return KEYPAD_INT_Buttons[3][column - 1];
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <TM_KEYPAD_INT_CheckRow+0x88>)
 8001eea:	4413      	add	r3, r2
 8001eec:	7b1b      	ldrb	r3, [r3, #12]
 8001eee:	e000      	b.n	8001ef2 <TM_KEYPAD_INT_CheckRow+0x7a>
	}
	
	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 8001ef0:	23ff      	movs	r3, #255	; 0xff
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40020000 	.word	0x40020000
 8001f00:	20000008 	.word	0x20000008
 8001f04:	40020400 	.word	0x40020400

08001f08 <TM_KEYPAD_INT_Read>:


uint8_t TM_KEYPAD_INT_Read(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	TM_KEYPAD_INT_SetColumn(1);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f7ff ff72 	bl	8001df8 <TM_KEYPAD_INT_SetColumn>
	/* Check rows */
	check = TM_KEYPAD_INT_CheckRow(1);
 8001f14:	2001      	movs	r0, #1
 8001f16:	f7ff ffaf 	bl	8001e78 <TM_KEYPAD_INT_CheckRow>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2bff      	cmp	r3, #255	; 0xff
 8001f22:	d001      	beq.n	8001f28 <TM_KEYPAD_INT_Read+0x20>
		return check;
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	e027      	b.n	8001f78 <TM_KEYPAD_INT_Read+0x70>
	}
	
	/* Set row 2 to LOW */
	TM_KEYPAD_INT_SetColumn(2);
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f7ff ff65 	bl	8001df8 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(2);
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7ff ffa2 	bl	8001e78 <TM_KEYPAD_INT_CheckRow>
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	2bff      	cmp	r3, #255	; 0xff
 8001f3c:	d001      	beq.n	8001f42 <TM_KEYPAD_INT_Read+0x3a>
		return check;
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	e01a      	b.n	8001f78 <TM_KEYPAD_INT_Read+0x70>
	}
	
	/* Set row 3 to LOW */
	TM_KEYPAD_INT_SetColumn(3);
 8001f42:	2003      	movs	r0, #3
 8001f44:	f7ff ff58 	bl	8001df8 <TM_KEYPAD_INT_SetColumn>
	/* Check columns */
	check = TM_KEYPAD_INT_CheckRow(3);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f7ff ff95 	bl	8001e78 <TM_KEYPAD_INT_CheckRow>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2bff      	cmp	r3, #255	; 0xff
 8001f56:	d001      	beq.n	8001f5c <TM_KEYPAD_INT_Read+0x54>
		return check;
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	e00d      	b.n	8001f78 <TM_KEYPAD_INT_Read+0x70>
	}


	/* Set column 4 to LOW */
	TM_KEYPAD_INT_SetColumn(4);
 8001f5c:	2004      	movs	r0, #4
 8001f5e:	f7ff ff4b 	bl	8001df8 <TM_KEYPAD_INT_SetColumn>
	/* Check rows */
	check = TM_KEYPAD_INT_CheckRow(4);
 8001f62:	2004      	movs	r0, #4
 8001f64:	f7ff ff88 	bl	8001e78 <TM_KEYPAD_INT_CheckRow>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NO_PRESSED) {
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	2bff      	cmp	r3, #255	; 0xff
 8001f70:	d001      	beq.n	8001f76 <TM_KEYPAD_INT_Read+0x6e>
		return check;
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	e000      	b.n	8001f78 <TM_KEYPAD_INT_Read+0x70>
	}

	/* Not pressed */
	return KEYPAD_NO_PRESSED;
 8001f76:	23ff      	movs	r3, #255	; 0xff
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <TM_KEYPAD_Update>:


void TM_KEYPAD_Update(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;

	/* Every X ms read */
	if (++millis >= KEYPAD_READ_INTERVAL && KeypadStatus == TM_KEYPAD_Button_NOPRESSED) {
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <TM_KEYPAD_Update+0x38>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <TM_KEYPAD_Update+0x38>)
 8001f8e:	801a      	strh	r2, [r3, #0]
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <TM_KEYPAD_Update+0x38>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	2bc7      	cmp	r3, #199	; 0xc7
 8001f96:	d90c      	bls.n	8001fb2 <TM_KEYPAD_Update+0x32>
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <TM_KEYPAD_Update+0x3c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2bff      	cmp	r3, #255	; 0xff
 8001f9e:	d108      	bne.n	8001fb2 <TM_KEYPAD_Update+0x32>
		/* Reset */
		millis = 0;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <TM_KEYPAD_Update+0x38>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	801a      	strh	r2, [r3, #0]

		/* Read keyboard */
		KeypadStatus = (TM_KEYPAD_Button_t) TM_KEYPAD_INT_Read();
 8001fa6:	f7ff ffaf 	bl	8001f08 <TM_KEYPAD_INT_Read>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <TM_KEYPAD_Update+0x3c>)
 8001fb0:	701a      	strb	r2, [r3, #0]
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000144 	.word	0x20000144
 8001fbc:	20000018 	.word	0x20000018

08001fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc4:	480d      	ldr	r0, [pc, #52]	; (8001ffc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fc6:	490e      	ldr	r1, [pc, #56]	; (8002000 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fc8:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fcc:	e002      	b.n	8001fd4 <LoopCopyDataInit>

08001fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd2:	3304      	adds	r3, #4

08001fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd8:	d3f9      	bcc.n	8001fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fda:	4a0b      	ldr	r2, [pc, #44]	; (8002008 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fdc:	4c0b      	ldr	r4, [pc, #44]	; (800200c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe0:	e001      	b.n	8001fe6 <LoopFillZerobss>

08001fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe4:	3204      	adds	r2, #4

08001fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe8:	d3fb      	bcc.n	8001fe2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fea:	f7ff fcdf 	bl	80019ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fee:	f003 fed3 	bl	8005d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff2:	f7fe fd1b 	bl	8000a2c <main>
  bx  lr    
 8001ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002000:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002004:	080066f4 	.word	0x080066f4
  ldr r2, =_sbss
 8002008:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800200c:	20000390 	.word	0x20000390

08002010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002010:	e7fe      	b.n	8002010 <ADC_IRQHandler>
	...

08002014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0d      	ldr	r2, [pc, #52]	; (8002054 <HAL_Init+0x40>)
 800201e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_Init+0x40>)
 800202a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a07      	ldr	r2, [pc, #28]	; (8002054 <HAL_Init+0x40>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800203c:	2003      	movs	r0, #3
 800203e:	f000 fcd9 	bl	80029f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002042:	2000      	movs	r0, #0
 8002044:	f000 f808 	bl	8002058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002048:	f7ff fa5c 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023c00 	.word	0x40023c00

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_InitTick+0x54>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_InitTick+0x58>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800206e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002072:	fbb2 f3f3 	udiv	r3, r2, r3
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fcf1 	bl	8002a5e <HAL_SYSTICK_Config>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00e      	b.n	80020a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	d80a      	bhi.n	80020a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208c:	2200      	movs	r2, #0
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f000 fcb9 	bl	8002a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002098:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <HAL_InitTick+0x5c>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000004 	.word	0x20000004
 80020b0:	20000020 	.word	0x20000020
 80020b4:	2000001c 	.word	0x2000001c

080020b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_IncTick+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x24>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <HAL_IncTick+0x24>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000020 	.word	0x20000020
 80020dc:	2000037c 	.word	0x2000037c

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	2000037c 	.word	0x2000037c

080020f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e033      	b.n	8002176 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fa1c 	bl	8001554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d118      	bne.n	8002168 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800213e:	f023 0302 	bic.w	r3, r3, #2
 8002142:	f043 0202 	orr.w	r2, r3, #2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fa86 	bl	800265c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f023 0303 	bic.w	r3, r3, #3
 800215e:	f043 0201 	orr.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
 8002166:	e001      	b.n	800216c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_ADC_Start+0x1a>
 8002196:	2302      	movs	r3, #2
 8002198:	e097      	b.n	80022ca <HAL_ADC_Start+0x14a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d018      	beq.n	80021e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021c0:	4b45      	ldr	r3, [pc, #276]	; (80022d8 <HAL_ADC_Start+0x158>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a45      	ldr	r2, [pc, #276]	; (80022dc <HAL_ADC_Start+0x15c>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9a      	lsrs	r2, r3, #18
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021d4:	e002      	b.n	80021dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f9      	bne.n	80021d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d15f      	bne.n	80022b0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800221a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222e:	d106      	bne.n	800223e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f023 0206 	bic.w	r2, r3, #6
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	645a      	str	r2, [r3, #68]	; 0x44
 800223c:	e002      	b.n	8002244 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_ADC_Start+0x160>)
 800224e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002258:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10f      	bne.n	8002286 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d129      	bne.n	80022c8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e020      	b.n	80022c8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <HAL_ADC_Start+0x164>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d11b      	bne.n	80022c8 <HAL_ADC_Start+0x148>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d114      	bne.n	80022c8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	e00b      	b.n	80022c8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000004 	.word	0x20000004
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	40012300 	.word	0x40012300
 80022e4:	40012000 	.word	0x40012000

080022e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002304:	d113      	bne.n	800232e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002314:	d10b      	bne.n	800232e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f043 0220 	orr.w	r2, r3, #32
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e063      	b.n	80023f6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800232e:	f7ff fed7 	bl	80020e0 <HAL_GetTick>
 8002332:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002334:	e021      	b.n	800237a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d01d      	beq.n	800237a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_ADC_PollForConversion+0x6c>
 8002344:	f7ff fecc 	bl	80020e0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d212      	bcs.n	800237a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d00b      	beq.n	800237a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f043 0204 	orr.w	r2, r3, #4
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e03d      	b.n	80023f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b02      	cmp	r3, #2
 8002386:	d1d6      	bne.n	8002336 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0212 	mvn.w	r2, #18
 8002390:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d123      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d11f      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d006      	beq.n	80023d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d111      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x1c>
 8002430:	2302      	movs	r3, #2
 8002432:	e105      	b.n	8002640 <HAL_ADC_ConfigChannel+0x228>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b09      	cmp	r3, #9
 8002442:	d925      	bls.n	8002490 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68d9      	ldr	r1, [r3, #12]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	3b1e      	subs	r3, #30
 800245a:	2207      	movs	r2, #7
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43da      	mvns	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	400a      	ands	r2, r1
 8002468:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68d9      	ldr	r1, [r3, #12]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	4618      	mov	r0, r3
 800247c:	4603      	mov	r3, r0
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4403      	add	r3, r0
 8002482:	3b1e      	subs	r3, #30
 8002484:	409a      	lsls	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	e022      	b.n	80024d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6919      	ldr	r1, [r3, #16]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	2207      	movs	r2, #7
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	400a      	ands	r2, r1
 80024b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6919      	ldr	r1, [r3, #16]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	4618      	mov	r0, r3
 80024c6:	4603      	mov	r3, r0
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4403      	add	r3, r0
 80024cc:	409a      	lsls	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d824      	bhi.n	8002528 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	3b05      	subs	r3, #5
 80024f0:	221f      	movs	r2, #31
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	400a      	ands	r2, r1
 80024fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	4618      	mov	r0, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	3b05      	subs	r3, #5
 800251a:	fa00 f203 	lsl.w	r2, r0, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	635a      	str	r2, [r3, #52]	; 0x34
 8002526:	e04c      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b0c      	cmp	r3, #12
 800252e:	d824      	bhi.n	800257a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	3b23      	subs	r3, #35	; 0x23
 8002542:	221f      	movs	r2, #31
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43da      	mvns	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	400a      	ands	r2, r1
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	4618      	mov	r0, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	3b23      	subs	r3, #35	; 0x23
 800256c:	fa00 f203 	lsl.w	r2, r0, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
 8002578:	e023      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	3b41      	subs	r3, #65	; 0x41
 800258c:	221f      	movs	r2, #31
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	400a      	ands	r2, r1
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4618      	mov	r0, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	3b41      	subs	r3, #65	; 0x41
 80025b6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_ADC_ConfigChannel+0x234>)
 80025c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a21      	ldr	r2, [pc, #132]	; (8002650 <HAL_ADC_ConfigChannel+0x238>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d109      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1cc>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b12      	cmp	r3, #18
 80025d6:	d105      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a19      	ldr	r2, [pc, #100]	; (8002650 <HAL_ADC_ConfigChannel+0x238>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d123      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x21e>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d003      	beq.n	80025fe <HAL_ADC_ConfigChannel+0x1e6>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b11      	cmp	r3, #17
 80025fc:	d11b      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b10      	cmp	r3, #16
 8002610:	d111      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_ADC_ConfigChannel+0x23c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a10      	ldr	r2, [pc, #64]	; (8002658 <HAL_ADC_ConfigChannel+0x240>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0c9a      	lsrs	r2, r3, #18
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002628:	e002      	b.n	8002630 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3b01      	subs	r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40012300 	.word	0x40012300
 8002650:	40012000 	.word	0x40012000
 8002654:	20000004 	.word	0x20000004
 8002658:	431bde83 	.word	0x431bde83

0800265c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002664:	4b79      	ldr	r3, [pc, #484]	; (800284c <ADC_Init+0x1f0>)
 8002666:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	021a      	lsls	r2, r3, #8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6899      	ldr	r1, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	4a58      	ldr	r2, [pc, #352]	; (8002850 <ADC_Init+0x1f4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d022      	beq.n	800273a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002702:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6899      	ldr	r1, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6899      	ldr	r1, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e00f      	b.n	800275a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002758:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0202 	bic.w	r2, r2, #2
 8002768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6899      	ldr	r1, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7e1b      	ldrb	r3, [r3, #24]
 8002774:	005a      	lsls	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01b      	beq.n	80027c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002796:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	3b01      	subs	r3, #1
 80027b4:	035a      	lsls	r2, r3, #13
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	e007      	b.n	80027d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	051a      	lsls	r2, r3, #20
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6899      	ldr	r1, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002812:	025a      	lsls	r2, r3, #9
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800282a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6899      	ldr	r1, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	029a      	lsls	r2, r3, #10
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	609a      	str	r2, [r3, #8]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	40012300 	.word	0x40012300
 8002850:	0f000001 	.word	0x0f000001

08002854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800287c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002886:	4a04      	ldr	r2, [pc, #16]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60d3      	str	r3, [r2, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <__NVIC_GetPriorityGrouping+0x18>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db0b      	blt.n	80028e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 021f 	and.w	r2, r3, #31
 80028d0:	4907      	ldr	r1, [pc, #28]	; (80028f0 <__NVIC_EnableIRQ+0x38>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2001      	movs	r0, #1
 80028da:	fa00 f202 	lsl.w	r2, r0, r2
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	; (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	; (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
         );
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c0:	d301      	bcc.n	80029c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00f      	b.n	80029e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <SysTick_Config+0x40>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ce:	210f      	movs	r1, #15
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f7ff ff8e 	bl	80028f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <SysTick_Config+0x40>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <SysTick_Config+0x40>)
 80029e0:	2207      	movs	r2, #7
 80029e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000e010 	.word	0xe000e010

080029f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff29 	bl	8002854 <__NVIC_SetPriorityGrouping>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a1c:	f7ff ff3e 	bl	800289c <__NVIC_GetPriorityGrouping>
 8002a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	6978      	ldr	r0, [r7, #20]
 8002a28:	f7ff ff8e 	bl	8002948 <NVIC_EncodePriority>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff5d 	bl	80028f4 <__NVIC_SetPriority>
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff31 	bl	80028b8 <__NVIC_EnableIRQ>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ffa2 	bl	80029b0 <SysTick_Config>
 8002a6c:	4603      	mov	r3, r0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff fb2c 	bl	80020e0 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e099      	b.n	8002bc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab4:	e00f      	b.n	8002ad6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab6:	f7ff fb13 	bl	80020e0 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d908      	bls.n	8002ad6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2203      	movs	r2, #3
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e078      	b.n	8002bc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e8      	bne.n	8002ab6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_DMA_Init+0x158>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d107      	bne.n	8002b40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f023 0307 	bic.w	r3, r3, #7
 8002b56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d117      	bne.n	8002b9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f85f 	bl	8002c40 <DMA_CheckFifoParam>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b96:	2301      	movs	r3, #1
 8002b98:	e016      	b.n	8002bc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f816 	bl	8002bd4 <DMA_CalcBaseAndBitshift>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	223f      	movs	r2, #63	; 0x3f
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	f010803f 	.word	0xf010803f

08002bd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	3b10      	subs	r3, #16
 8002be4:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <DMA_CalcBaseAndBitshift+0x64>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <DMA_CalcBaseAndBitshift+0x68>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d909      	bls.n	8002c16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c0a:	f023 0303 	bic.w	r3, r3, #3
 8002c0e:	1d1a      	adds	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	659a      	str	r2, [r3, #88]	; 0x58
 8002c14:	e007      	b.n	8002c26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	aaaaaaab 	.word	0xaaaaaaab
 8002c3c:	080066a8 	.word	0x080066a8

08002c40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11f      	bne.n	8002c9a <DMA_CheckFifoParam+0x5a>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d856      	bhi.n	8002d0e <DMA_CheckFifoParam+0xce>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <DMA_CheckFifoParam+0x28>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c8b 	.word	0x08002c8b
 8002c70:	08002c79 	.word	0x08002c79
 8002c74:	08002d0f 	.word	0x08002d0f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d046      	beq.n	8002d12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c88:	e043      	b.n	8002d12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c92:	d140      	bne.n	8002d16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c98:	e03d      	b.n	8002d16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca2:	d121      	bne.n	8002ce8 <DMA_CheckFifoParam+0xa8>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d837      	bhi.n	8002d1a <DMA_CheckFifoParam+0xda>
 8002caa:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <DMA_CheckFifoParam+0x70>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002cc7 	.word	0x08002cc7
 8002cb8:	08002cc1 	.word	0x08002cc1
 8002cbc:	08002cd9 	.word	0x08002cd9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc4:	e030      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d025      	beq.n	8002d1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd6:	e022      	b.n	8002d1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ce0:	d11f      	bne.n	8002d22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ce6:	e01c      	b.n	8002d22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d903      	bls.n	8002cf6 <DMA_CheckFifoParam+0xb6>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d003      	beq.n	8002cfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf4:	e018      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfa:	e015      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e00b      	b.n	8002d26 <DMA_CheckFifoParam+0xe6>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e00a      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d12:	bf00      	nop
 8002d14:	e008      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e006      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e004      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e002      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d22:	bf00      	nop
 8002d24:	e000      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
    }
  } 
  
  return status; 
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e159      	b.n	8003008 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f040 8148 	bne.w	8003002 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d005      	beq.n	8002d8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d130      	bne.n	8002dec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	2203      	movs	r2, #3
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 0201 	and.w	r2, r3, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d017      	beq.n	8002e28 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d123      	bne.n	8002e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3208      	adds	r2, #8
 8002e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0203 	and.w	r2, r3, #3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80a2 	beq.w	8003002 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	4b57      	ldr	r3, [pc, #348]	; (8003020 <HAL_GPIO_Init+0x2e8>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	4a56      	ldr	r2, [pc, #344]	; (8003020 <HAL_GPIO_Init+0x2e8>)
 8002ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ece:	4b54      	ldr	r3, [pc, #336]	; (8003020 <HAL_GPIO_Init+0x2e8>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eda:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_GPIO_Init+0x2ec>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a49      	ldr	r2, [pc, #292]	; (8003028 <HAL_GPIO_Init+0x2f0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d019      	beq.n	8002f3a <HAL_GPIO_Init+0x202>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a48      	ldr	r2, [pc, #288]	; (800302c <HAL_GPIO_Init+0x2f4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x1fe>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a47      	ldr	r2, [pc, #284]	; (8003030 <HAL_GPIO_Init+0x2f8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x1fa>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a46      	ldr	r2, [pc, #280]	; (8003034 <HAL_GPIO_Init+0x2fc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x1f6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a45      	ldr	r2, [pc, #276]	; (8003038 <HAL_GPIO_Init+0x300>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x1f2>
 8002f26:	2304      	movs	r3, #4
 8002f28:	e008      	b.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	e006      	b.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e004      	b.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e002      	b.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	f002 0203 	and.w	r2, r2, #3
 8002f42:	0092      	lsls	r2, r2, #2
 8002f44:	4093      	lsls	r3, r2
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f4c:	4935      	ldr	r1, [pc, #212]	; (8003024 <HAL_GPIO_Init+0x2ec>)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	3302      	adds	r3, #2
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f5a:	4b38      	ldr	r3, [pc, #224]	; (800303c <HAL_GPIO_Init+0x304>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f7e:	4a2f      	ldr	r2, [pc, #188]	; (800303c <HAL_GPIO_Init+0x304>)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_GPIO_Init+0x304>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa8:	4a24      	ldr	r2, [pc, #144]	; (800303c <HAL_GPIO_Init+0x304>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fae:	4b23      	ldr	r3, [pc, #140]	; (800303c <HAL_GPIO_Init+0x304>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fd2:	4a1a      	ldr	r2, [pc, #104]	; (800303c <HAL_GPIO_Init+0x304>)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_GPIO_Init+0x304>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ffc:	4a0f      	ldr	r2, [pc, #60]	; (800303c <HAL_GPIO_Init+0x304>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3301      	adds	r3, #1
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	f67f aea2 	bls.w	8002d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3724      	adds	r7, #36	; 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	40013800 	.word	0x40013800
 8003028:	40020000 	.word	0x40020000
 800302c:	40020400 	.word	0x40020400
 8003030:	40020800 	.word	0x40020800
 8003034:	40020c00 	.word	0x40020c00
 8003038:	40021000 	.word	0x40021000
 800303c:	40013c00 	.word	0x40013c00

08003040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	e001      	b.n	8003062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003062:	7bfb      	ldrb	r3, [r7, #15]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
 800307c:	4613      	mov	r3, r2
 800307e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003080:	787b      	ldrb	r3, [r7, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003086:	887a      	ldrh	r2, [r7, #2]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800308c:	e003      	b.n	8003096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800308e:	887b      	ldrh	r3, [r7, #2]
 8003090:	041a      	lsls	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	619a      	str	r2, [r3, #24]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e12b      	b.n	800330e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fe fa86 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2224      	movs	r2, #36	; 0x24
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003108:	f001 fb08 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 800310c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4a81      	ldr	r2, [pc, #516]	; (8003318 <HAL_I2C_Init+0x274>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d807      	bhi.n	8003128 <HAL_I2C_Init+0x84>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a80      	ldr	r2, [pc, #512]	; (800331c <HAL_I2C_Init+0x278>)
 800311c:	4293      	cmp	r3, r2
 800311e:	bf94      	ite	ls
 8003120:	2301      	movls	r3, #1
 8003122:	2300      	movhi	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e006      	b.n	8003136 <HAL_I2C_Init+0x92>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a7d      	ldr	r2, [pc, #500]	; (8003320 <HAL_I2C_Init+0x27c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	bf94      	ite	ls
 8003130:	2301      	movls	r3, #1
 8003132:	2300      	movhi	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0e7      	b.n	800330e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4a78      	ldr	r2, [pc, #480]	; (8003324 <HAL_I2C_Init+0x280>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	0c9b      	lsrs	r3, r3, #18
 8003148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a6a      	ldr	r2, [pc, #424]	; (8003318 <HAL_I2C_Init+0x274>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d802      	bhi.n	8003178 <HAL_I2C_Init+0xd4>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3301      	adds	r3, #1
 8003176:	e009      	b.n	800318c <HAL_I2C_Init+0xe8>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800317e:	fb02 f303 	mul.w	r3, r2, r3
 8003182:	4a69      	ldr	r2, [pc, #420]	; (8003328 <HAL_I2C_Init+0x284>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	3301      	adds	r3, #1
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	430b      	orrs	r3, r1
 8003192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800319e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	495c      	ldr	r1, [pc, #368]	; (8003318 <HAL_I2C_Init+0x274>)
 80031a8:	428b      	cmp	r3, r1
 80031aa:	d819      	bhi.n	80031e0 <HAL_I2C_Init+0x13c>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e59      	subs	r1, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ba:	1c59      	adds	r1, r3, #1
 80031bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031c0:	400b      	ands	r3, r1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_I2C_Init+0x138>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1e59      	subs	r1, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031da:	e051      	b.n	8003280 <HAL_I2C_Init+0x1dc>
 80031dc:	2304      	movs	r3, #4
 80031de:	e04f      	b.n	8003280 <HAL_I2C_Init+0x1dc>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d111      	bne.n	800320c <HAL_I2C_Init+0x168>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e58      	subs	r0, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	440b      	add	r3, r1
 80031f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	e012      	b.n	8003232 <HAL_I2C_Init+0x18e>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e58      	subs	r0, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	0099      	lsls	r1, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Init+0x196>
 8003236:	2301      	movs	r3, #1
 8003238:	e022      	b.n	8003280 <HAL_I2C_Init+0x1dc>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10e      	bne.n	8003260 <HAL_I2C_Init+0x1bc>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1e58      	subs	r0, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	440b      	add	r3, r1
 8003250:	fbb0 f3f3 	udiv	r3, r0, r3
 8003254:	3301      	adds	r3, #1
 8003256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325e:	e00f      	b.n	8003280 <HAL_I2C_Init+0x1dc>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1e58      	subs	r0, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	0099      	lsls	r1, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	fbb0 f3f3 	udiv	r3, r0, r3
 8003276:	3301      	adds	r3, #1
 8003278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	6809      	ldr	r1, [r1, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6911      	ldr	r1, [r2, #16]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68d2      	ldr	r2, [r2, #12]
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	000186a0 	.word	0x000186a0
 800331c:	001e847f 	.word	0x001e847f
 8003320:	003d08ff 	.word	0x003d08ff
 8003324:	431bde83 	.word	0x431bde83
 8003328:	10624dd3 	.word	0x10624dd3

0800332c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08c      	sub	sp, #48	; 0x30
 8003330:	af02      	add	r7, sp, #8
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	4608      	mov	r0, r1
 8003336:	4611      	mov	r1, r2
 8003338:	461a      	mov	r2, r3
 800333a:	4603      	mov	r3, r0
 800333c:	817b      	strh	r3, [r7, #10]
 800333e:	460b      	mov	r3, r1
 8003340:	813b      	strh	r3, [r7, #8]
 8003342:	4613      	mov	r3, r2
 8003344:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003346:	f7fe fecb 	bl	80020e0 <HAL_GetTick>
 800334a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	f040 8208 	bne.w	800376a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2319      	movs	r3, #25
 8003360:	2201      	movs	r2, #1
 8003362:	497b      	ldr	r1, [pc, #492]	; (8003550 <HAL_I2C_Mem_Read+0x224>)
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fc1d 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003370:	2302      	movs	r3, #2
 8003372:	e1fb      	b.n	800376c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_I2C_Mem_Read+0x56>
 800337e:	2302      	movs	r3, #2
 8003380:	e1f4      	b.n	800376c <HAL_I2C_Mem_Read+0x440>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d007      	beq.n	80033a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2222      	movs	r2, #34	; 0x22
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2240      	movs	r2, #64	; 0x40
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80033d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a5b      	ldr	r2, [pc, #364]	; (8003554 <HAL_I2C_Mem_Read+0x228>)
 80033e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ea:	88f8      	ldrh	r0, [r7, #6]
 80033ec:	893a      	ldrh	r2, [r7, #8]
 80033ee:	8979      	ldrh	r1, [r7, #10]
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	4603      	mov	r3, r0
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 faea 	bl	80039d4 <I2C_RequestMemoryRead>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e1b0      	b.n	800376c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d113      	bne.n	800343a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	623b      	str	r3, [r7, #32]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	623b      	str	r3, [r7, #32]
 8003426:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e184      	b.n	8003744 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343e:	2b01      	cmp	r3, #1
 8003440:	d11b      	bne.n	800347a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003450:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e164      	b.n	8003744 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	2b02      	cmp	r3, #2
 8003480:	d11b      	bne.n	80034ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003490:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	e144      	b.n	8003744 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034d0:	e138      	b.n	8003744 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	f200 80f1 	bhi.w	80036be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d123      	bne.n	800352c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fc72 	bl	8003dd2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e139      	b.n	800376c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	855a      	strh	r2, [r3, #42]	; 0x2a
 800352a:	e10b      	b.n	8003744 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	2b02      	cmp	r3, #2
 8003532:	d14e      	bne.n	80035d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353a:	2200      	movs	r2, #0
 800353c:	4906      	ldr	r1, [pc, #24]	; (8003558 <HAL_I2C_Mem_Read+0x22c>)
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fb30 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e10e      	b.n	800376c <HAL_I2C_Mem_Read+0x440>
 800354e:	bf00      	nop
 8003550:	00100002 	.word	0x00100002
 8003554:	ffff0000 	.word	0xffff0000
 8003558:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035d0:	e0b8      	b.n	8003744 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	2200      	movs	r2, #0
 80035da:	4966      	ldr	r1, [pc, #408]	; (8003774 <HAL_I2C_Mem_Read+0x448>)
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fae1 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0bf      	b.n	800376c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	2200      	movs	r2, #0
 8003636:	494f      	ldr	r1, [pc, #316]	; (8003774 <HAL_I2C_Mem_Read+0x448>)
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fab3 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e091      	b.n	800376c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036bc:	e042      	b.n	8003744 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 fb85 	bl	8003dd2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e04c      	b.n	800376c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d118      	bne.n	8003744 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	f47f aec2 	bne.w	80034d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3728      	adds	r7, #40	; 0x28
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	00010004 	.word	0x00010004

08003778 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	460b      	mov	r3, r1
 8003786:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7fe fcaa 	bl	80020e0 <HAL_GetTick>
 800378c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800378e:	2301      	movs	r3, #1
 8003790:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b20      	cmp	r3, #32
 800379c:	f040 8111 	bne.w	80039c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2319      	movs	r3, #25
 80037a6:	2201      	movs	r2, #1
 80037a8:	4988      	ldr	r1, [pc, #544]	; (80039cc <HAL_I2C_IsDeviceReady+0x254>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f9fa 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	e104      	b.n	80039c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_I2C_IsDeviceReady+0x50>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e0fd      	b.n	80039c4 <HAL_I2C_IsDeviceReady+0x24c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d007      	beq.n	80037ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2224      	movs	r2, #36	; 0x24
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a70      	ldr	r2, [pc, #448]	; (80039d0 <HAL_I2C_IsDeviceReady+0x258>)
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003820:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2200      	movs	r2, #0
 800382a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f9b8 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003848:	d103      	bne.n	8003852 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0b6      	b.n	80039c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003856:	897b      	ldrh	r3, [r7, #10]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003864:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003866:	f7fe fc3b 	bl	80020e0 <HAL_GetTick>
 800386a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800389a:	e025      	b.n	80038e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7fe fc20 	bl	80020e0 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <HAL_I2C_IsDeviceReady+0x13a>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	22a0      	movs	r2, #160	; 0xa0
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2ba0      	cmp	r3, #160	; 0xa0
 80038f2:	d005      	beq.n	8003900 <HAL_I2C_IsDeviceReady+0x188>
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d102      	bne.n	8003900 <HAL_I2C_IsDeviceReady+0x188>
 80038fa:	7dbb      	ldrb	r3, [r7, #22]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0cd      	beq.n	800389c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b02      	cmp	r3, #2
 8003914:	d129      	bne.n	800396a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003924:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2319      	movs	r3, #25
 8003942:	2201      	movs	r2, #1
 8003944:	4921      	ldr	r1, [pc, #132]	; (80039cc <HAL_I2C_IsDeviceReady+0x254>)
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f92c 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e036      	b.n	80039c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	e02c      	b.n	80039c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003978:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003982:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2319      	movs	r3, #25
 800398a:	2201      	movs	r2, #1
 800398c:	490f      	ldr	r1, [pc, #60]	; (80039cc <HAL_I2C_IsDeviceReady+0x254>)
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f908 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e012      	b.n	80039c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3301      	adds	r3, #1
 80039a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	f4ff af32 	bcc.w	8003812 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	00100002 	.word	0x00100002
 80039d0:	ffff0000 	.word	0xffff0000

080039d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	817b      	strh	r3, [r7, #10]
 80039e6:	460b      	mov	r3, r1
 80039e8:	813b      	strh	r3, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f8c2 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00d      	beq.n	8003a42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a34:	d103      	bne.n	8003a3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e0aa      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a42:	897b      	ldrh	r3, [r7, #10]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	6a3a      	ldr	r2, [r7, #32]
 8003a56:	4952      	ldr	r1, [pc, #328]	; (8003ba0 <I2C_RequestMemoryRead+0x1cc>)
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f8fa 	bl	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e097      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a80:	6a39      	ldr	r1, [r7, #32]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f964 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d107      	bne.n	8003aa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e076      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab0:	893b      	ldrh	r3, [r7, #8]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	611a      	str	r2, [r3, #16]
 8003aba:	e021      	b.n	8003b00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003abc:	893b      	ldrh	r3, [r7, #8]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f93e 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d107      	bne.n	8003af2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e050      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003af6:	893b      	ldrh	r3, [r7, #8]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b02:	6a39      	ldr	r1, [r7, #32]
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f923 	bl	8003d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00d      	beq.n	8003b2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d107      	bne.n	8003b28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e035      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f82b 	bl	8003ba4 <I2C_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b62:	d103      	bne.n	8003b6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e013      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b70:	897b      	ldrh	r3, [r7, #10]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	6a3a      	ldr	r2, [r7, #32]
 8003b84:	4906      	ldr	r1, [pc, #24]	; (8003ba0 <I2C_RequestMemoryRead+0x1cc>)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f863 	bl	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	00010002 	.word	0x00010002

08003ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb4:	e025      	b.n	8003c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d021      	beq.n	8003c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbe:	f7fe fa8f 	bl	80020e0 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d302      	bcc.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d116      	bne.n	8003c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0220 	orr.w	r2, r3, #32
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e023      	b.n	8003c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10d      	bne.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4013      	ands	r3, r2
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2301      	moveq	r3, #1
 8003c20:	2300      	movne	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	e00c      	b.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4013      	ands	r3, r2
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bf0c      	ite	eq
 8003c3a:	2301      	moveq	r3, #1
 8003c3c:	2300      	movne	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d0b6      	beq.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c60:	e051      	b.n	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c70:	d123      	bne.n	8003cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f043 0204 	orr.w	r2, r3, #4
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e046      	b.n	8003d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d021      	beq.n	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc2:	f7fe fa0d 	bl	80020e0 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d116      	bne.n	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e020      	b.n	8003d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d10c      	bne.n	8003d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	43da      	mvns	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e00b      	b.n	8003d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	43da      	mvns	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4013      	ands	r3, r2
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d18d      	bne.n	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d5c:	e02d      	b.n	8003dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f88d 	bl	8003e7e <I2C_IsAcknowledgeFailed>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e02d      	b.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d021      	beq.n	8003dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fe f9b3 	bl	80020e0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d116      	bne.n	8003dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f043 0220 	orr.w	r2, r3, #32
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e007      	b.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b80      	cmp	r3, #128	; 0x80
 8003dc6:	d1ca      	bne.n	8003d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dde:	e042      	b.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d119      	bne.n	8003e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f06f 0210 	mvn.w	r2, #16
 8003df6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e029      	b.n	8003e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7fe f95d 	bl	80020e0 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d116      	bne.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e007      	b.n	8003e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d1b5      	bne.n	8003de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	d11b      	bne.n	8003ece <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e9e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f043 0204 	orr.w	r2, r3, #4
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e264      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d075      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003efa:	4ba3      	ldr	r3, [pc, #652]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d00c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f06:	4ba0      	ldr	r3, [pc, #640]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d112      	bne.n	8003f38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f12:	4b9d      	ldr	r3, [pc, #628]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f1e:	d10b      	bne.n	8003f38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	4b99      	ldr	r3, [pc, #612]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d05b      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x108>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d157      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e23f      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f40:	d106      	bne.n	8003f50 <HAL_RCC_OscConfig+0x74>
 8003f42:	4b91      	ldr	r3, [pc, #580]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a90      	ldr	r2, [pc, #576]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e01d      	b.n	8003f8c <HAL_RCC_OscConfig+0xb0>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x98>
 8003f5a:	4b8b      	ldr	r3, [pc, #556]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a8a      	ldr	r2, [pc, #552]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	4b88      	ldr	r3, [pc, #544]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a87      	ldr	r2, [pc, #540]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e00b      	b.n	8003f8c <HAL_RCC_OscConfig+0xb0>
 8003f74:	4b84      	ldr	r3, [pc, #528]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a83      	ldr	r2, [pc, #524]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	4b81      	ldr	r3, [pc, #516]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a80      	ldr	r2, [pc, #512]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d013      	beq.n	8003fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fe f8a4 	bl	80020e0 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fe f8a0 	bl	80020e0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b64      	cmp	r3, #100	; 0x64
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e204      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	4b76      	ldr	r3, [pc, #472]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0xc0>
 8003fba:	e014      	b.n	8003fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fe f890 	bl	80020e0 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7fe f88c 	bl	80020e0 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e1f0      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd6:	4b6c      	ldr	r3, [pc, #432]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0xe8>
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d063      	beq.n	80040ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ff2:	4b65      	ldr	r3, [pc, #404]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffe:	4b62      	ldr	r3, [pc, #392]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004006:	2b08      	cmp	r3, #8
 8004008:	d11c      	bne.n	8004044 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400a:	4b5f      	ldr	r3, [pc, #380]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d116      	bne.n	8004044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004016:	4b5c      	ldr	r3, [pc, #368]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_RCC_OscConfig+0x152>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d001      	beq.n	800402e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e1c4      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402e:	4b56      	ldr	r3, [pc, #344]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4952      	ldr	r1, [pc, #328]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	e03a      	b.n	80040ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d020      	beq.n	800408e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800404c:	4b4f      	ldr	r3, [pc, #316]	; (800418c <HAL_RCC_OscConfig+0x2b0>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fe f845 	bl	80020e0 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800405a:	f7fe f841 	bl	80020e0 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e1a5      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406c:	4b46      	ldr	r3, [pc, #280]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004078:	4b43      	ldr	r3, [pc, #268]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4940      	ldr	r1, [pc, #256]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]
 800408c:	e015      	b.n	80040ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408e:	4b3f      	ldr	r3, [pc, #252]	; (800418c <HAL_RCC_OscConfig+0x2b0>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fe f824 	bl	80020e0 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800409c:	f7fe f820 	bl	80020e0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e184      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ae:	4b36      	ldr	r3, [pc, #216]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d030      	beq.n	8004128 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ce:	4b30      	ldr	r3, [pc, #192]	; (8004190 <HAL_RCC_OscConfig+0x2b4>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d4:	f7fe f804 	bl	80020e0 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040dc:	f7fe f800 	bl	80020e0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e164      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	4b26      	ldr	r3, [pc, #152]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x200>
 80040fa:	e015      	b.n	8004128 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fc:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_RCC_OscConfig+0x2b4>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004102:	f7fd ffed 	bl	80020e0 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800410a:	f7fd ffe9 	bl	80020e0 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e14d      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 800411e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80a0 	beq.w	8004276 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	6413      	str	r3, [r2, #64]	; 0x40
 8004156:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_RCC_OscConfig+0x2b8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d121      	bne.n	80041b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <HAL_RCC_OscConfig+0x2b8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a07      	ldr	r2, [pc, #28]	; (8004194 <HAL_RCC_OscConfig+0x2b8>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417e:	f7fd ffaf 	bl	80020e0 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	e011      	b.n	80041aa <HAL_RCC_OscConfig+0x2ce>
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800
 800418c:	42470000 	.word	0x42470000
 8004190:	42470e80 	.word	0x42470e80
 8004194:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004198:	f7fd ffa2 	bl	80020e0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e106      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041aa:	4b85      	ldr	r3, [pc, #532]	; (80043c0 <HAL_RCC_OscConfig+0x4e4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d106      	bne.n	80041cc <HAL_RCC_OscConfig+0x2f0>
 80041be:	4b81      	ldr	r3, [pc, #516]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c2:	4a80      	ldr	r2, [pc, #512]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ca:	e01c      	b.n	8004206 <HAL_RCC_OscConfig+0x32a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b05      	cmp	r3, #5
 80041d2:	d10c      	bne.n	80041ee <HAL_RCC_OscConfig+0x312>
 80041d4:	4b7b      	ldr	r3, [pc, #492]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	4a7a      	ldr	r2, [pc, #488]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 80041da:	f043 0304 	orr.w	r3, r3, #4
 80041de:	6713      	str	r3, [r2, #112]	; 0x70
 80041e0:	4b78      	ldr	r3, [pc, #480]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a77      	ldr	r2, [pc, #476]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
 80041ec:	e00b      	b.n	8004206 <HAL_RCC_OscConfig+0x32a>
 80041ee:	4b75      	ldr	r3, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	4a74      	ldr	r2, [pc, #464]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	6713      	str	r3, [r2, #112]	; 0x70
 80041fa:	4b72      	ldr	r3, [pc, #456]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	4a71      	ldr	r2, [pc, #452]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 8004200:	f023 0304 	bic.w	r3, r3, #4
 8004204:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d015      	beq.n	800423a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420e:	f7fd ff67 	bl	80020e0 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004214:	e00a      	b.n	800422c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004216:	f7fd ff63 	bl	80020e0 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f241 3288 	movw	r2, #5000	; 0x1388
 8004224:	4293      	cmp	r3, r2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e0c5      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422c:	4b65      	ldr	r3, [pc, #404]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0ee      	beq.n	8004216 <HAL_RCC_OscConfig+0x33a>
 8004238:	e014      	b.n	8004264 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423a:	f7fd ff51 	bl	80020e0 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004240:	e00a      	b.n	8004258 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004242:	f7fd ff4d 	bl	80020e0 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004250:	4293      	cmp	r3, r2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e0af      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004258:	4b5a      	ldr	r3, [pc, #360]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1ee      	bne.n	8004242 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d105      	bne.n	8004276 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800426a:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	4a55      	ldr	r2, [pc, #340]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 8004270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004274:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 809b 	beq.w	80043b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004280:	4b50      	ldr	r3, [pc, #320]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 030c 	and.w	r3, r3, #12
 8004288:	2b08      	cmp	r3, #8
 800428a:	d05c      	beq.n	8004346 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d141      	bne.n	8004318 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004294:	4b4c      	ldr	r3, [pc, #304]	; (80043c8 <HAL_RCC_OscConfig+0x4ec>)
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429a:	f7fd ff21 	bl	80020e0 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a2:	f7fd ff1d 	bl	80020e0 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e081      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b4:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f0      	bne.n	80042a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	019b      	lsls	r3, r3, #6
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	3b01      	subs	r3, #1
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	061b      	lsls	r3, r3, #24
 80042e4:	4937      	ldr	r1, [pc, #220]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ea:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <HAL_RCC_OscConfig+0x4ec>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fd fef6 	bl	80020e0 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fd fef2 	bl	80020e0 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e056      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x41c>
 8004316:	e04e      	b.n	80043b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004318:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <HAL_RCC_OscConfig+0x4ec>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fd fedf 	bl	80020e0 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004326:	f7fd fedb 	bl	80020e0 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e03f      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004338:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f0      	bne.n	8004326 <HAL_RCC_OscConfig+0x44a>
 8004344:	e037      	b.n	80043b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e032      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <HAL_RCC_OscConfig+0x4e8>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d028      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d121      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d11a      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004382:	4013      	ands	r3, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004388:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800438a:	4293      	cmp	r3, r2
 800438c:	d111      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	085b      	lsrs	r3, r3, #1
 800439a:	3b01      	subs	r3, #1
 800439c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40007000 	.word	0x40007000
 80043c4:	40023800 	.word	0x40023800
 80043c8:	42470060 	.word	0x42470060

080043cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e0cc      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043e0:	4b68      	ldr	r3, [pc, #416]	; (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d90c      	bls.n	8004408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b63      	ldr	r3, [pc, #396]	; (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0b8      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004420:	4b59      	ldr	r3, [pc, #356]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4a58      	ldr	r2, [pc, #352]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800442a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004438:	4b53      	ldr	r3, [pc, #332]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4a52      	ldr	r2, [pc, #328]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004444:	4b50      	ldr	r3, [pc, #320]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	494d      	ldr	r1, [pc, #308]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d044      	beq.n	80044ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d107      	bne.n	800447a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	4b47      	ldr	r3, [pc, #284]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d119      	bne.n	80044aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e07f      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d003      	beq.n	800448a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004486:	2b03      	cmp	r3, #3
 8004488:	d107      	bne.n	800449a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448a:	4b3f      	ldr	r3, [pc, #252]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e06f      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449a:	4b3b      	ldr	r3, [pc, #236]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e067      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044aa:	4b37      	ldr	r3, [pc, #220]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f023 0203 	bic.w	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	4934      	ldr	r1, [pc, #208]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044bc:	f7fd fe10 	bl	80020e0 <HAL_GetTick>
 80044c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c2:	e00a      	b.n	80044da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c4:	f7fd fe0c 	bl	80020e0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e04f      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044da:	4b2b      	ldr	r3, [pc, #172]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 020c 	and.w	r2, r3, #12
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d1eb      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044ec:	4b25      	ldr	r3, [pc, #148]	; (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d20c      	bcs.n	8004514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fa:	4b22      	ldr	r3, [pc, #136]	; (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004502:	4b20      	ldr	r3, [pc, #128]	; (8004584 <HAL_RCC_ClockConfig+0x1b8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e032      	b.n	800457a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004520:	4b19      	ldr	r3, [pc, #100]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4916      	ldr	r1, [pc, #88]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800453e:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	490e      	ldr	r1, [pc, #56]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004552:	f000 f821 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004556:	4602      	mov	r2, r0
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	490a      	ldr	r1, [pc, #40]	; (800458c <HAL_RCC_ClockConfig+0x1c0>)
 8004564:	5ccb      	ldrb	r3, [r1, r3]
 8004566:	fa22 f303 	lsr.w	r3, r2, r3
 800456a:	4a09      	ldr	r2, [pc, #36]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 800456c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCC_ClockConfig+0x1c8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fd70 	bl	8002058 <HAL_InitTick>

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40023c00 	.word	0x40023c00
 8004588:	40023800 	.word	0x40023800
 800458c:	08006690 	.word	0x08006690
 8004590:	20000004 	.word	0x20000004
 8004594:	2000001c 	.word	0x2000001c

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	b5b0      	push	{r4, r5, r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800459e:	2100      	movs	r1, #0
 80045a0:	6079      	str	r1, [r7, #4]
 80045a2:	2100      	movs	r1, #0
 80045a4:	60f9      	str	r1, [r7, #12]
 80045a6:	2100      	movs	r1, #0
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045aa:	2100      	movs	r1, #0
 80045ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ae:	4952      	ldr	r1, [pc, #328]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80045b0:	6889      	ldr	r1, [r1, #8]
 80045b2:	f001 010c 	and.w	r1, r1, #12
 80045b6:	2908      	cmp	r1, #8
 80045b8:	d00d      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80045ba:	2908      	cmp	r1, #8
 80045bc:	f200 8094 	bhi.w	80046e8 <HAL_RCC_GetSysClockFreq+0x150>
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d002      	beq.n	80045ca <HAL_RCC_GetSysClockFreq+0x32>
 80045c4:	2904      	cmp	r1, #4
 80045c6:	d003      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x38>
 80045c8:	e08e      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ca:	4b4c      	ldr	r3, [pc, #304]	; (80046fc <HAL_RCC_GetSysClockFreq+0x164>)
 80045cc:	60bb      	str	r3, [r7, #8]
       break;
 80045ce:	e08e      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d0:	4b4b      	ldr	r3, [pc, #300]	; (8004700 <HAL_RCC_GetSysClockFreq+0x168>)
 80045d2:	60bb      	str	r3, [r7, #8]
      break;
 80045d4:	e08b      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d6:	4948      	ldr	r1, [pc, #288]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80045d8:	6849      	ldr	r1, [r1, #4]
 80045da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80045de:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045e0:	4945      	ldr	r1, [pc, #276]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80045e2:	6849      	ldr	r1, [r1, #4]
 80045e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80045e8:	2900      	cmp	r1, #0
 80045ea:	d024      	beq.n	8004636 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ec:	4942      	ldr	r1, [pc, #264]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80045ee:	6849      	ldr	r1, [r1, #4]
 80045f0:	0989      	lsrs	r1, r1, #6
 80045f2:	4608      	mov	r0, r1
 80045f4:	f04f 0100 	mov.w	r1, #0
 80045f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80045fc:	f04f 0500 	mov.w	r5, #0
 8004600:	ea00 0204 	and.w	r2, r0, r4
 8004604:	ea01 0305 	and.w	r3, r1, r5
 8004608:	493d      	ldr	r1, [pc, #244]	; (8004700 <HAL_RCC_GetSysClockFreq+0x168>)
 800460a:	fb01 f003 	mul.w	r0, r1, r3
 800460e:	2100      	movs	r1, #0
 8004610:	fb01 f102 	mul.w	r1, r1, r2
 8004614:	1844      	adds	r4, r0, r1
 8004616:	493a      	ldr	r1, [pc, #232]	; (8004700 <HAL_RCC_GetSysClockFreq+0x168>)
 8004618:	fba2 0101 	umull	r0, r1, r2, r1
 800461c:	1863      	adds	r3, r4, r1
 800461e:	4619      	mov	r1, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	461a      	mov	r2, r3
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	f7fb fe2a 	bl	8000280 <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4613      	mov	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e04a      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004636:	4b30      	ldr	r3, [pc, #192]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	099b      	lsrs	r3, r3, #6
 800463c:	461a      	mov	r2, r3
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	ea02 0400 	and.w	r4, r2, r0
 800464e:	ea03 0501 	and.w	r5, r3, r1
 8004652:	4620      	mov	r0, r4
 8004654:	4629      	mov	r1, r5
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	014b      	lsls	r3, r1, #5
 8004660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004664:	0142      	lsls	r2, r0, #5
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	1b00      	subs	r0, r0, r4
 800466c:	eb61 0105 	sbc.w	r1, r1, r5
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	018b      	lsls	r3, r1, #6
 800467a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800467e:	0182      	lsls	r2, r0, #6
 8004680:	1a12      	subs	r2, r2, r0
 8004682:	eb63 0301 	sbc.w	r3, r3, r1
 8004686:	f04f 0000 	mov.w	r0, #0
 800468a:	f04f 0100 	mov.w	r1, #0
 800468e:	00d9      	lsls	r1, r3, #3
 8004690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004694:	00d0      	lsls	r0, r2, #3
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	1912      	adds	r2, r2, r4
 800469c:	eb45 0303 	adc.w	r3, r5, r3
 80046a0:	f04f 0000 	mov.w	r0, #0
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	0299      	lsls	r1, r3, #10
 80046aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046ae:	0290      	lsls	r0, r2, #10
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4610      	mov	r0, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	f7fb fdde 	bl	8000280 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4613      	mov	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	0c1b      	lsrs	r3, r3, #16
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	3301      	adds	r3, #1
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	60bb      	str	r3, [r7, #8]
      break;
 80046e6:	e002      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4b04      	ldr	r3, [pc, #16]	; (80046fc <HAL_RCC_GetSysClockFreq+0x164>)
 80046ea:	60bb      	str	r3, [r7, #8]
      break;
 80046ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ee:	68bb      	ldr	r3, [r7, #8]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bdb0      	pop	{r4, r5, r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	00f42400 	.word	0x00f42400
 8004700:	017d7840 	.word	0x017d7840

08004704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_RCC_GetHCLKFreq+0x14>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000004 	.word	0x20000004

0800471c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004720:	f7ff fff0 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0a9b      	lsrs	r3, r3, #10
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4903      	ldr	r1, [pc, #12]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40023800 	.word	0x40023800
 8004740:	080066a0 	.word	0x080066a0

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004748:	f7ff ffdc 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	0b5b      	lsrs	r3, r3, #13
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4903      	ldr	r1, [pc, #12]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40023800 	.word	0x40023800
 8004768:	080066a0 	.word	0x080066a0

0800476c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e041      	b.n	8004802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc ffb2 	bl	80016fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f000 fd8a 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d001      	beq.n	8004824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e044      	b.n	80048ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <HAL_TIM_Base_Start_IT+0xb0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x6c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484e:	d013      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x6c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1a      	ldr	r2, [pc, #104]	; (80048c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x6c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x6c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a17      	ldr	r2, [pc, #92]	; (80048c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x6c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a16      	ldr	r2, [pc, #88]	; (80048cc <HAL_TIM_Base_Start_IT+0xc0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d111      	bne.n	800489c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d010      	beq.n	80048ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e007      	b.n	80048ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40000c00 	.word	0x40000c00
 80048cc:	40014000 	.word	0x40014000

080048d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e041      	b.n	8004966 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f839 	bl	800496e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f000 fcd8 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <HAL_TIM_PWM_Start+0x24>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	bf14      	ite	ne
 80049a0:	2301      	movne	r3, #1
 80049a2:	2300      	moveq	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e022      	b.n	80049ee <HAL_TIM_PWM_Start+0x6a>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d109      	bne.n	80049c2 <HAL_TIM_PWM_Start+0x3e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	e015      	b.n	80049ee <HAL_TIM_PWM_Start+0x6a>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d109      	bne.n	80049dc <HAL_TIM_PWM_Start+0x58>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e008      	b.n	80049ee <HAL_TIM_PWM_Start+0x6a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e068      	b.n	8004ac8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_PWM_Start+0x82>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a04:	e013      	b.n	8004a2e <HAL_TIM_PWM_Start+0xaa>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_PWM_Start+0x92>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a14:	e00b      	b.n	8004a2e <HAL_TIM_PWM_Start+0xaa>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_PWM_Start+0xa2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a24:	e003      	b.n	8004a2e <HAL_TIM_PWM_Start+0xaa>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 feea 	bl	8005810 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a23      	ldr	r2, [pc, #140]	; (8004ad0 <HAL_TIM_PWM_Start+0x14c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d107      	bne.n	8004a56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <HAL_TIM_PWM_Start+0x14c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d018      	beq.n	8004a92 <HAL_TIM_PWM_Start+0x10e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a68:	d013      	beq.n	8004a92 <HAL_TIM_PWM_Start+0x10e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <HAL_TIM_PWM_Start+0x150>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <HAL_TIM_PWM_Start+0x10e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <HAL_TIM_PWM_Start+0x154>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_TIM_PWM_Start+0x10e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a16      	ldr	r2, [pc, #88]	; (8004adc <HAL_TIM_PWM_Start+0x158>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_TIM_PWM_Start+0x10e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a14      	ldr	r2, [pc, #80]	; (8004ae0 <HAL_TIM_PWM_Start+0x15c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d111      	bne.n	8004ab6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b06      	cmp	r3, #6
 8004aa2:	d010      	beq.n	8004ac6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab4:	e007      	b.n	8004ac6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0201 	orr.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40000800 	.word	0x40000800
 8004adc:	40000c00 	.word	0x40000c00
 8004ae0:	40014000 	.word	0x40014000

08004ae4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e097      	b.n	8004c28 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d106      	bne.n	8004b12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7fc fdad 	bl	800166c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b28:	f023 0307 	bic.w	r3, r3, #7
 8004b2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f000 fbc3 	bl	80052c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	4313      	orrs	r3, r2
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b84:	f023 030c 	bic.w	r3, r3, #12
 8004b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	021b      	lsls	r3, r3, #8
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	011a      	lsls	r2, r3, #4
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	031b      	lsls	r3, r3, #12
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004bc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d110      	bne.n	8004c82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d102      	bne.n	8004c6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c66:	7b7b      	ldrb	r3, [r7, #13]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d001      	beq.n	8004c70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e069      	b.n	8004d44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c80:	e031      	b.n	8004ce6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d110      	bne.n	8004caa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c88:	7bbb      	ldrb	r3, [r7, #14]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d102      	bne.n	8004c94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c8e:	7b3b      	ldrb	r3, [r7, #12]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d001      	beq.n	8004c98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e055      	b.n	8004d44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ca8:	e01d      	b.n	8004ce6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d108      	bne.n	8004cc2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb0:	7bbb      	ldrb	r3, [r7, #14]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb6:	7b7b      	ldrb	r3, [r7, #13]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d102      	bne.n	8004cc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cbc:	7b3b      	ldrb	r3, [r7, #12]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d001      	beq.n	8004cc6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e03e      	b.n	8004d44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_TIM_Encoder_Start+0xc4>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d008      	beq.n	8004d04 <HAL_TIM_Encoder_Start+0xd4>
 8004cf2:	e00f      	b.n	8004d14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fd87 	bl	8005810 <TIM_CCxChannelCmd>
      break;
 8004d02:	e016      	b.n	8004d32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	2104      	movs	r1, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fd7f 	bl	8005810 <TIM_CCxChannelCmd>
      break;
 8004d12:	e00e      	b.n	8004d32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fd77 	bl	8005810 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2201      	movs	r2, #1
 8004d28:	2104      	movs	r1, #4
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fd70 	bl	8005810 <TIM_CCxChannelCmd>
      break;
 8004d30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0201 	orr.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d122      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d11b      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0202 	mvn.w	r2, #2
 8004d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa7a 	bl	8005288 <HAL_TIM_IC_CaptureCallback>
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fa6c 	bl	8005274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fa7d 	bl	800529c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d122      	bne.n	8004dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d11b      	bne.n	8004dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0204 	mvn.w	r2, #4
 8004dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa50 	bl	8005288 <HAL_TIM_IC_CaptureCallback>
 8004de8:	e005      	b.n	8004df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fa42 	bl	8005274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fa53 	bl	800529c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d122      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d11b      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0208 	mvn.w	r2, #8
 8004e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2204      	movs	r2, #4
 8004e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fa26 	bl	8005288 <HAL_TIM_IC_CaptureCallback>
 8004e3c:	e005      	b.n	8004e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fa18 	bl	8005274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fa29 	bl	800529c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d122      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d11b      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0210 	mvn.w	r2, #16
 8004e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2208      	movs	r2, #8
 8004e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f9fc 	bl	8005288 <HAL_TIM_IC_CaptureCallback>
 8004e90:	e005      	b.n	8004e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f9ee 	bl	8005274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f9ff 	bl	800529c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d10e      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d107      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0201 	mvn.w	r2, #1
 8004ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f9c8 	bl	8005260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	2b80      	cmp	r3, #128	; 0x80
 8004edc:	d10e      	bne.n	8004efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee8:	2b80      	cmp	r3, #128	; 0x80
 8004eea:	d107      	bne.n	8004efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fd28 	bl	800594c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d10e      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	d107      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9c4 	bl	80052b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d10e      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d107      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0220 	mvn.w	r2, #32
 8004f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fcf2 	bl	8005938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f54:	bf00      	nop
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e0ac      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	f200 809f 	bhi.w	80050c4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004f86:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08004fc1 	.word	0x08004fc1
 8004f90:	080050c5 	.word	0x080050c5
 8004f94:	080050c5 	.word	0x080050c5
 8004f98:	080050c5 	.word	0x080050c5
 8004f9c:	08005001 	.word	0x08005001
 8004fa0:	080050c5 	.word	0x080050c5
 8004fa4:	080050c5 	.word	0x080050c5
 8004fa8:	080050c5 	.word	0x080050c5
 8004fac:	08005043 	.word	0x08005043
 8004fb0:	080050c5 	.word	0x080050c5
 8004fb4:	080050c5 	.word	0x080050c5
 8004fb8:	080050c5 	.word	0x080050c5
 8004fbc:	08005083 	.word	0x08005083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f9fc 	bl	80053c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0208 	orr.w	r2, r2, #8
 8004fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0204 	bic.w	r2, r2, #4
 8004fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6999      	ldr	r1, [r3, #24]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	619a      	str	r2, [r3, #24]
      break;
 8004ffe:	e062      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fa42 	bl	8005490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800501a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6999      	ldr	r1, [r3, #24]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	021a      	lsls	r2, r3, #8
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	619a      	str	r2, [r3, #24]
      break;
 8005040:	e041      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fa8d 	bl	8005568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0208 	orr.w	r2, r2, #8
 800505c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0204 	bic.w	r2, r2, #4
 800506c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69d9      	ldr	r1, [r3, #28]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	61da      	str	r2, [r3, #28]
      break;
 8005080:	e021      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fad7 	bl	800563c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69da      	ldr	r2, [r3, #28]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800509c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69da      	ldr	r2, [r3, #28]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69d9      	ldr	r1, [r3, #28]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	021a      	lsls	r2, r3, #8
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	61da      	str	r2, [r3, #28]
      break;
 80050c2:	e000      	b.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80050c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_TIM_ConfigClockSource+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e0b3      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x180>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800510e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005116:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005128:	d03e      	beq.n	80051a8 <HAL_TIM_ConfigClockSource+0xd0>
 800512a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512e:	f200 8087 	bhi.w	8005240 <HAL_TIM_ConfigClockSource+0x168>
 8005132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005136:	f000 8085 	beq.w	8005244 <HAL_TIM_ConfigClockSource+0x16c>
 800513a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513e:	d87f      	bhi.n	8005240 <HAL_TIM_ConfigClockSource+0x168>
 8005140:	2b70      	cmp	r3, #112	; 0x70
 8005142:	d01a      	beq.n	800517a <HAL_TIM_ConfigClockSource+0xa2>
 8005144:	2b70      	cmp	r3, #112	; 0x70
 8005146:	d87b      	bhi.n	8005240 <HAL_TIM_ConfigClockSource+0x168>
 8005148:	2b60      	cmp	r3, #96	; 0x60
 800514a:	d050      	beq.n	80051ee <HAL_TIM_ConfigClockSource+0x116>
 800514c:	2b60      	cmp	r3, #96	; 0x60
 800514e:	d877      	bhi.n	8005240 <HAL_TIM_ConfigClockSource+0x168>
 8005150:	2b50      	cmp	r3, #80	; 0x50
 8005152:	d03c      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0xf6>
 8005154:	2b50      	cmp	r3, #80	; 0x50
 8005156:	d873      	bhi.n	8005240 <HAL_TIM_ConfigClockSource+0x168>
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d058      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x136>
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d86f      	bhi.n	8005240 <HAL_TIM_ConfigClockSource+0x168>
 8005160:	2b30      	cmp	r3, #48	; 0x30
 8005162:	d064      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x156>
 8005164:	2b30      	cmp	r3, #48	; 0x30
 8005166:	d86b      	bhi.n	8005240 <HAL_TIM_ConfigClockSource+0x168>
 8005168:	2b20      	cmp	r3, #32
 800516a:	d060      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x156>
 800516c:	2b20      	cmp	r3, #32
 800516e:	d867      	bhi.n	8005240 <HAL_TIM_ConfigClockSource+0x168>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d05c      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x156>
 8005174:	2b10      	cmp	r3, #16
 8005176:	d05a      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005178:	e062      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6899      	ldr	r1, [r3, #8]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f000 fb21 	bl	80057d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800519c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	609a      	str	r2, [r3, #8]
      break;
 80051a6:	e04e      	b.n	8005246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	6899      	ldr	r1, [r3, #8]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f000 fb0a 	bl	80057d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ca:	609a      	str	r2, [r3, #8]
      break;
 80051cc:	e03b      	b.n	8005246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	6859      	ldr	r1, [r3, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	461a      	mov	r2, r3
 80051dc:	f000 fa7e 	bl	80056dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2150      	movs	r1, #80	; 0x50
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fad7 	bl	800579a <TIM_ITRx_SetConfig>
      break;
 80051ec:	e02b      	b.n	8005246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6859      	ldr	r1, [r3, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f000 fa9d 	bl	800573a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2160      	movs	r1, #96	; 0x60
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fac7 	bl	800579a <TIM_ITRx_SetConfig>
      break;
 800520c:	e01b      	b.n	8005246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	461a      	mov	r2, r3
 800521c:	f000 fa5e 	bl	80056dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2140      	movs	r1, #64	; 0x40
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fab7 	bl	800579a <TIM_ITRx_SetConfig>
      break;
 800522c:	e00b      	b.n	8005246 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f000 faae 	bl	800579a <TIM_ITRx_SetConfig>
        break;
 800523e:	e002      	b.n	8005246 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005240:	bf00      	nop
 8005242:	e000      	b.n	8005246 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005244:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a34      	ldr	r2, [pc, #208]	; (80053a8 <TIM_Base_SetConfig+0xe4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00f      	beq.n	80052fc <TIM_Base_SetConfig+0x38>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e2:	d00b      	beq.n	80052fc <TIM_Base_SetConfig+0x38>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a31      	ldr	r2, [pc, #196]	; (80053ac <TIM_Base_SetConfig+0xe8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_Base_SetConfig+0x38>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a30      	ldr	r2, [pc, #192]	; (80053b0 <TIM_Base_SetConfig+0xec>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_Base_SetConfig+0x38>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a2f      	ldr	r2, [pc, #188]	; (80053b4 <TIM_Base_SetConfig+0xf0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d108      	bne.n	800530e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a25      	ldr	r2, [pc, #148]	; (80053a8 <TIM_Base_SetConfig+0xe4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01b      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531c:	d017      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a22      	ldr	r2, [pc, #136]	; (80053ac <TIM_Base_SetConfig+0xe8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a21      	ldr	r2, [pc, #132]	; (80053b0 <TIM_Base_SetConfig+0xec>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00f      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a20      	ldr	r2, [pc, #128]	; (80053b4 <TIM_Base_SetConfig+0xf0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00b      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1f      	ldr	r2, [pc, #124]	; (80053b8 <TIM_Base_SetConfig+0xf4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d007      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1e      	ldr	r2, [pc, #120]	; (80053bc <TIM_Base_SetConfig+0xf8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a1d      	ldr	r2, [pc, #116]	; (80053c0 <TIM_Base_SetConfig+0xfc>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d108      	bne.n	8005360 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a08      	ldr	r2, [pc, #32]	; (80053a8 <TIM_Base_SetConfig+0xe4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d103      	bne.n	8005394 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	615a      	str	r2, [r3, #20]
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40000c00 	.word	0x40000c00
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800

080053c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f023 0201 	bic.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0303 	bic.w	r3, r3, #3
 80053fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f023 0302 	bic.w	r3, r3, #2
 800540c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a1c      	ldr	r2, [pc, #112]	; (800548c <TIM_OC1_SetConfig+0xc8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10c      	bne.n	800543a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 0308 	bic.w	r3, r3, #8
 8005426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f023 0304 	bic.w	r3, r3, #4
 8005438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a13      	ldr	r2, [pc, #76]	; (800548c <TIM_OC1_SetConfig+0xc8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d111      	bne.n	8005466 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	621a      	str	r2, [r3, #32]
}
 8005480:	bf00      	nop
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	40010000 	.word	0x40010000

08005490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0210 	bic.w	r2, r3, #16
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0320 	bic.w	r3, r3, #32
 80054da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <TIM_OC2_SetConfig+0xd4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d10d      	bne.n	800550c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800550a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a15      	ldr	r2, [pc, #84]	; (8005564 <TIM_OC2_SetConfig+0xd4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d113      	bne.n	800553c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800551a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40010000 	.word	0x40010000

08005568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1d      	ldr	r2, [pc, #116]	; (8005638 <TIM_OC3_SetConfig+0xd0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d10d      	bne.n	80055e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a14      	ldr	r2, [pc, #80]	; (8005638 <TIM_OC3_SetConfig+0xd0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d113      	bne.n	8005612 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	621a      	str	r2, [r3, #32]
}
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	40010000 	.word	0x40010000

0800563c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	031b      	lsls	r3, r3, #12
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <TIM_OC4_SetConfig+0x9c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d109      	bne.n	80056b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	019b      	lsls	r3, r3, #6
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	621a      	str	r2, [r3, #32]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40010000 	.word	0x40010000

080056dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f023 0201 	bic.w	r2, r3, #1
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f023 030a 	bic.w	r3, r3, #10
 8005718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	621a      	str	r2, [r3, #32]
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800573a:	b480      	push	{r7}
 800573c:	b087      	sub	sp, #28
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f023 0210 	bic.w	r2, r3, #16
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	031b      	lsls	r3, r3, #12
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005776:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f043 0307 	orr.w	r3, r3, #7
 80057bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	609a      	str	r2, [r3, #8]
}
 80057c4:	bf00      	nop
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	021a      	lsls	r2, r3, #8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	609a      	str	r2, [r3, #8]
}
 8005804:	bf00      	nop
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 031f 	and.w	r3, r3, #31
 8005822:	2201      	movs	r2, #1
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1a      	ldr	r2, [r3, #32]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	43db      	mvns	r3, r3
 8005832:	401a      	ands	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1a      	ldr	r2, [r3, #32]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	431a      	orrs	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005870:	2302      	movs	r3, #2
 8005872:	e050      	b.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1c      	ldr	r2, [pc, #112]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c0:	d013      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a18      	ldr	r2, [pc, #96]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a16      	ldr	r2, [pc, #88]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a15      	ldr	r2, [pc, #84]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a13      	ldr	r2, [pc, #76]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d10c      	bne.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40014000 	.word	0x40014000

08005938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e03f      	b.n	80059f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fb ff16 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2224      	movs	r2, #36	; 0x24
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f829 	bl	80059fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695a      	ldr	r2, [r3, #20]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a00:	b09f      	sub	sp, #124	; 0x7c
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a12:	68d9      	ldr	r1, [r3, #12]
 8005a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	ea40 0301 	orr.w	r3, r0, r1
 8005a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a40:	f021 010c 	bic.w	r1, r1, #12
 8005a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5a:	6999      	ldr	r1, [r3, #24]
 8005a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	ea40 0301 	orr.w	r3, r0, r1
 8005a64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4bc5      	ldr	r3, [pc, #788]	; (8005d80 <UART_SetConfig+0x384>)
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d004      	beq.n	8005a7a <UART_SetConfig+0x7e>
 8005a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	4bc3      	ldr	r3, [pc, #780]	; (8005d84 <UART_SetConfig+0x388>)
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d103      	bne.n	8005a82 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a7a:	f7fe fe63 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8005a7e:	6778      	str	r0, [r7, #116]	; 0x74
 8005a80:	e002      	b.n	8005a88 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a82:	f7fe fe4b 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 8005a86:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a90:	f040 80b6 	bne.w	8005c00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a96:	461c      	mov	r4, r3
 8005a98:	f04f 0500 	mov.w	r5, #0
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	462b      	mov	r3, r5
 8005aa0:	1891      	adds	r1, r2, r2
 8005aa2:	6439      	str	r1, [r7, #64]	; 0x40
 8005aa4:	415b      	adcs	r3, r3
 8005aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005aac:	1912      	adds	r2, r2, r4
 8005aae:	eb45 0303 	adc.w	r3, r5, r3
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f04f 0100 	mov.w	r1, #0
 8005aba:	00d9      	lsls	r1, r3, #3
 8005abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ac0:	00d0      	lsls	r0, r2, #3
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	1911      	adds	r1, r2, r4
 8005ac8:	6639      	str	r1, [r7, #96]	; 0x60
 8005aca:	416b      	adcs	r3, r5
 8005acc:	667b      	str	r3, [r7, #100]	; 0x64
 8005ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	1891      	adds	r1, r2, r2
 8005ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8005adc:	415b      	adcs	r3, r3
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ae4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ae8:	f7fa fbca 	bl	8000280 <__aeabi_uldivmod>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4ba5      	ldr	r3, [pc, #660]	; (8005d88 <UART_SetConfig+0x38c>)
 8005af2:	fba3 2302 	umull	r2, r3, r3, r2
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	011e      	lsls	r6, r3, #4
 8005afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005afc:	461c      	mov	r4, r3
 8005afe:	f04f 0500 	mov.w	r5, #0
 8005b02:	4622      	mov	r2, r4
 8005b04:	462b      	mov	r3, r5
 8005b06:	1891      	adds	r1, r2, r2
 8005b08:	6339      	str	r1, [r7, #48]	; 0x30
 8005b0a:	415b      	adcs	r3, r3
 8005b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b12:	1912      	adds	r2, r2, r4
 8005b14:	eb45 0303 	adc.w	r3, r5, r3
 8005b18:	f04f 0000 	mov.w	r0, #0
 8005b1c:	f04f 0100 	mov.w	r1, #0
 8005b20:	00d9      	lsls	r1, r3, #3
 8005b22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b26:	00d0      	lsls	r0, r2, #3
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	1911      	adds	r1, r2, r4
 8005b2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b30:	416b      	adcs	r3, r5
 8005b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	1891      	adds	r1, r2, r2
 8005b40:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b42:	415b      	adcs	r3, r3
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b4e:	f7fa fb97 	bl	8000280 <__aeabi_uldivmod>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	4b8c      	ldr	r3, [pc, #560]	; (8005d88 <UART_SetConfig+0x38c>)
 8005b58:	fba3 1302 	umull	r1, r3, r3, r2
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	2164      	movs	r1, #100	; 0x64
 8005b60:	fb01 f303 	mul.w	r3, r1, r3
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	3332      	adds	r3, #50	; 0x32
 8005b6a:	4a87      	ldr	r2, [pc, #540]	; (8005d88 <UART_SetConfig+0x38c>)
 8005b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b78:	441e      	add	r6, r3
 8005b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f04f 0100 	mov.w	r1, #0
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	1894      	adds	r4, r2, r2
 8005b88:	623c      	str	r4, [r7, #32]
 8005b8a:	415b      	adcs	r3, r3
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b92:	1812      	adds	r2, r2, r0
 8005b94:	eb41 0303 	adc.w	r3, r1, r3
 8005b98:	f04f 0400 	mov.w	r4, #0
 8005b9c:	f04f 0500 	mov.w	r5, #0
 8005ba0:	00dd      	lsls	r5, r3, #3
 8005ba2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ba6:	00d4      	lsls	r4, r2, #3
 8005ba8:	4622      	mov	r2, r4
 8005baa:	462b      	mov	r3, r5
 8005bac:	1814      	adds	r4, r2, r0
 8005bae:	653c      	str	r4, [r7, #80]	; 0x50
 8005bb0:	414b      	adcs	r3, r1
 8005bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f04f 0300 	mov.w	r3, #0
 8005bbe:	1891      	adds	r1, r2, r2
 8005bc0:	61b9      	str	r1, [r7, #24]
 8005bc2:	415b      	adcs	r3, r3
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005bce:	f7fa fb57 	bl	8000280 <__aeabi_uldivmod>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4b6c      	ldr	r3, [pc, #432]	; (8005d88 <UART_SetConfig+0x38c>)
 8005bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	2164      	movs	r1, #100	; 0x64
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	3332      	adds	r3, #50	; 0x32
 8005bea:	4a67      	ldr	r2, [pc, #412]	; (8005d88 <UART_SetConfig+0x38c>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	f003 0207 	and.w	r2, r3, #7
 8005bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4432      	add	r2, r6
 8005bfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bfe:	e0b9      	b.n	8005d74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c02:	461c      	mov	r4, r3
 8005c04:	f04f 0500 	mov.w	r5, #0
 8005c08:	4622      	mov	r2, r4
 8005c0a:	462b      	mov	r3, r5
 8005c0c:	1891      	adds	r1, r2, r2
 8005c0e:	6139      	str	r1, [r7, #16]
 8005c10:	415b      	adcs	r3, r3
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c18:	1912      	adds	r2, r2, r4
 8005c1a:	eb45 0303 	adc.w	r3, r5, r3
 8005c1e:	f04f 0000 	mov.w	r0, #0
 8005c22:	f04f 0100 	mov.w	r1, #0
 8005c26:	00d9      	lsls	r1, r3, #3
 8005c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c2c:	00d0      	lsls	r0, r2, #3
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	eb12 0804 	adds.w	r8, r2, r4
 8005c36:	eb43 0905 	adc.w	r9, r3, r5
 8005c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f04f 0100 	mov.w	r1, #0
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	008b      	lsls	r3, r1, #2
 8005c4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c52:	0082      	lsls	r2, r0, #2
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f7fa fb12 	bl	8000280 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4b49      	ldr	r3, [pc, #292]	; (8005d88 <UART_SetConfig+0x38c>)
 8005c62:	fba3 2302 	umull	r2, r3, r3, r2
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	011e      	lsls	r6, r3, #4
 8005c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f04f 0100 	mov.w	r1, #0
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	1894      	adds	r4, r2, r2
 8005c78:	60bc      	str	r4, [r7, #8]
 8005c7a:	415b      	adcs	r3, r3
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c82:	1812      	adds	r2, r2, r0
 8005c84:	eb41 0303 	adc.w	r3, r1, r3
 8005c88:	f04f 0400 	mov.w	r4, #0
 8005c8c:	f04f 0500 	mov.w	r5, #0
 8005c90:	00dd      	lsls	r5, r3, #3
 8005c92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c96:	00d4      	lsls	r4, r2, #3
 8005c98:	4622      	mov	r2, r4
 8005c9a:	462b      	mov	r3, r5
 8005c9c:	1814      	adds	r4, r2, r0
 8005c9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005ca0:	414b      	adcs	r3, r1
 8005ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f04f 0100 	mov.w	r1, #0
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	f04f 0300 	mov.w	r3, #0
 8005cb6:	008b      	lsls	r3, r1, #2
 8005cb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cbc:	0082      	lsls	r2, r0, #2
 8005cbe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005cc2:	f7fa fadd 	bl	8000280 <__aeabi_uldivmod>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <UART_SetConfig+0x38c>)
 8005ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	2164      	movs	r1, #100	; 0x64
 8005cd4:	fb01 f303 	mul.w	r3, r1, r3
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	3332      	adds	r3, #50	; 0x32
 8005cde:	4a2a      	ldr	r2, [pc, #168]	; (8005d88 <UART_SetConfig+0x38c>)
 8005ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce4:	095b      	lsrs	r3, r3, #5
 8005ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cea:	441e      	add	r6, r3
 8005cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f04f 0100 	mov.w	r1, #0
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	1894      	adds	r4, r2, r2
 8005cfa:	603c      	str	r4, [r7, #0]
 8005cfc:	415b      	adcs	r3, r3
 8005cfe:	607b      	str	r3, [r7, #4]
 8005d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d04:	1812      	adds	r2, r2, r0
 8005d06:	eb41 0303 	adc.w	r3, r1, r3
 8005d0a:	f04f 0400 	mov.w	r4, #0
 8005d0e:	f04f 0500 	mov.w	r5, #0
 8005d12:	00dd      	lsls	r5, r3, #3
 8005d14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d18:	00d4      	lsls	r4, r2, #3
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	eb12 0a00 	adds.w	sl, r2, r0
 8005d22:	eb43 0b01 	adc.w	fp, r3, r1
 8005d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f04f 0100 	mov.w	r1, #0
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	008b      	lsls	r3, r1, #2
 8005d3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d3e:	0082      	lsls	r2, r0, #2
 8005d40:	4650      	mov	r0, sl
 8005d42:	4659      	mov	r1, fp
 8005d44:	f7fa fa9c 	bl	8000280 <__aeabi_uldivmod>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <UART_SetConfig+0x38c>)
 8005d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	2164      	movs	r1, #100	; 0x64
 8005d56:	fb01 f303 	mul.w	r3, r1, r3
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	3332      	adds	r3, #50	; 0x32
 8005d60:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <UART_SetConfig+0x38c>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	f003 020f 	and.w	r2, r3, #15
 8005d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4432      	add	r2, r6
 8005d72:	609a      	str	r2, [r3, #8]
}
 8005d74:	bf00      	nop
 8005d76:	377c      	adds	r7, #124	; 0x7c
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7e:	bf00      	nop
 8005d80:	40011000 	.word	0x40011000
 8005d84:	40011400 	.word	0x40011400
 8005d88:	51eb851f 	.word	0x51eb851f

08005d8c <__errno>:
 8005d8c:	4b01      	ldr	r3, [pc, #4]	; (8005d94 <__errno+0x8>)
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20000024 	.word	0x20000024

08005d98 <__libc_init_array>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	4d0d      	ldr	r5, [pc, #52]	; (8005dd0 <__libc_init_array+0x38>)
 8005d9c:	4c0d      	ldr	r4, [pc, #52]	; (8005dd4 <__libc_init_array+0x3c>)
 8005d9e:	1b64      	subs	r4, r4, r5
 8005da0:	10a4      	asrs	r4, r4, #2
 8005da2:	2600      	movs	r6, #0
 8005da4:	42a6      	cmp	r6, r4
 8005da6:	d109      	bne.n	8005dbc <__libc_init_array+0x24>
 8005da8:	4d0b      	ldr	r5, [pc, #44]	; (8005dd8 <__libc_init_array+0x40>)
 8005daa:	4c0c      	ldr	r4, [pc, #48]	; (8005ddc <__libc_init_array+0x44>)
 8005dac:	f000 fc4e 	bl	800664c <_init>
 8005db0:	1b64      	subs	r4, r4, r5
 8005db2:	10a4      	asrs	r4, r4, #2
 8005db4:	2600      	movs	r6, #0
 8005db6:	42a6      	cmp	r6, r4
 8005db8:	d105      	bne.n	8005dc6 <__libc_init_array+0x2e>
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc0:	4798      	blx	r3
 8005dc2:	3601      	adds	r6, #1
 8005dc4:	e7ee      	b.n	8005da4 <__libc_init_array+0xc>
 8005dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dca:	4798      	blx	r3
 8005dcc:	3601      	adds	r6, #1
 8005dce:	e7f2      	b.n	8005db6 <__libc_init_array+0x1e>
 8005dd0:	080066ec 	.word	0x080066ec
 8005dd4:	080066ec 	.word	0x080066ec
 8005dd8:	080066ec 	.word	0x080066ec
 8005ddc:	080066f0 	.word	0x080066f0

08005de0 <memset>:
 8005de0:	4402      	add	r2, r0
 8005de2:	4603      	mov	r3, r0
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d100      	bne.n	8005dea <memset+0xa>
 8005de8:	4770      	bx	lr
 8005dea:	f803 1b01 	strb.w	r1, [r3], #1
 8005dee:	e7f9      	b.n	8005de4 <memset+0x4>

08005df0 <siprintf>:
 8005df0:	b40e      	push	{r1, r2, r3}
 8005df2:	b500      	push	{lr}
 8005df4:	b09c      	sub	sp, #112	; 0x70
 8005df6:	ab1d      	add	r3, sp, #116	; 0x74
 8005df8:	9002      	str	r0, [sp, #8]
 8005dfa:	9006      	str	r0, [sp, #24]
 8005dfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e00:	4809      	ldr	r0, [pc, #36]	; (8005e28 <siprintf+0x38>)
 8005e02:	9107      	str	r1, [sp, #28]
 8005e04:	9104      	str	r1, [sp, #16]
 8005e06:	4909      	ldr	r1, [pc, #36]	; (8005e2c <siprintf+0x3c>)
 8005e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e0c:	9105      	str	r1, [sp, #20]
 8005e0e:	6800      	ldr	r0, [r0, #0]
 8005e10:	9301      	str	r3, [sp, #4]
 8005e12:	a902      	add	r1, sp, #8
 8005e14:	f000 f868 	bl	8005ee8 <_svfiprintf_r>
 8005e18:	9b02      	ldr	r3, [sp, #8]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	b01c      	add	sp, #112	; 0x70
 8005e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e24:	b003      	add	sp, #12
 8005e26:	4770      	bx	lr
 8005e28:	20000024 	.word	0x20000024
 8005e2c:	ffff0208 	.word	0xffff0208

08005e30 <__ssputs_r>:
 8005e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e34:	688e      	ldr	r6, [r1, #8]
 8005e36:	429e      	cmp	r6, r3
 8005e38:	4682      	mov	sl, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	4690      	mov	r8, r2
 8005e3e:	461f      	mov	r7, r3
 8005e40:	d838      	bhi.n	8005eb4 <__ssputs_r+0x84>
 8005e42:	898a      	ldrh	r2, [r1, #12]
 8005e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e48:	d032      	beq.n	8005eb0 <__ssputs_r+0x80>
 8005e4a:	6825      	ldr	r5, [r4, #0]
 8005e4c:	6909      	ldr	r1, [r1, #16]
 8005e4e:	eba5 0901 	sub.w	r9, r5, r1
 8005e52:	6965      	ldr	r5, [r4, #20]
 8005e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	444b      	add	r3, r9
 8005e60:	106d      	asrs	r5, r5, #1
 8005e62:	429d      	cmp	r5, r3
 8005e64:	bf38      	it	cc
 8005e66:	461d      	movcc	r5, r3
 8005e68:	0553      	lsls	r3, r2, #21
 8005e6a:	d531      	bpl.n	8005ed0 <__ssputs_r+0xa0>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	f000 fb47 	bl	8006500 <_malloc_r>
 8005e72:	4606      	mov	r6, r0
 8005e74:	b950      	cbnz	r0, 8005e8c <__ssputs_r+0x5c>
 8005e76:	230c      	movs	r3, #12
 8005e78:	f8ca 3000 	str.w	r3, [sl]
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	6921      	ldr	r1, [r4, #16]
 8005e8e:	464a      	mov	r2, r9
 8005e90:	f000 fabe 	bl	8006410 <memcpy>
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9e:	81a3      	strh	r3, [r4, #12]
 8005ea0:	6126      	str	r6, [r4, #16]
 8005ea2:	6165      	str	r5, [r4, #20]
 8005ea4:	444e      	add	r6, r9
 8005ea6:	eba5 0509 	sub.w	r5, r5, r9
 8005eaa:	6026      	str	r6, [r4, #0]
 8005eac:	60a5      	str	r5, [r4, #8]
 8005eae:	463e      	mov	r6, r7
 8005eb0:	42be      	cmp	r6, r7
 8005eb2:	d900      	bls.n	8005eb6 <__ssputs_r+0x86>
 8005eb4:	463e      	mov	r6, r7
 8005eb6:	4632      	mov	r2, r6
 8005eb8:	6820      	ldr	r0, [r4, #0]
 8005eba:	4641      	mov	r1, r8
 8005ebc:	f000 fab6 	bl	800642c <memmove>
 8005ec0:	68a3      	ldr	r3, [r4, #8]
 8005ec2:	6822      	ldr	r2, [r4, #0]
 8005ec4:	1b9b      	subs	r3, r3, r6
 8005ec6:	4432      	add	r2, r6
 8005ec8:	60a3      	str	r3, [r4, #8]
 8005eca:	6022      	str	r2, [r4, #0]
 8005ecc:	2000      	movs	r0, #0
 8005ece:	e7db      	b.n	8005e88 <__ssputs_r+0x58>
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	f000 fb6f 	bl	80065b4 <_realloc_r>
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d1e1      	bne.n	8005ea0 <__ssputs_r+0x70>
 8005edc:	6921      	ldr	r1, [r4, #16]
 8005ede:	4650      	mov	r0, sl
 8005ee0:	f000 fabe 	bl	8006460 <_free_r>
 8005ee4:	e7c7      	b.n	8005e76 <__ssputs_r+0x46>
	...

08005ee8 <_svfiprintf_r>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	4698      	mov	r8, r3
 8005eee:	898b      	ldrh	r3, [r1, #12]
 8005ef0:	061b      	lsls	r3, r3, #24
 8005ef2:	b09d      	sub	sp, #116	; 0x74
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	460d      	mov	r5, r1
 8005ef8:	4614      	mov	r4, r2
 8005efa:	d50e      	bpl.n	8005f1a <_svfiprintf_r+0x32>
 8005efc:	690b      	ldr	r3, [r1, #16]
 8005efe:	b963      	cbnz	r3, 8005f1a <_svfiprintf_r+0x32>
 8005f00:	2140      	movs	r1, #64	; 0x40
 8005f02:	f000 fafd 	bl	8006500 <_malloc_r>
 8005f06:	6028      	str	r0, [r5, #0]
 8005f08:	6128      	str	r0, [r5, #16]
 8005f0a:	b920      	cbnz	r0, 8005f16 <_svfiprintf_r+0x2e>
 8005f0c:	230c      	movs	r3, #12
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	e0d1      	b.n	80060ba <_svfiprintf_r+0x1d2>
 8005f16:	2340      	movs	r3, #64	; 0x40
 8005f18:	616b      	str	r3, [r5, #20]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1e:	2320      	movs	r3, #32
 8005f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f28:	2330      	movs	r3, #48	; 0x30
 8005f2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80060d4 <_svfiprintf_r+0x1ec>
 8005f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f32:	f04f 0901 	mov.w	r9, #1
 8005f36:	4623      	mov	r3, r4
 8005f38:	469a      	mov	sl, r3
 8005f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f3e:	b10a      	cbz	r2, 8005f44 <_svfiprintf_r+0x5c>
 8005f40:	2a25      	cmp	r2, #37	; 0x25
 8005f42:	d1f9      	bne.n	8005f38 <_svfiprintf_r+0x50>
 8005f44:	ebba 0b04 	subs.w	fp, sl, r4
 8005f48:	d00b      	beq.n	8005f62 <_svfiprintf_r+0x7a>
 8005f4a:	465b      	mov	r3, fp
 8005f4c:	4622      	mov	r2, r4
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7ff ff6d 	bl	8005e30 <__ssputs_r>
 8005f56:	3001      	adds	r0, #1
 8005f58:	f000 80aa 	beq.w	80060b0 <_svfiprintf_r+0x1c8>
 8005f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f5e:	445a      	add	r2, fp
 8005f60:	9209      	str	r2, [sp, #36]	; 0x24
 8005f62:	f89a 3000 	ldrb.w	r3, [sl]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 80a2 	beq.w	80060b0 <_svfiprintf_r+0x1c8>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f76:	f10a 0a01 	add.w	sl, sl, #1
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	9307      	str	r3, [sp, #28]
 8005f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f82:	931a      	str	r3, [sp, #104]	; 0x68
 8005f84:	4654      	mov	r4, sl
 8005f86:	2205      	movs	r2, #5
 8005f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f8c:	4851      	ldr	r0, [pc, #324]	; (80060d4 <_svfiprintf_r+0x1ec>)
 8005f8e:	f7fa f927 	bl	80001e0 <memchr>
 8005f92:	9a04      	ldr	r2, [sp, #16]
 8005f94:	b9d8      	cbnz	r0, 8005fce <_svfiprintf_r+0xe6>
 8005f96:	06d0      	lsls	r0, r2, #27
 8005f98:	bf44      	itt	mi
 8005f9a:	2320      	movmi	r3, #32
 8005f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa0:	0711      	lsls	r1, r2, #28
 8005fa2:	bf44      	itt	mi
 8005fa4:	232b      	movmi	r3, #43	; 0x2b
 8005fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005faa:	f89a 3000 	ldrb.w	r3, [sl]
 8005fae:	2b2a      	cmp	r3, #42	; 0x2a
 8005fb0:	d015      	beq.n	8005fde <_svfiprintf_r+0xf6>
 8005fb2:	9a07      	ldr	r2, [sp, #28]
 8005fb4:	4654      	mov	r4, sl
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f04f 0c0a 	mov.w	ip, #10
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fc2:	3b30      	subs	r3, #48	; 0x30
 8005fc4:	2b09      	cmp	r3, #9
 8005fc6:	d94e      	bls.n	8006066 <_svfiprintf_r+0x17e>
 8005fc8:	b1b0      	cbz	r0, 8005ff8 <_svfiprintf_r+0x110>
 8005fca:	9207      	str	r2, [sp, #28]
 8005fcc:	e014      	b.n	8005ff8 <_svfiprintf_r+0x110>
 8005fce:	eba0 0308 	sub.w	r3, r0, r8
 8005fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	9304      	str	r3, [sp, #16]
 8005fda:	46a2      	mov	sl, r4
 8005fdc:	e7d2      	b.n	8005f84 <_svfiprintf_r+0x9c>
 8005fde:	9b03      	ldr	r3, [sp, #12]
 8005fe0:	1d19      	adds	r1, r3, #4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	9103      	str	r1, [sp, #12]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bfbb      	ittet	lt
 8005fea:	425b      	neglt	r3, r3
 8005fec:	f042 0202 	orrlt.w	r2, r2, #2
 8005ff0:	9307      	strge	r3, [sp, #28]
 8005ff2:	9307      	strlt	r3, [sp, #28]
 8005ff4:	bfb8      	it	lt
 8005ff6:	9204      	strlt	r2, [sp, #16]
 8005ff8:	7823      	ldrb	r3, [r4, #0]
 8005ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8005ffc:	d10c      	bne.n	8006018 <_svfiprintf_r+0x130>
 8005ffe:	7863      	ldrb	r3, [r4, #1]
 8006000:	2b2a      	cmp	r3, #42	; 0x2a
 8006002:	d135      	bne.n	8006070 <_svfiprintf_r+0x188>
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	1d1a      	adds	r2, r3, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	9203      	str	r2, [sp, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	bfb8      	it	lt
 8006010:	f04f 33ff 	movlt.w	r3, #4294967295
 8006014:	3402      	adds	r4, #2
 8006016:	9305      	str	r3, [sp, #20]
 8006018:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060e4 <_svfiprintf_r+0x1fc>
 800601c:	7821      	ldrb	r1, [r4, #0]
 800601e:	2203      	movs	r2, #3
 8006020:	4650      	mov	r0, sl
 8006022:	f7fa f8dd 	bl	80001e0 <memchr>
 8006026:	b140      	cbz	r0, 800603a <_svfiprintf_r+0x152>
 8006028:	2340      	movs	r3, #64	; 0x40
 800602a:	eba0 000a 	sub.w	r0, r0, sl
 800602e:	fa03 f000 	lsl.w	r0, r3, r0
 8006032:	9b04      	ldr	r3, [sp, #16]
 8006034:	4303      	orrs	r3, r0
 8006036:	3401      	adds	r4, #1
 8006038:	9304      	str	r3, [sp, #16]
 800603a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603e:	4826      	ldr	r0, [pc, #152]	; (80060d8 <_svfiprintf_r+0x1f0>)
 8006040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006044:	2206      	movs	r2, #6
 8006046:	f7fa f8cb 	bl	80001e0 <memchr>
 800604a:	2800      	cmp	r0, #0
 800604c:	d038      	beq.n	80060c0 <_svfiprintf_r+0x1d8>
 800604e:	4b23      	ldr	r3, [pc, #140]	; (80060dc <_svfiprintf_r+0x1f4>)
 8006050:	bb1b      	cbnz	r3, 800609a <_svfiprintf_r+0x1b2>
 8006052:	9b03      	ldr	r3, [sp, #12]
 8006054:	3307      	adds	r3, #7
 8006056:	f023 0307 	bic.w	r3, r3, #7
 800605a:	3308      	adds	r3, #8
 800605c:	9303      	str	r3, [sp, #12]
 800605e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006060:	4433      	add	r3, r6
 8006062:	9309      	str	r3, [sp, #36]	; 0x24
 8006064:	e767      	b.n	8005f36 <_svfiprintf_r+0x4e>
 8006066:	fb0c 3202 	mla	r2, ip, r2, r3
 800606a:	460c      	mov	r4, r1
 800606c:	2001      	movs	r0, #1
 800606e:	e7a5      	b.n	8005fbc <_svfiprintf_r+0xd4>
 8006070:	2300      	movs	r3, #0
 8006072:	3401      	adds	r4, #1
 8006074:	9305      	str	r3, [sp, #20]
 8006076:	4619      	mov	r1, r3
 8006078:	f04f 0c0a 	mov.w	ip, #10
 800607c:	4620      	mov	r0, r4
 800607e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006082:	3a30      	subs	r2, #48	; 0x30
 8006084:	2a09      	cmp	r2, #9
 8006086:	d903      	bls.n	8006090 <_svfiprintf_r+0x1a8>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0c5      	beq.n	8006018 <_svfiprintf_r+0x130>
 800608c:	9105      	str	r1, [sp, #20]
 800608e:	e7c3      	b.n	8006018 <_svfiprintf_r+0x130>
 8006090:	fb0c 2101 	mla	r1, ip, r1, r2
 8006094:	4604      	mov	r4, r0
 8006096:	2301      	movs	r3, #1
 8006098:	e7f0      	b.n	800607c <_svfiprintf_r+0x194>
 800609a:	ab03      	add	r3, sp, #12
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	462a      	mov	r2, r5
 80060a0:	4b0f      	ldr	r3, [pc, #60]	; (80060e0 <_svfiprintf_r+0x1f8>)
 80060a2:	a904      	add	r1, sp, #16
 80060a4:	4638      	mov	r0, r7
 80060a6:	f3af 8000 	nop.w
 80060aa:	1c42      	adds	r2, r0, #1
 80060ac:	4606      	mov	r6, r0
 80060ae:	d1d6      	bne.n	800605e <_svfiprintf_r+0x176>
 80060b0:	89ab      	ldrh	r3, [r5, #12]
 80060b2:	065b      	lsls	r3, r3, #25
 80060b4:	f53f af2c 	bmi.w	8005f10 <_svfiprintf_r+0x28>
 80060b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ba:	b01d      	add	sp, #116	; 0x74
 80060bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c0:	ab03      	add	r3, sp, #12
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	462a      	mov	r2, r5
 80060c6:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <_svfiprintf_r+0x1f8>)
 80060c8:	a904      	add	r1, sp, #16
 80060ca:	4638      	mov	r0, r7
 80060cc:	f000 f87a 	bl	80061c4 <_printf_i>
 80060d0:	e7eb      	b.n	80060aa <_svfiprintf_r+0x1c2>
 80060d2:	bf00      	nop
 80060d4:	080066b0 	.word	0x080066b0
 80060d8:	080066ba 	.word	0x080066ba
 80060dc:	00000000 	.word	0x00000000
 80060e0:	08005e31 	.word	0x08005e31
 80060e4:	080066b6 	.word	0x080066b6

080060e8 <_printf_common>:
 80060e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ec:	4616      	mov	r6, r2
 80060ee:	4699      	mov	r9, r3
 80060f0:	688a      	ldr	r2, [r1, #8]
 80060f2:	690b      	ldr	r3, [r1, #16]
 80060f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060f8:	4293      	cmp	r3, r2
 80060fa:	bfb8      	it	lt
 80060fc:	4613      	movlt	r3, r2
 80060fe:	6033      	str	r3, [r6, #0]
 8006100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006104:	4607      	mov	r7, r0
 8006106:	460c      	mov	r4, r1
 8006108:	b10a      	cbz	r2, 800610e <_printf_common+0x26>
 800610a:	3301      	adds	r3, #1
 800610c:	6033      	str	r3, [r6, #0]
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	0699      	lsls	r1, r3, #26
 8006112:	bf42      	ittt	mi
 8006114:	6833      	ldrmi	r3, [r6, #0]
 8006116:	3302      	addmi	r3, #2
 8006118:	6033      	strmi	r3, [r6, #0]
 800611a:	6825      	ldr	r5, [r4, #0]
 800611c:	f015 0506 	ands.w	r5, r5, #6
 8006120:	d106      	bne.n	8006130 <_printf_common+0x48>
 8006122:	f104 0a19 	add.w	sl, r4, #25
 8006126:	68e3      	ldr	r3, [r4, #12]
 8006128:	6832      	ldr	r2, [r6, #0]
 800612a:	1a9b      	subs	r3, r3, r2
 800612c:	42ab      	cmp	r3, r5
 800612e:	dc26      	bgt.n	800617e <_printf_common+0x96>
 8006130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006134:	1e13      	subs	r3, r2, #0
 8006136:	6822      	ldr	r2, [r4, #0]
 8006138:	bf18      	it	ne
 800613a:	2301      	movne	r3, #1
 800613c:	0692      	lsls	r2, r2, #26
 800613e:	d42b      	bmi.n	8006198 <_printf_common+0xb0>
 8006140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006144:	4649      	mov	r1, r9
 8006146:	4638      	mov	r0, r7
 8006148:	47c0      	blx	r8
 800614a:	3001      	adds	r0, #1
 800614c:	d01e      	beq.n	800618c <_printf_common+0xa4>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	68e5      	ldr	r5, [r4, #12]
 8006152:	6832      	ldr	r2, [r6, #0]
 8006154:	f003 0306 	and.w	r3, r3, #6
 8006158:	2b04      	cmp	r3, #4
 800615a:	bf08      	it	eq
 800615c:	1aad      	subeq	r5, r5, r2
 800615e:	68a3      	ldr	r3, [r4, #8]
 8006160:	6922      	ldr	r2, [r4, #16]
 8006162:	bf0c      	ite	eq
 8006164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006168:	2500      	movne	r5, #0
 800616a:	4293      	cmp	r3, r2
 800616c:	bfc4      	itt	gt
 800616e:	1a9b      	subgt	r3, r3, r2
 8006170:	18ed      	addgt	r5, r5, r3
 8006172:	2600      	movs	r6, #0
 8006174:	341a      	adds	r4, #26
 8006176:	42b5      	cmp	r5, r6
 8006178:	d11a      	bne.n	80061b0 <_printf_common+0xc8>
 800617a:	2000      	movs	r0, #0
 800617c:	e008      	b.n	8006190 <_printf_common+0xa8>
 800617e:	2301      	movs	r3, #1
 8006180:	4652      	mov	r2, sl
 8006182:	4649      	mov	r1, r9
 8006184:	4638      	mov	r0, r7
 8006186:	47c0      	blx	r8
 8006188:	3001      	adds	r0, #1
 800618a:	d103      	bne.n	8006194 <_printf_common+0xac>
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006194:	3501      	adds	r5, #1
 8006196:	e7c6      	b.n	8006126 <_printf_common+0x3e>
 8006198:	18e1      	adds	r1, r4, r3
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	2030      	movs	r0, #48	; 0x30
 800619e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061a2:	4422      	add	r2, r4
 80061a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061ac:	3302      	adds	r3, #2
 80061ae:	e7c7      	b.n	8006140 <_printf_common+0x58>
 80061b0:	2301      	movs	r3, #1
 80061b2:	4622      	mov	r2, r4
 80061b4:	4649      	mov	r1, r9
 80061b6:	4638      	mov	r0, r7
 80061b8:	47c0      	blx	r8
 80061ba:	3001      	adds	r0, #1
 80061bc:	d0e6      	beq.n	800618c <_printf_common+0xa4>
 80061be:	3601      	adds	r6, #1
 80061c0:	e7d9      	b.n	8006176 <_printf_common+0x8e>
	...

080061c4 <_printf_i>:
 80061c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	460c      	mov	r4, r1
 80061ca:	4691      	mov	r9, r2
 80061cc:	7e27      	ldrb	r7, [r4, #24]
 80061ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061d0:	2f78      	cmp	r7, #120	; 0x78
 80061d2:	4680      	mov	r8, r0
 80061d4:	469a      	mov	sl, r3
 80061d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061da:	d807      	bhi.n	80061ec <_printf_i+0x28>
 80061dc:	2f62      	cmp	r7, #98	; 0x62
 80061de:	d80a      	bhi.n	80061f6 <_printf_i+0x32>
 80061e0:	2f00      	cmp	r7, #0
 80061e2:	f000 80d8 	beq.w	8006396 <_printf_i+0x1d2>
 80061e6:	2f58      	cmp	r7, #88	; 0x58
 80061e8:	f000 80a3 	beq.w	8006332 <_printf_i+0x16e>
 80061ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061f4:	e03a      	b.n	800626c <_printf_i+0xa8>
 80061f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061fa:	2b15      	cmp	r3, #21
 80061fc:	d8f6      	bhi.n	80061ec <_printf_i+0x28>
 80061fe:	a001      	add	r0, pc, #4	; (adr r0, 8006204 <_printf_i+0x40>)
 8006200:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006204:	0800625d 	.word	0x0800625d
 8006208:	08006271 	.word	0x08006271
 800620c:	080061ed 	.word	0x080061ed
 8006210:	080061ed 	.word	0x080061ed
 8006214:	080061ed 	.word	0x080061ed
 8006218:	080061ed 	.word	0x080061ed
 800621c:	08006271 	.word	0x08006271
 8006220:	080061ed 	.word	0x080061ed
 8006224:	080061ed 	.word	0x080061ed
 8006228:	080061ed 	.word	0x080061ed
 800622c:	080061ed 	.word	0x080061ed
 8006230:	0800637d 	.word	0x0800637d
 8006234:	080062a1 	.word	0x080062a1
 8006238:	0800635f 	.word	0x0800635f
 800623c:	080061ed 	.word	0x080061ed
 8006240:	080061ed 	.word	0x080061ed
 8006244:	0800639f 	.word	0x0800639f
 8006248:	080061ed 	.word	0x080061ed
 800624c:	080062a1 	.word	0x080062a1
 8006250:	080061ed 	.word	0x080061ed
 8006254:	080061ed 	.word	0x080061ed
 8006258:	08006367 	.word	0x08006367
 800625c:	680b      	ldr	r3, [r1, #0]
 800625e:	1d1a      	adds	r2, r3, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	600a      	str	r2, [r1, #0]
 8006264:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800626c:	2301      	movs	r3, #1
 800626e:	e0a3      	b.n	80063b8 <_printf_i+0x1f4>
 8006270:	6825      	ldr	r5, [r4, #0]
 8006272:	6808      	ldr	r0, [r1, #0]
 8006274:	062e      	lsls	r6, r5, #24
 8006276:	f100 0304 	add.w	r3, r0, #4
 800627a:	d50a      	bpl.n	8006292 <_printf_i+0xce>
 800627c:	6805      	ldr	r5, [r0, #0]
 800627e:	600b      	str	r3, [r1, #0]
 8006280:	2d00      	cmp	r5, #0
 8006282:	da03      	bge.n	800628c <_printf_i+0xc8>
 8006284:	232d      	movs	r3, #45	; 0x2d
 8006286:	426d      	negs	r5, r5
 8006288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800628c:	485e      	ldr	r0, [pc, #376]	; (8006408 <_printf_i+0x244>)
 800628e:	230a      	movs	r3, #10
 8006290:	e019      	b.n	80062c6 <_printf_i+0x102>
 8006292:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006296:	6805      	ldr	r5, [r0, #0]
 8006298:	600b      	str	r3, [r1, #0]
 800629a:	bf18      	it	ne
 800629c:	b22d      	sxthne	r5, r5
 800629e:	e7ef      	b.n	8006280 <_printf_i+0xbc>
 80062a0:	680b      	ldr	r3, [r1, #0]
 80062a2:	6825      	ldr	r5, [r4, #0]
 80062a4:	1d18      	adds	r0, r3, #4
 80062a6:	6008      	str	r0, [r1, #0]
 80062a8:	0628      	lsls	r0, r5, #24
 80062aa:	d501      	bpl.n	80062b0 <_printf_i+0xec>
 80062ac:	681d      	ldr	r5, [r3, #0]
 80062ae:	e002      	b.n	80062b6 <_printf_i+0xf2>
 80062b0:	0669      	lsls	r1, r5, #25
 80062b2:	d5fb      	bpl.n	80062ac <_printf_i+0xe8>
 80062b4:	881d      	ldrh	r5, [r3, #0]
 80062b6:	4854      	ldr	r0, [pc, #336]	; (8006408 <_printf_i+0x244>)
 80062b8:	2f6f      	cmp	r7, #111	; 0x6f
 80062ba:	bf0c      	ite	eq
 80062bc:	2308      	moveq	r3, #8
 80062be:	230a      	movne	r3, #10
 80062c0:	2100      	movs	r1, #0
 80062c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062c6:	6866      	ldr	r6, [r4, #4]
 80062c8:	60a6      	str	r6, [r4, #8]
 80062ca:	2e00      	cmp	r6, #0
 80062cc:	bfa2      	ittt	ge
 80062ce:	6821      	ldrge	r1, [r4, #0]
 80062d0:	f021 0104 	bicge.w	r1, r1, #4
 80062d4:	6021      	strge	r1, [r4, #0]
 80062d6:	b90d      	cbnz	r5, 80062dc <_printf_i+0x118>
 80062d8:	2e00      	cmp	r6, #0
 80062da:	d04d      	beq.n	8006378 <_printf_i+0x1b4>
 80062dc:	4616      	mov	r6, r2
 80062de:	fbb5 f1f3 	udiv	r1, r5, r3
 80062e2:	fb03 5711 	mls	r7, r3, r1, r5
 80062e6:	5dc7      	ldrb	r7, [r0, r7]
 80062e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062ec:	462f      	mov	r7, r5
 80062ee:	42bb      	cmp	r3, r7
 80062f0:	460d      	mov	r5, r1
 80062f2:	d9f4      	bls.n	80062de <_printf_i+0x11a>
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d10b      	bne.n	8006310 <_printf_i+0x14c>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	07df      	lsls	r7, r3, #31
 80062fc:	d508      	bpl.n	8006310 <_printf_i+0x14c>
 80062fe:	6923      	ldr	r3, [r4, #16]
 8006300:	6861      	ldr	r1, [r4, #4]
 8006302:	4299      	cmp	r1, r3
 8006304:	bfde      	ittt	le
 8006306:	2330      	movle	r3, #48	; 0x30
 8006308:	f806 3c01 	strble.w	r3, [r6, #-1]
 800630c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006310:	1b92      	subs	r2, r2, r6
 8006312:	6122      	str	r2, [r4, #16]
 8006314:	f8cd a000 	str.w	sl, [sp]
 8006318:	464b      	mov	r3, r9
 800631a:	aa03      	add	r2, sp, #12
 800631c:	4621      	mov	r1, r4
 800631e:	4640      	mov	r0, r8
 8006320:	f7ff fee2 	bl	80060e8 <_printf_common>
 8006324:	3001      	adds	r0, #1
 8006326:	d14c      	bne.n	80063c2 <_printf_i+0x1fe>
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	b004      	add	sp, #16
 800632e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006332:	4835      	ldr	r0, [pc, #212]	; (8006408 <_printf_i+0x244>)
 8006334:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	680e      	ldr	r6, [r1, #0]
 800633c:	061f      	lsls	r7, r3, #24
 800633e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006342:	600e      	str	r6, [r1, #0]
 8006344:	d514      	bpl.n	8006370 <_printf_i+0x1ac>
 8006346:	07d9      	lsls	r1, r3, #31
 8006348:	bf44      	itt	mi
 800634a:	f043 0320 	orrmi.w	r3, r3, #32
 800634e:	6023      	strmi	r3, [r4, #0]
 8006350:	b91d      	cbnz	r5, 800635a <_printf_i+0x196>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	f023 0320 	bic.w	r3, r3, #32
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	2310      	movs	r3, #16
 800635c:	e7b0      	b.n	80062c0 <_printf_i+0xfc>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	f043 0320 	orr.w	r3, r3, #32
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	2378      	movs	r3, #120	; 0x78
 8006368:	4828      	ldr	r0, [pc, #160]	; (800640c <_printf_i+0x248>)
 800636a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800636e:	e7e3      	b.n	8006338 <_printf_i+0x174>
 8006370:	065e      	lsls	r6, r3, #25
 8006372:	bf48      	it	mi
 8006374:	b2ad      	uxthmi	r5, r5
 8006376:	e7e6      	b.n	8006346 <_printf_i+0x182>
 8006378:	4616      	mov	r6, r2
 800637a:	e7bb      	b.n	80062f4 <_printf_i+0x130>
 800637c:	680b      	ldr	r3, [r1, #0]
 800637e:	6826      	ldr	r6, [r4, #0]
 8006380:	6960      	ldr	r0, [r4, #20]
 8006382:	1d1d      	adds	r5, r3, #4
 8006384:	600d      	str	r5, [r1, #0]
 8006386:	0635      	lsls	r5, r6, #24
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	d501      	bpl.n	8006390 <_printf_i+0x1cc>
 800638c:	6018      	str	r0, [r3, #0]
 800638e:	e002      	b.n	8006396 <_printf_i+0x1d2>
 8006390:	0671      	lsls	r1, r6, #25
 8006392:	d5fb      	bpl.n	800638c <_printf_i+0x1c8>
 8006394:	8018      	strh	r0, [r3, #0]
 8006396:	2300      	movs	r3, #0
 8006398:	6123      	str	r3, [r4, #16]
 800639a:	4616      	mov	r6, r2
 800639c:	e7ba      	b.n	8006314 <_printf_i+0x150>
 800639e:	680b      	ldr	r3, [r1, #0]
 80063a0:	1d1a      	adds	r2, r3, #4
 80063a2:	600a      	str	r2, [r1, #0]
 80063a4:	681e      	ldr	r6, [r3, #0]
 80063a6:	6862      	ldr	r2, [r4, #4]
 80063a8:	2100      	movs	r1, #0
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7f9 ff18 	bl	80001e0 <memchr>
 80063b0:	b108      	cbz	r0, 80063b6 <_printf_i+0x1f2>
 80063b2:	1b80      	subs	r0, r0, r6
 80063b4:	6060      	str	r0, [r4, #4]
 80063b6:	6863      	ldr	r3, [r4, #4]
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	2300      	movs	r3, #0
 80063bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c0:	e7a8      	b.n	8006314 <_printf_i+0x150>
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	4632      	mov	r2, r6
 80063c6:	4649      	mov	r1, r9
 80063c8:	4640      	mov	r0, r8
 80063ca:	47d0      	blx	sl
 80063cc:	3001      	adds	r0, #1
 80063ce:	d0ab      	beq.n	8006328 <_printf_i+0x164>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	079b      	lsls	r3, r3, #30
 80063d4:	d413      	bmi.n	80063fe <_printf_i+0x23a>
 80063d6:	68e0      	ldr	r0, [r4, #12]
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	4298      	cmp	r0, r3
 80063dc:	bfb8      	it	lt
 80063de:	4618      	movlt	r0, r3
 80063e0:	e7a4      	b.n	800632c <_printf_i+0x168>
 80063e2:	2301      	movs	r3, #1
 80063e4:	4632      	mov	r2, r6
 80063e6:	4649      	mov	r1, r9
 80063e8:	4640      	mov	r0, r8
 80063ea:	47d0      	blx	sl
 80063ec:	3001      	adds	r0, #1
 80063ee:	d09b      	beq.n	8006328 <_printf_i+0x164>
 80063f0:	3501      	adds	r5, #1
 80063f2:	68e3      	ldr	r3, [r4, #12]
 80063f4:	9903      	ldr	r1, [sp, #12]
 80063f6:	1a5b      	subs	r3, r3, r1
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dcf2      	bgt.n	80063e2 <_printf_i+0x21e>
 80063fc:	e7eb      	b.n	80063d6 <_printf_i+0x212>
 80063fe:	2500      	movs	r5, #0
 8006400:	f104 0619 	add.w	r6, r4, #25
 8006404:	e7f5      	b.n	80063f2 <_printf_i+0x22e>
 8006406:	bf00      	nop
 8006408:	080066c1 	.word	0x080066c1
 800640c:	080066d2 	.word	0x080066d2

08006410 <memcpy>:
 8006410:	440a      	add	r2, r1
 8006412:	4291      	cmp	r1, r2
 8006414:	f100 33ff 	add.w	r3, r0, #4294967295
 8006418:	d100      	bne.n	800641c <memcpy+0xc>
 800641a:	4770      	bx	lr
 800641c:	b510      	push	{r4, lr}
 800641e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006426:	4291      	cmp	r1, r2
 8006428:	d1f9      	bne.n	800641e <memcpy+0xe>
 800642a:	bd10      	pop	{r4, pc}

0800642c <memmove>:
 800642c:	4288      	cmp	r0, r1
 800642e:	b510      	push	{r4, lr}
 8006430:	eb01 0402 	add.w	r4, r1, r2
 8006434:	d902      	bls.n	800643c <memmove+0x10>
 8006436:	4284      	cmp	r4, r0
 8006438:	4623      	mov	r3, r4
 800643a:	d807      	bhi.n	800644c <memmove+0x20>
 800643c:	1e43      	subs	r3, r0, #1
 800643e:	42a1      	cmp	r1, r4
 8006440:	d008      	beq.n	8006454 <memmove+0x28>
 8006442:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800644a:	e7f8      	b.n	800643e <memmove+0x12>
 800644c:	4402      	add	r2, r0
 800644e:	4601      	mov	r1, r0
 8006450:	428a      	cmp	r2, r1
 8006452:	d100      	bne.n	8006456 <memmove+0x2a>
 8006454:	bd10      	pop	{r4, pc}
 8006456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800645a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800645e:	e7f7      	b.n	8006450 <memmove+0x24>

08006460 <_free_r>:
 8006460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006462:	2900      	cmp	r1, #0
 8006464:	d048      	beq.n	80064f8 <_free_r+0x98>
 8006466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800646a:	9001      	str	r0, [sp, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f1a1 0404 	sub.w	r4, r1, #4
 8006472:	bfb8      	it	lt
 8006474:	18e4      	addlt	r4, r4, r3
 8006476:	f000 f8d3 	bl	8006620 <__malloc_lock>
 800647a:	4a20      	ldr	r2, [pc, #128]	; (80064fc <_free_r+0x9c>)
 800647c:	9801      	ldr	r0, [sp, #4]
 800647e:	6813      	ldr	r3, [r2, #0]
 8006480:	4615      	mov	r5, r2
 8006482:	b933      	cbnz	r3, 8006492 <_free_r+0x32>
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	6014      	str	r4, [r2, #0]
 8006488:	b003      	add	sp, #12
 800648a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800648e:	f000 b8cd 	b.w	800662c <__malloc_unlock>
 8006492:	42a3      	cmp	r3, r4
 8006494:	d90b      	bls.n	80064ae <_free_r+0x4e>
 8006496:	6821      	ldr	r1, [r4, #0]
 8006498:	1862      	adds	r2, r4, r1
 800649a:	4293      	cmp	r3, r2
 800649c:	bf04      	itt	eq
 800649e:	681a      	ldreq	r2, [r3, #0]
 80064a0:	685b      	ldreq	r3, [r3, #4]
 80064a2:	6063      	str	r3, [r4, #4]
 80064a4:	bf04      	itt	eq
 80064a6:	1852      	addeq	r2, r2, r1
 80064a8:	6022      	streq	r2, [r4, #0]
 80064aa:	602c      	str	r4, [r5, #0]
 80064ac:	e7ec      	b.n	8006488 <_free_r+0x28>
 80064ae:	461a      	mov	r2, r3
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	b10b      	cbz	r3, 80064b8 <_free_r+0x58>
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	d9fa      	bls.n	80064ae <_free_r+0x4e>
 80064b8:	6811      	ldr	r1, [r2, #0]
 80064ba:	1855      	adds	r5, r2, r1
 80064bc:	42a5      	cmp	r5, r4
 80064be:	d10b      	bne.n	80064d8 <_free_r+0x78>
 80064c0:	6824      	ldr	r4, [r4, #0]
 80064c2:	4421      	add	r1, r4
 80064c4:	1854      	adds	r4, r2, r1
 80064c6:	42a3      	cmp	r3, r4
 80064c8:	6011      	str	r1, [r2, #0]
 80064ca:	d1dd      	bne.n	8006488 <_free_r+0x28>
 80064cc:	681c      	ldr	r4, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	6053      	str	r3, [r2, #4]
 80064d2:	4421      	add	r1, r4
 80064d4:	6011      	str	r1, [r2, #0]
 80064d6:	e7d7      	b.n	8006488 <_free_r+0x28>
 80064d8:	d902      	bls.n	80064e0 <_free_r+0x80>
 80064da:	230c      	movs	r3, #12
 80064dc:	6003      	str	r3, [r0, #0]
 80064de:	e7d3      	b.n	8006488 <_free_r+0x28>
 80064e0:	6825      	ldr	r5, [r4, #0]
 80064e2:	1961      	adds	r1, r4, r5
 80064e4:	428b      	cmp	r3, r1
 80064e6:	bf04      	itt	eq
 80064e8:	6819      	ldreq	r1, [r3, #0]
 80064ea:	685b      	ldreq	r3, [r3, #4]
 80064ec:	6063      	str	r3, [r4, #4]
 80064ee:	bf04      	itt	eq
 80064f0:	1949      	addeq	r1, r1, r5
 80064f2:	6021      	streq	r1, [r4, #0]
 80064f4:	6054      	str	r4, [r2, #4]
 80064f6:	e7c7      	b.n	8006488 <_free_r+0x28>
 80064f8:	b003      	add	sp, #12
 80064fa:	bd30      	pop	{r4, r5, pc}
 80064fc:	20000148 	.word	0x20000148

08006500 <_malloc_r>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	1ccd      	adds	r5, r1, #3
 8006504:	f025 0503 	bic.w	r5, r5, #3
 8006508:	3508      	adds	r5, #8
 800650a:	2d0c      	cmp	r5, #12
 800650c:	bf38      	it	cc
 800650e:	250c      	movcc	r5, #12
 8006510:	2d00      	cmp	r5, #0
 8006512:	4606      	mov	r6, r0
 8006514:	db01      	blt.n	800651a <_malloc_r+0x1a>
 8006516:	42a9      	cmp	r1, r5
 8006518:	d903      	bls.n	8006522 <_malloc_r+0x22>
 800651a:	230c      	movs	r3, #12
 800651c:	6033      	str	r3, [r6, #0]
 800651e:	2000      	movs	r0, #0
 8006520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006522:	f000 f87d 	bl	8006620 <__malloc_lock>
 8006526:	4921      	ldr	r1, [pc, #132]	; (80065ac <_malloc_r+0xac>)
 8006528:	680a      	ldr	r2, [r1, #0]
 800652a:	4614      	mov	r4, r2
 800652c:	b99c      	cbnz	r4, 8006556 <_malloc_r+0x56>
 800652e:	4f20      	ldr	r7, [pc, #128]	; (80065b0 <_malloc_r+0xb0>)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	b923      	cbnz	r3, 800653e <_malloc_r+0x3e>
 8006534:	4621      	mov	r1, r4
 8006536:	4630      	mov	r0, r6
 8006538:	f000 f862 	bl	8006600 <_sbrk_r>
 800653c:	6038      	str	r0, [r7, #0]
 800653e:	4629      	mov	r1, r5
 8006540:	4630      	mov	r0, r6
 8006542:	f000 f85d 	bl	8006600 <_sbrk_r>
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	d123      	bne.n	8006592 <_malloc_r+0x92>
 800654a:	230c      	movs	r3, #12
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	4630      	mov	r0, r6
 8006550:	f000 f86c 	bl	800662c <__malloc_unlock>
 8006554:	e7e3      	b.n	800651e <_malloc_r+0x1e>
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	1b5b      	subs	r3, r3, r5
 800655a:	d417      	bmi.n	800658c <_malloc_r+0x8c>
 800655c:	2b0b      	cmp	r3, #11
 800655e:	d903      	bls.n	8006568 <_malloc_r+0x68>
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	441c      	add	r4, r3
 8006564:	6025      	str	r5, [r4, #0]
 8006566:	e004      	b.n	8006572 <_malloc_r+0x72>
 8006568:	6863      	ldr	r3, [r4, #4]
 800656a:	42a2      	cmp	r2, r4
 800656c:	bf0c      	ite	eq
 800656e:	600b      	streq	r3, [r1, #0]
 8006570:	6053      	strne	r3, [r2, #4]
 8006572:	4630      	mov	r0, r6
 8006574:	f000 f85a 	bl	800662c <__malloc_unlock>
 8006578:	f104 000b 	add.w	r0, r4, #11
 800657c:	1d23      	adds	r3, r4, #4
 800657e:	f020 0007 	bic.w	r0, r0, #7
 8006582:	1ac2      	subs	r2, r0, r3
 8006584:	d0cc      	beq.n	8006520 <_malloc_r+0x20>
 8006586:	1a1b      	subs	r3, r3, r0
 8006588:	50a3      	str	r3, [r4, r2]
 800658a:	e7c9      	b.n	8006520 <_malloc_r+0x20>
 800658c:	4622      	mov	r2, r4
 800658e:	6864      	ldr	r4, [r4, #4]
 8006590:	e7cc      	b.n	800652c <_malloc_r+0x2c>
 8006592:	1cc4      	adds	r4, r0, #3
 8006594:	f024 0403 	bic.w	r4, r4, #3
 8006598:	42a0      	cmp	r0, r4
 800659a:	d0e3      	beq.n	8006564 <_malloc_r+0x64>
 800659c:	1a21      	subs	r1, r4, r0
 800659e:	4630      	mov	r0, r6
 80065a0:	f000 f82e 	bl	8006600 <_sbrk_r>
 80065a4:	3001      	adds	r0, #1
 80065a6:	d1dd      	bne.n	8006564 <_malloc_r+0x64>
 80065a8:	e7cf      	b.n	800654a <_malloc_r+0x4a>
 80065aa:	bf00      	nop
 80065ac:	20000148 	.word	0x20000148
 80065b0:	2000014c 	.word	0x2000014c

080065b4 <_realloc_r>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	4607      	mov	r7, r0
 80065b8:	4614      	mov	r4, r2
 80065ba:	460e      	mov	r6, r1
 80065bc:	b921      	cbnz	r1, 80065c8 <_realloc_r+0x14>
 80065be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065c2:	4611      	mov	r1, r2
 80065c4:	f7ff bf9c 	b.w	8006500 <_malloc_r>
 80065c8:	b922      	cbnz	r2, 80065d4 <_realloc_r+0x20>
 80065ca:	f7ff ff49 	bl	8006460 <_free_r>
 80065ce:	4625      	mov	r5, r4
 80065d0:	4628      	mov	r0, r5
 80065d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065d4:	f000 f830 	bl	8006638 <_malloc_usable_size_r>
 80065d8:	42a0      	cmp	r0, r4
 80065da:	d20f      	bcs.n	80065fc <_realloc_r+0x48>
 80065dc:	4621      	mov	r1, r4
 80065de:	4638      	mov	r0, r7
 80065e0:	f7ff ff8e 	bl	8006500 <_malloc_r>
 80065e4:	4605      	mov	r5, r0
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d0f2      	beq.n	80065d0 <_realloc_r+0x1c>
 80065ea:	4631      	mov	r1, r6
 80065ec:	4622      	mov	r2, r4
 80065ee:	f7ff ff0f 	bl	8006410 <memcpy>
 80065f2:	4631      	mov	r1, r6
 80065f4:	4638      	mov	r0, r7
 80065f6:	f7ff ff33 	bl	8006460 <_free_r>
 80065fa:	e7e9      	b.n	80065d0 <_realloc_r+0x1c>
 80065fc:	4635      	mov	r5, r6
 80065fe:	e7e7      	b.n	80065d0 <_realloc_r+0x1c>

08006600 <_sbrk_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4d06      	ldr	r5, [pc, #24]	; (800661c <_sbrk_r+0x1c>)
 8006604:	2300      	movs	r3, #0
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	602b      	str	r3, [r5, #0]
 800660c:	f7fb f998 	bl	8001940 <_sbrk>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_sbrk_r+0x1a>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_sbrk_r+0x1a>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	20000380 	.word	0x20000380

08006620 <__malloc_lock>:
 8006620:	4801      	ldr	r0, [pc, #4]	; (8006628 <__malloc_lock+0x8>)
 8006622:	f000 b811 	b.w	8006648 <__retarget_lock_acquire_recursive>
 8006626:	bf00      	nop
 8006628:	20000388 	.word	0x20000388

0800662c <__malloc_unlock>:
 800662c:	4801      	ldr	r0, [pc, #4]	; (8006634 <__malloc_unlock+0x8>)
 800662e:	f000 b80c 	b.w	800664a <__retarget_lock_release_recursive>
 8006632:	bf00      	nop
 8006634:	20000388 	.word	0x20000388

08006638 <_malloc_usable_size_r>:
 8006638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800663c:	1f18      	subs	r0, r3, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	bfbc      	itt	lt
 8006642:	580b      	ldrlt	r3, [r1, r0]
 8006644:	18c0      	addlt	r0, r0, r3
 8006646:	4770      	bx	lr

08006648 <__retarget_lock_acquire_recursive>:
 8006648:	4770      	bx	lr

0800664a <__retarget_lock_release_recursive>:
 800664a:	4770      	bx	lr

0800664c <_init>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	bf00      	nop
 8006650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006652:	bc08      	pop	{r3}
 8006654:	469e      	mov	lr, r3
 8006656:	4770      	bx	lr

08006658 <_fini>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr
